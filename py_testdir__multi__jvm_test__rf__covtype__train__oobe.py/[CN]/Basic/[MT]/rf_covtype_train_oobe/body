def rf_covtype_train_oobe(self, csvFilename, checkExpectedResults=True):
    importFolderPath = 'standard'
    csvPathname = ((importFolderPath + '/') + csvFilename)
    hex_key = (csvFilename + '.hex')
    print '\nUsing header=0 on', csvFilename
    parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, hex_key=hex_key, header=0, timeoutSecs=180)
    inspect = h2o_cmd.runInspect(key=parseResult['destination_key'])
    print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
    num_rows = inspect['num_rows']
    pct10 = int((num_rows * 0.1))
    rowsForPct = [(i * pct10) for i in range(0, 11)]
    last10 = (num_rows - rowsForPct[9])
    rowsForPct[10] = num_rows
    rowsForPct[0] = rowsForPct[10]
    expectTrainPctRightList = [0, 85.16, 88.45, 90.24, 91.27, 92.03, 92.64, 93.11, 93.48, 93.79]
    expectScorePctRightList = [0, 88.81, 91.72, 93.06, 94.02, 94.52, 95.09, 95.41, 95.77, 95.78]
    print 'Creating the key of the last 10% data, for scoring'
    dataKeyTest = 'rTest'
    execExpr = (((((dataKeyTest + ' = slice(') + hex_key) + ',') + str((rowsForPct[9] + 1))) + ')')
    h2o_exec.exec_expr(None, execExpr, resultKey=dataKeyTest, timeoutSecs=10)
    actualTrainPctRightList = [0]
    actualScorePctRightList = [0]
    for trial in range(8, 9):
        rowsToUse = rowsForPct[(trial % 10)]
        resultKey = ((('r_' + csvFilename) + '_') + str(trial))
        execExpr = (((((resultKey + ' = slice(') + hex_key) + ',1,') + str(rowsToUse)) + ')')
        h2o_exec.exec_expr(None, execExpr, resultKey=resultKey, timeoutSecs=10)
        kwargs = paramDict.copy()
        timeoutSecs = (30 + (kwargs['ntree'] * 20))
        kwargs['out_of_bag_error_estimate'] = 1
        kwargs['model_key'] = ((('model_' + csvFilename) + '_') + str(trial))
        inspect = h2o_cmd.runInspect(key=parseResult['destination_key'])
        h2o_cmd.infoFromInspect(inspect, 'going into RF')
        start = time.time()
        rfv = h2o_cmd.runRF(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
        elapsed = (time.time() - start)
        print 'RF end on ', csvPathname, 'took', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
        oobeTrainPctRight = (100 * (1.0 - rfv['confusion_matrix']['classification_error']))
        if checkExpectedResults:
            self.assertAlmostEqual(oobeTrainPctRight, expectTrainPctRightList[trial], msg=('OOBE: pct. right for %s pct. training not close enough %6.2f %6.2f' % ((trial * 10), oobeTrainPctRight, expectTrainPctRightList[trial])), delta=ALLOWED_DELTA)
        actualTrainPctRightList.append(oobeTrainPctRight)
        print 'Now score on the last 10%. Note this is silly if we trained on 100% of the data'
        print 'Or sorted by output class, so that the last 10% is the last few classes'
        model_key = rfv['model_key']
        kwargs.pop('model_key', None)
        data_key = rfv['data_key']
        kwargs.pop('data_key', None)
        ntree = rfv['ntree']
        kwargs.pop('ntree', None)
        kwargs['iterative_cm'] = 1
        kwargs['no_confusion_matrix'] = 0
        kwargs['out_of_bag_error_estimate'] = 0
        inspect = h2o_cmd.runInspect(key=dataKeyTest)
        h2o_cmd.infoFromInspect(inspect, 'dataKeyTest')
        rfvScoring = h2o_cmd.runRFView(None, dataKeyTest, model_key, ntree, timeoutSecs, retryDelaySecs=1, print_params=True, **kwargs)
        h2o.nodes[0].generate_predictions(model_key=model_key, data_key=dataKeyTest)
        fullScorePctRight = (100 * (1.0 - rfvScoring['confusion_matrix']['classification_error']))
        if checkExpectedResults:
            self.assertAlmostEqual(fullScorePctRight, expectScorePctRightList[trial], msg=('Full: pct. right for scoring after %s pct. training not close enough %6.2f %6.2f' % ((trial * 10), fullScorePctRight, expectScorePctRightList[trial])), delta=ALLOWED_DELTA)
        actualScorePctRightList.append(fullScorePctRight)
        print 'Trial #', trial, 'completed', ('using %6.2f' % ((rowsToUse * 100.0) / num_rows)), 'pct. of all rows'
    actualDelta = [abs((a - b)) for (a, b) in zip(expectTrainPctRightList, actualTrainPctRightList)]
    niceFp = ['{0:0.2f}'.format(i) for i in actualTrainPctRightList]
    print 'maybe should update with actual. Remove single quotes'
    print 'actualTrainPctRightList =', niceFp
    niceFp = ['{0:0.2f}'.format(i) for i in actualDelta]
    print 'actualDelta =', niceFp
    actualDelta = [abs((a - b)) for (a, b) in zip(expectScorePctRightList, actualScorePctRightList)]
    niceFp = ['{0:0.2f}'.format(i) for i in actualScorePctRightList]
    print 'maybe should update with actual. Remove single quotes'
    print 'actualScorePctRightList =', niceFp
    niceFp = ['{0:0.2f}'.format(i) for i in actualDelta]
    print 'actualDelta =', niceFp
    return rfv
