def test_KMeansGrid_basic_fvec(self):
    h2o.beta_features = True
    if localhost:
        csvFilenameList = [('covtype.data', 800)]
    else:
        csvFilenameList = [('covtype.data', 800)]
    for (csvFilename, timeoutSecs) in csvFilenameList:
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path='standard/covtype.data', schema='local', timeoutSecs=2000, pollTimeoutSecs=60)
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print 'python_source:', parseResult['python_source']
        csvPathname = parseResult['python_source']
        print ('\n' + csvPathname), '    numRows:', '{:,}'.format(inspect['numRows']), '    numCols:', '{:,}'.format(inspect['numCols'])
        destination_key = 'd.hex'
        params = {'k': '2,3', 'initialization': None, 'seed': 3923021996079663354, 'normalize': 0, 'max_iter': '2', 'destination_key': destination_key, }
        for trial in range(3):
            kwargs = params.copy()
            start = time.time()
            kmeans = h2o_cmd.runKMeans(parseResult=parseResult, timeoutSecs=timeoutSecs, retryDelaySecs=2, pollTimeoutSecs=60, **kwargs)
            elapsed = (time.time() - start)
            print 'kmeans (with grid) end on ', csvPathname, 'took', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
            print 'FIX! have to interrogate each job result to see kmeans grid results'
            print 'Trial #', trial, 'completed\n'
