def test_parse_covtype_loop_fvec(self):
    h2o.beta_features = True
    global OUTSTANDING
    if (not OUTSTANDING):
        OUTSTANDING = min(10, len(h2o.nodes))
    if DO_IRIS:
        global DO_BIGFILE
        DO_BIGFILE = False
        bucket = 'smalldata'
        importFolderPath = 'iris'
        csvFilename = 'iris2.csv'
        csvFilePattern = 'iris2.csv'
        if localhost:
            trialMax = 20
        else:
            trialMax = 100
    elif DO_BIGFILE:
        bucket = 'home-0xdiag-datasets'
        importFolderPath = 'standard'
        csvFilename = 'covtype20x.data'
        csvFilePattern = 'covtype20x.data'
        trialMax = (2 * OUTSTANDING)
    else:
        bucket = 'home-0xdiag-datasets'
        importFolderPath = 'standard'
        csvFilename = 'covtype.data'
        csvFilePattern = 'covtype.data'
        trialMax = (40 * OUTSTANDING)
    parseTrial = 0
    summaryTrial = 0
    uploader_resultq = multiprocessing.Queue()
    while (parseTrial <= trialMax):
        start = time.time()
        uploaders = []
        if (not DO_IRIS):
            assert (OUTSTANDING <= 10), 'we only have 10 links with unique names to covtype.data'
        for o in range(OUTSTANDING):
            src_key = ((csvFilename + '_') + str(parseTrial))
            hex_key = (((csvFilename + '_') + str(parseTrial)) + '.hexxx')
            if DO_IRIS:
                csvPathname = ((importFolderPath + '/') + csvFilePattern)
            else:
                csvPathname = ((((importFolderPath + '/') + csvFilePattern) + '_') + str(o))
            start = time.time()
            np = (parseTrial % len(h2o.nodes))
            retryDelaySecs = (5 if DO_BIGFILE else 1)
            timeoutSecs = (60 if DO_BIGFILE else 15)
            tmp = multiprocessing.Process(target=function_no_keyboard_intr, args=(uploader_resultq, uploadit, np, bucket, csvPathname, src_key, hex_key, timeoutSecs, retryDelaySecs))
            tmp.start()
            uploaders.append(tmp)
            parseTrial += 1
        for uploader in uploaders:
            try:
                uploader.join()
                uploader.terminate()
                (importPattern, hex_key) = uploader_resultq.get(timeout=2)
            except KeyboardInterrupt:
                print 'parent received ctrl-c'
                for uploader in uploaders:
                    uploader.terminate()
                    uploader.join()
        elapsed = (time.time() - start)
        print 'Parse group end at #', parseTrial, 'completed in', ('%6.2f' % elapsed), 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
    print "We might have parses that haven't completed. The join just says we can reuse some files (parse still going)"
    if PARSE_NOPOLL:
        h2o_jobs.pollWaitJobs(timeoutSecs=180)
    h2o_cmd.runStoreView()
    if DO_PARSE_ALSO:
        print 'These all go to node [0]'
        for summaryTrial in range(trialMax):
            firstXorUll = None
            firstQuantileUll = None
            hex_key = (((csvFilename + '_') + str(summaryTrial)) + '.hexxx')
            if DO_EXEC_QUANT:
                execExpr = ('r2=c(1); r2=quantile(%s[,1], c(%s));' % (hex_key, thresholds))
                (resultExec, fpResult) = h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
                ullResult = h2o_util.doubleToUnsignedLongLong(fpResult)
                print ('%30s' % 'median ullResult (0.16x):'), ('0x%0.16x   %s' % (ullResult, fpResult))
                if firstQuantileUll:
                    self.assertEqual(ullResult, firstQuantileUll)
                else:
                    firstQuantileUll = ullResult
            if DO_XORSUM:
                execExpr = ('r2=c(1); r2=xorsum(%s[,1], c(%s));' % (hex_key, thresholds))
                (resultExec, fpResult) = h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
                ullResult = h2o_util.doubleToUnsignedLongLong(fpResult)
                print ('%30s' % 'xorsum ullResult (0.16x):'), ('0x%0.16x   %s' % (ullResult, fpResult))
                if firstXorUll:
                    self.assertEqual(ullResult, firstXorUll)
                else:
                    firstXorUll = ullResult
            if DO_SUMMARY:
                h2o_cmd.runSummary(key=hex_key)
