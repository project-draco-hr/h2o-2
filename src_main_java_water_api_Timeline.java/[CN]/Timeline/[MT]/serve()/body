{
  long ctm=System.currentTimeMillis();
  long[][] snapshot=TimeLine.system_snapshot();
  H2O cloud=TimeLine.CLOUD;
  TimelineSnapshot events=new TimelineSnapshot(cloud,snapshot);
  SimpleDateFormat sdf=new SimpleDateFormat("HH:mm:ss:SSS");
  JsonObject resJson=new JsonObject();
  resJson.addProperty(JSON_NOW,sdf.format(new Date(ctm)));
  resJson.addProperty(JSON_SELF,H2O.SELF.toString());
  JsonArray eventsJson=new JsonArray();
  resJson.add(JSON_EVENTS,eventsJson);
  ArrayList<TimelineSnapshot.Event> heartbeats=new ArrayList();
  for (  TimelineSnapshot.Event event : events) {
    H2ONode h2o=cloud._memary[event._nodeId];
    long l0=event.dataLo();
    long h8=event.dataHi();
    int udp_type=(int)(l0 & 0xff);
    UDP.udp e=UDP.udp.UDPS[udp_type];
    if (e == UDP.udp.heartbeat) {
      heartbeats.add(event);
      continue;
    }
    if (!heartbeats.isEmpty()) {
      long firstMs=heartbeats.get(0).ms();
      long lastMs=heartbeats.get(heartbeats.size() - 1).ms();
      int totalSends=0;
      int totalRecvs=0;
      int totalDrops=0;
      int[] sends=new int[cloud.size()];
      int[] recvs=new int[cloud.size()];
      for (      TimelineSnapshot.Event h : heartbeats) {
        if (h.isSend()) {
          ++totalSends;
          ++sends[h._nodeId];
        }
 else         if (h.isDropped()) {
          ++totalDrops;
        }
 else {
          ++totalRecvs;
          ++recvs[h._nodeId];
        }
      }
      heartbeats.clear();
      JsonObject hbJson=new JsonObject();
      eventsJson.add(hbJson);
      hbJson.addProperty(JSON_TYPE,"heartbeat");
      hbJson.addProperty(JSON_FIRST_TIME,sdf.format(new Date(firstMs)));
      hbJson.addProperty(JSON_LAST_TIME,sdf.format(new Date(lastMs)));
      hbJson.addProperty(JSON_SENDS,totalSends);
      hbJson.addProperty(JSON_RECVS,totalRecvs);
      hbJson.addProperty(JSON_DROPS,totalDrops);
      JsonArray cloudListJson=new JsonArray();
      hbJson.add(JSON_CLOUDS,cloudListJson);
      for (int i=0; i < sends.length; ++i) {
        JsonObject cloudJson=new JsonObject();
        cloudListJson.add(cloudJson);
        cloudJson.addProperty(JSON_CLOUD,TimeLine.CLOUD._memary[i].toString());
        cloudJson.addProperty(JSON_SENDS,sends[i]);
        cloudJson.addProperty(JSON_RECVS,recvs[i]);
      }
    }
    long ms=event.ms();
    long ns=event.ns();
    String date=sdf.format(new Date(ms));
    JsonObject eventJson=new JsonObject();
    eventsJson.add(eventJson);
    eventJson.addProperty(JSON_UDPTCP,event.isTCP() ? "TCP" : "UDP");
    eventJson.addProperty(JSON_TIME,date);
    eventJson.addProperty(JSON_NANOS,ns);
    eventJson.addProperty(JSON_TYPE,e.toString());
    eventJson.addProperty(JSON_SR,event.isSend());
    if (event.isSend()) {
      eventJson.addProperty(JSON_SEND,h2o.toString());
      String recv=event.packH2O() == null ? "multicast" : event.packH2O().toString();
      eventJson.addProperty(JSON_RECV,recv);
    }
 else {
      eventJson.addProperty(JSON_SEND,event.packH2O().toString());
      eventJson.addProperty(JSON_RECV,h2o.toString());
      if (event.isDropped())       eventJson.addProperty(JSON_DROP,"1");
    }
    eventJson.addProperty(JSON_BYTES,UDP.printx16(l0,h8));
  }
  Response r=Response.done(resJson);
  r.setBuilder(JSON_EVENTS,new EventTableBuilder());
  return r;
}
