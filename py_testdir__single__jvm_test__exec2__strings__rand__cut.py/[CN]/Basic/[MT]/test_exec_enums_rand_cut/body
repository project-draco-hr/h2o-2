def test_exec_enums_rand_cut(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(ROWS, 3, 2, 'cE', 300)]
    eKeys = [('e%s' % i) for i in range(10)]
    trial = 0
    for (rowCount, iColCount, oColCount, hex_key, timeoutSecs) in tryList:
        colCount = (iColCount + oColCount)
        hex_key = 'p'
        colEnumList = create_col_enum_list(iColCount)
        rowExprList = []
        for j in range(CUT_EXPR_CNT):
            print 'Creating', CUT_EXPR_CNT, 'cut expressions'
            cutValue = [None for i in range(iColCount)]
            cols = random.sample(range(iColCount), random.randint(1, iColCount))
            for c in cols:
                cel = colEnumList
                if (1 == 1):
                    celChoice = str(random.choice(range(len(cel))))
                else:
                    celChoice = random.choice(cel)
                cutValue[c] = celChoice
            cutExprList = []
            for (i, c) in enumerate(cutValue):
                if (c is None):
                    continue
                else:
                    cutExprList.append(((('p$C' + str((i + 1))) + '==') + c))
            cutExpr = ' && '.join(cutExprList)
            print 'cutExpr:', cutExpr
            e = random.sample(eKeys, 2)
            fKey = e[0]
            eKey = e[1]
            rowExpr = ('%s[%s,];' % (hex_key, cutExpr))
            print 'rowExpr:', rowExpr
            rowExprList.append(rowExpr)
            print 'j:', j
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((('syn_enums_' + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print 'Creating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, iColCount, oColCount, SEEDPERFILE, colEnumList=colEnumList)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=30, doSummary=False, header=0)
        print "Parse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(key=parseResult['destination_key'])
        h2o_cmd.infoFromInspect(inspect, csvPathname)
        rSummary = h2o_cmd.runSummary(key=parseResult['destination_key'])
        h2o_cmd.infoFromSummary(rSummary)
        (missingValuesDict, constantValuesDict, enumSizeDict, colTypeDict, colNameDict) = h2o_cmd.columnInfoFromInspect(parseResult['destination_key'], exceptionOnMissingValues=False)
        if (len(constantValuesDict) != 0):
            raise Exception(("Probably got a col NA'ed and constant values as a result %s" % constantValuesDict))
        if (1 == 1):
            a = ('a=c(1,2,3);' + ';'.join([('a[,%s]=a[,%s-1]' % (i, i)) for i in range(2, colCount)]))
            print a
            for eKey in eKeys:
                e = h2o.nodes[0].exec_query(str=('%s;%s=a' % (a, eKey)), print_params=False)
        xList = []
        eList = []
        fList = []
        for repeat in range(200):
            randICol = random.randint(0, (iColCount - 1))
            randOCol = random.randint(iColCount, ((iColCount + oColCount) - 1))
            e = random.sample(eKeys, 2)
            fKey = e[0]
            eKey = e[1]
            if (1 == 0):
                start = time.time()
                e = h2o.nodes[0].exec_query(str=('%s=%s[,%s]' % (fKey, hex_key, (randOCol + 1))))
                elapsed = (time.time() - start)
                print 'exec 1 took', elapsed, 'seconds.'
                execTime = elapsed
            if (1 == 1):
                start = time.time()
                h2o.nodes[0].exec_query(str=('%s=%s' % (fKey, random.choice(rowExprList))))
                elapsed = (time.time() - start)
                execTime = elapsed
                print 'exec 2 took', elapsed, 'seconds.'
            if (1 == 0):
                gKey = random.choice(eKeys)
                start = time.time()
                h2o.nodes[0].exec_query(str=('%s=%s' % (gKey, fKey)))
                elapsed = (time.time() - start)
                print 'exec 3 took', elapsed, 'seconds.'
            if (1 == 1):
                inspect = h2o_cmd.runInspect(key=fKey)
                h2o_cmd.infoFromInspect(inspect, fKey)
                numRows = inspect['numRows']
                numCols = inspect['numCols']
            if ((numRows == 0) or (numCols != colCount)):
                h2p.red_print('Warning: Cut resulted in', numRows, 'rows and', numCols, 'cols. Quantile will abort')
            quantile = (0.5 if DO_MEDIAN else 0.999)
            column = iColCount
            start = time.time()
            q = h2o.nodes[0].quantiles(source_key=fKey, column=column, quantile=quantile, max_qbins=MAX_QBINS, multiple_pass=MULTI_PASS)
            h2p.red_print('quantile', quantile, q['result'])
            elapsed = (time.time() - start)
            print 'quantile end on ', fKey, 'took', elapsed, 'seconds.'
            quantileTime = elapsed
            if (1 == 0):
                start = time.time()
                h2o.nodes[0].remove_all_keys()
                elapsed = (time.time() - start)
                print 'remove all keys end on ', csvFilename, 'took', elapsed, 'seconds.'
            trial += 1
            xList.append(trial)
            eList.append(execTime)
            fList.append(quantileTime)
    if DO_PLOT:
        xLabel = 'trial'
        eLabel = 'exec cut time'
        fLabel = 'quantile time'
        eListTitle = ''
        fListTitle = ''
        h2o_gbm.plotLists(xList, xLabel, eListTitle, eList, eLabel, fListTitle, fList, fLabel)
