def doGLM2(f, folderPath, family, lambda_, alpha, nfolds, y, x, testFilehex, row, case_mode, case_val):
    debug = False
    bench = 'bench'
    if debug:
        print 'DOING GLM2 DEBUG'
        bench = 'bench/debug'
    date = '-'.join([str(z) for z in list(time.localtime())][0:3])
    overallWallStart = time.time()
    pre = ''
    if debug:
        pre = 'DEBUG'
    glm2benchcsv = (((((('benchmarks/' + build) + '/') + date) + '/') + pre) + 'glm2bench.csv')
    if (not os.path.exists(glm2benchcsv)):
        output = open(glm2benchcsv, 'w')
        output.write((','.join(csv_header) + '\n'))
    else:
        output = open(glm2benchcsv, 'a')
    csvWrt = csv.DictWriter(output, fieldnames=csv_header, restval=None, dialect='excel', extrasaction='ignore', delimiter=',')
    try:
        java_heap_GB = h2o.nodes[0].java_heap_GB
        importFolderPath = ((bench + '/') + folderPath)
        if (f in ['AirlinesTrain1x', 'AllBedroomsTrain1x', 'AllBedroomsTrain10x', 'AllBedroomsTrain100x']):
            csvPathname = (((importFolderPath + '/') + f) + '.csv')
        else:
            csvPathname = (((importFolderPath + '/') + f) + '/*')
        hex_key = (f + '.hex')
        hK = (folderPath + 'Header.csv')
        headerPathname = ((importFolderPath + '/') + hK)
        h2i.import_only(bucket='home-0xdiag-datasets', path=headerPathname)
        headerKey = h2i.find_key(hK)
        trainParseWallStart = time.time()
        if (f in ['AirlinesTrain10x', 'AirlinesTrain100x']):
            h2o.beta_features = False
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, schema='local', hex_key=hex_key, header=1, header_from_file=headerKey, separator=44, timeoutSecs=7200, retryDelaySecs=5, pollTimeoutSecs=7200, noPoll=True, doSummary=False)
        h2o_jobs.pollWaitJobs(timeoutSecs=7200, pollTimeoutSecs=7200, retryDelaySecs=5)
        parseResult = {'destination_key': hex_key, }
        parseWallTime = (time.time() - trainParseWallStart)
        print 'Parsing training file took ', parseWallTime, ' seconds.'
        h2o.beta_features = True
        inspect_train = h2o.nodes[0].inspect(hex_key, timeoutSecs=7200)
        inspect_test = h2o.nodes[0].inspect(testFilehex, timeoutSecs=7200)
        nMachines = (1 if (len(h2o_hosts.hosts) is 0) else len(h2o_hosts.hosts))
        row.update({'h2o_build': build, 'nMachines': nMachines, 'Xmx/JVM': java_heap_GB, 'nJVMs': len(h2o.nodes), 'dataset': f, 'nTrainRows': inspect_train['numRows'], 'nTestRows': inspect_test['numRows'], 'nCols': inspect_train['numCols'], 'trainParseWallTime': parseWallTime, 'nfolds': nfolds, 'family': family, })
        params = {'vresponse': y, 'ignored_cols': x, 'family': family, 'lambda': lambda_, 'alpha': alpha, 'n_folds': nfolds, 'destination_key': (('GLM(' + f) + ')'), }
        h2o.beta_features = True
        kwargs = params.copy()
        glmStart = time.time()
        glm = h2o_cmd.runGLM(parseResult=parseResult, timeoutSecs=1800, noPoll=True, **kwargs)
        h2o_jobs.pollWaitJobs(timeoutSecs=7200, pollTimeoutSecs=7200, retryDelaySecs=5)
        glmTime = (time.time() - glmStart)
        row.update({'glm2BuildTime': glmTime, })
        glmView = h2o_cmd.runGLMView(modelKey=(('GLM(' + f) + ')'), timeoutSecs=380)
        row.update({'AIC': glmView['glm_model']['validation']['aic'], 'nIterations': glmView['glm_model']['iteration'], 'nPredictors': len(glmView['glm_model']['beta']), })
        if (family == 'binomial'):
            url = ('http://%s:%d/2/GLMModelView.html?_modelKey=%s' % (h2o.nodes[0].http_addr, 55555, (('GLM(' + f) + ')')))
            r = requests.get(url).text
            p1 = re.compile('threshold[:<>/a-z]*[0-9]\\.[0-9]*')
            p2 = re.compile('[0-9]\\.[0-9]*')
            best = int((float(p2.search(p1.search(r).group()).group()) * 100))
            best_cm = glmView['glm_model']['validation']['_cms'][best]['_arr']
            avg_err = ((1.0 * ((best_cm[0][1] + best_cm[1][0]) + 0.0)) / sum([i for sublist in best_cm for i in sublist]))
            row.update({'AUC': glmView['glm_model']['validation']['auc'], 'AverageError': avg_err, })
        else:
            row.update({'AUC': 'NA', 'AverageError': glmView['glm_model']['validation']['avg_err'], })
        csvWrt.writerow(row)
    finally:
        output.close()
