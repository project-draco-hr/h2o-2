def doGLM2(fs, folderPath, family, lambda_, alpha, nfolds, y, x, testFilehex, row, case_mode, case_val):
    bench = 'bench'
    if debug:
        print 'DOING GLM2 DEBUG'
        bench = 'bench/debug'
    date = '-'.join([str(z) for z in list(time.localtime())][0:3])
    for f in fs['train']:
        overallWallStart = time.time()
        pre = ''
        if debug:
            pre = 'DEBUG'
        glm2benchcsv = (((((('benchmarks/' + build) + '/') + date) + '/') + pre) + 'glm2bench.csv')
        if (not os.path.exists(glm2benchcsv)):
            output = open(glm2benchcsv, 'w')
            output.write((','.join(csv_header) + '\n'))
        else:
            output = open(glm2benchcsv, 'a')
        csvWrt = csv.DictWriter(output, fieldnames=csv_header, restval=None, dialect='excel', extrasaction='ignore', delimiter=',')
        try:
            java_heap_GB = h2o.nodes[0].java_heap_GB
            importFolderPath = ((bench + '/') + folderPath)
            if (f in ['AirlinesTrain1x', 'AllBedroomsTrain1x', 'AllBedroomsTrain10x', 'AllBedroomsTrain100x']):
                csvPathname = (((importFolderPath + '/') + f) + '.csv')
            else:
                print 'Not doing Airlines10x and 100x for Parse2, regex seems to be broken...'
                continue
            hex_key = (f + '.hex')
            hK = (folderPath + 'Header.csv')
            headerPathname = ((importFolderPath + '/') + hK)
            h2i.import_only(bucket='home-0xdiag-datasets', path=headerPathname)
            headerKey = h2i.find_key(hK)
            trainParseWallStart = time.time()
            h2o.beta_features = True
            parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, schema='local', hex_key=hex_key, header=1, header_from_file=headerKey, separator=44, timeoutSecs=7200, retryDelaySecs=5, pollTimeoutSecs=7200, noPoll=True, doSummary=False)
            h2o_jobs.pollWaitJobs(timeoutSecs=7200, pollTimeoutSecs=7200, retryDelaySecs=5)
            parseResult = {'destination_key': hex_key, }
            parseWallTime = (time.time() - trainParseWallStart)
            print 'Parsing training file took ', parseWallTime, ' seconds.'
            inspect_train = h2o.nodes[0].inspect(hex_key)
            inspect_test = h2o.nodes[0].inspect(testFilehex)
            row.update({'h2o_build': build, 'java_heap_GB': java_heap_GB, 'dataset': f, 'nTrainRows': inspect_train['numRows'], 'nTestRows': inspect_test['numRows'], 'nCols': inspect_train['numCols'], 'trainParseWallTime': parseWallTime, 'nfolds': nfolds, })
            params = {'vresponse': y, 'ignored_cols': x, 'family': family, 'lambda': lambda_, 'alpha': alpha, 'n_folds': nfolds, 'destination_key': (('GLM(' + f) + ')'), }
            h2o.beta_features = True
            kwargs = params.copy()
            glmStart = time.time()
            glm = h2o_cmd.runGLM(parseResult=parseResult, noPoll=True, **kwargs)
            h2o_jobs.pollWaitJobs(timeoutSecs=7200, pollTimeoutSecs=7200, retryDelaySecs=5)
            glmTime = (time.time() - glmStart)
            row.update({'glmBuildTime': glmTime, })
            glmView = h2o_cmd.runGLMView(modelKey=(('GLM(' + f) + ')'), timeoutSecs=380)
            pprint(glmView)
            csvWrt.writerow(row)
        finally:
            output.close()
