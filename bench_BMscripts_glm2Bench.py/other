import os, sys, time, csv, re, requests
sys.path.append('../py/')
sys.path.extend(['.', '..'])
import h2o_cmd, h2o, h2o_hosts, h2o_browse as h2b, h2o_import as h2i, h2o_rf, h2o_jobs
from pprint import pprint
csv_header = ('h2o_build', 'nMachines', 'nJVMs', 'Xmx/JVM', 'dataset', 'nTrainRows', 'nTestRows', 'nCols', 'nPredictors', 'trainParseWallTime', 'nfolds', 'family', 'glm2BuildTime', 'testParseWallTime', 'nIterations', 'AUC', 'AIC', 'AverageError')
files = {'Airlines': {'train': ('AirlinesTrain1x', 'AirlinesTrain10x', 'AirlinesTrain100x'), 'test': 'AirlinesTest', }, 'AllBedrooms': {'train': ('AllBedroomsTrain1x', 'AllBedroomsTrain10x', 'AllBedroomsTrain100x'), 'test': 'AllBedroomsTest', }, }
build = ''
debug = False
if (__name__ == '__main__'):
    dat = sys.argv.pop((-1))
    debug = sys.argv.pop((-1))
    build = sys.argv.pop((-1))
    h2o.parse_our_args()
    h2o_hosts.build_cloud_with_hosts()
    fp = ('Airlines' if ('Air' in dat) else 'AllBedrooms')
    h2o.beta_features = True
    if (dat == 'Air1x'):
        fs = files['Airlines']['train'][0]
    if (dat == 'Air10x'):
        fs = files['Airlines']['train'][1]
    if (dat == 'Air100x'):
        fs = files['Airlines']['train'][2]
    if (dat == 'AllB1x'):
        fs = files['AllBedrooms']['train'][0]
    if (dat == 'AllB10x'):
        fs = files['AllBedrooms']['train'][1]
    if (dat == 'AllB100x'):
        fs = files['AllBedrooms']['train'][2]
    debug = False
    bench = 'bench'
    if debug:
        bench = 'bench/debug'
    if (fp == 'Airlines'):
        airlinesTestParseStart = time.time()
        hK = 'AirlinesHeader.csv'
        headerPathname = (((bench + '/Airlines') + '/') + hK)
        h2i.import_only(bucket='home-0xdiag-datasets', path=headerPathname)
        headerKey = h2i.find_key(hK)
        testFile = h2i.import_parse(bucket='home-0xdiag-datasets', path=(bench + '/Airlines/AirlinesTest.csv'), schema='local', hex_key='atest.hex', header=1, header_from_file=headerKey, separator=44, noPoll=True, doSummary=False)
        h2o_jobs.pollWaitJobs(timeoutSecs=7200, pollTimeoutSecs=7200, retryDelaySecs=5)
        elapsedAirlinesTestParse = (time.time() - airlinesTestParseStart)
        row = {'testParseWallTime': elapsedAirlinesTestParse, }
        x = None
        doGLM2(fs, fp, family='binomial', lambda_=1e-05, alpha=0.5, nfolds=10, y='IsDepDelayed', x=x, testFilehex='atest.hex', row=row, case_mode='%3D', case_val=1.0)
    if (fp == 'AllBedrooms'):
        allBedroomsTestParseStart = time.time()
        hK = 'AllBedroomsHeader.csv'
        headerPathname = (((bench + '/AllBedrooms') + '/') + hK)
        h2i.import_only(bucket='home-0xdiag-datasets', path=headerPathname)
        headerKey = h2i.find_key(hK)
        testFile = h2i.import_parse(bucket='home-0xdiag-datasets', path=(bench + '/AllBedrooms/AllBedroomsTest.csv'), schema='local', hex_key='allBtest.hex', header=1, header_from_file=headerKey, separator=44, noPoll=True, doSummary=False)
        h2o_jobs.pollWaitJobs(timeoutSecs=7200, pollTimeoutSecs=7200, retryDelaySecs=5)
        elapsedAllBedroomsTestParse = (time.time() - allBedroomsTestParseStart)
        row = {'testParseWallTime': elapsedAllBedroomsTestParse, }
        x = 'county,place,Rent_Type,mcd'
        doGLM2(fs, fp, family='gaussian', lambda_=0.0001, alpha=0.75, nfolds=10, y='medrent', x=x, testFilehex='allBtest.hex', row=row, case_mode='n/a', case_val=0.0)
    h2o.tear_down_cloud()
