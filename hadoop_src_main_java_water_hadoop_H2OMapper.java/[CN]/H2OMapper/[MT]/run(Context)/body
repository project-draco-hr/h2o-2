{
  Log.POST(0,"Entered run");
  Configuration conf=context.getConfiguration();
  String mapredTaskId=conf.get("mapred.task.id");
  Text textId=new Text(mapredTaskId);
  emitLogHeader(context,mapredTaskId);
  Log.POST(10,"After emitLogHeader");
  Counter counter=context.getCounter(H2O_MAPPER_COUNTER.HADOOP_COUNTER_HEARTBEAT);
  Thread counterThread=new CounterThread(context,counter);
  counterThread.start();
  String ice_root=conf.get("mapred.local.dir");
  String jobtrackerName=conf.get("hexdata.jobtrackername");
  context.write(textId,new Text("mapred.local.dir is " + ice_root));
  String[] args={"-ice_root",ice_root,"-flatfile","flatfile.txt","-port","54321","-inherit_log4j","-name",jobtrackerName};
  context.write(textId,new Text("before water.Boot.main()"));
  try {
    Log.POST(11,"Before boot");
    water.Boot.main(UserMain.class,args);
    Log.POST(12,"After boot");
  }
 catch (  Exception e) {
    Log.POST(13,"Exception in boot");
    context.write(textId,new Text("exception in water.Boot.main()"));
    String s=e.getMessage();
    if (s == null) {
      s="(null exception message)";
    }
    context.write(textId,new Text(s));
    s=e.toString();
    if (s == null) {
      s="(null exception toString)";
    }
    context.write(textId,new Text(s));
    StackTraceElement[] els=e.getStackTrace();
    for (int i=0; i < els.length; i++) {
      StackTraceElement el=els[i];
      s=el.toString();
      context.write(textId,new Text("    " + s));
    }
  }
 finally {
    Log.POST(14,"Top of finally");
    context.write(textId,new Text("after water.Boot.main()"));
  }
  Log.POST(15,"Entering wait loop");
  while (true) {
    int ONE_MINUTE_MILLIS=60 * 1000;
    Thread.sleep(ONE_MINUTE_MILLIS);
    break;
  }
  Log.POST(1000,"Leaving run");
  System.exit(0);
}
