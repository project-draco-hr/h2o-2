import sys
sys.path.extend(['.', '..', 'py'])
import h2o_print as h2p, h2o_summ
import numpy as np
import scipy as sp
import math
import argparse
OTHER_T = 0.999
BIN_COUNT = 20
BIN_COUNT = 50
BIN_COUNT = 100000
INTERPOLATION_TYPE = 7
print 'Using max_qbins: ', BIN_COUNT, 'threshold:', OTHER_T
parser = argparse.ArgumentParser()
parser.add_argument('-nc', '--nocolor', help="don't emit the chars that cause color printing", action='store_true')
args = parser.parse_args()
if args.nocolor:
    h2p.disable_colors()
csvPathname = './syn_binary_100x1.csv'
csvPathname = './syn_binary_100000x1.csv'
csvPathname = './d.csv'
csvPathname = './runif_.csv'
csvPathname = './covtype1.data'
csvPathname = './runif_.csv'
csvPathname = '/home/0xdiag/datasets/kmeans_big/syn_sphere_gen.csv'
csvPathname = './syn_binary_100000x1.csv'
col = 0
print 'Reading csvPathname'
dataset = np.genfromtxt(open(csvPathname, 'r'), delimiter=',', dtype=None)
print dataset.shape
print dataset.shape
col = 0
if (len(dataset.shape) == 1):
    target = dataset
else:
    target = [x[col] for x in dataset]
targetFP = np.array(target, np.float)
n_features = (len(dataset) - 1)
print 'n_features:', n_features
print 'histogram of target'
print sp.histogram(target)
thresholds = [0.001, 0.01, 0.1, 0.25, 0.33, 0.5, 0.66, 0.75, 0.9, 0.99, 0.999]
d = target
dmin = min(d)
dmax = max(d)
thresholdList = [OTHER_T]
quantiles = findQuantileList(d, dmin, dmax, thresholdList)
h2p.red_print('\nthis b result:', quantiles)
alphap = 0
betap = 0
alphap = 0.5
betap = 0.5
alphap = (1 / 3.0)
betap = (1 / 3.0)
alphap = 0.4
betap = 0.4
alphap = 1
betap = 1
from scipy import stats
a1 = stats.scoreatpercentile(target, per=(100 * OTHER_T), interpolation_method='fraction')
h2p.red_print('stats.scoreatpercentile:', a1)
a2 = stats.mstats.mquantiles(targetFP, prob=[OTHER_T], alphap=alphap, betap=betap)
h2p.red_print('scipy stats.mstats.mquantiles:', a2)
targetFP.sort()
b = h2o_summ.percentileOnSortedList(targetFP, OTHER_T, interpolate='linear')
h2p.red_print('sort algo:', b)
h2p.red_print('from h2o (multi):', quantiles[0])
print 'Now looking at the sorted list..same thing'
h2p.blue_print('stats.scoreatpercentile:', a1)
a2 = stats.mstats.mquantiles(targetFP, prob=[OTHER_T], alphap=alphap, betap=betap)
h2p.blue_print('scipy stats.mstats.mquantiles:', a2)
b = h2o_summ.percentileOnSortedList(targetFP, OTHER_T, interpolate='linear')
h2p.blue_print('sort algo:', b)
h2p.blue_print('from h2o (multi):', quantiles[0])
