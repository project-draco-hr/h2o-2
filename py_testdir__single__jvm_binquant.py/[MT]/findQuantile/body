def findQuantile(d, dmin, dmax, threshold):
    maxIterations = 30
    totalRows = len(d)
    desiredBinCnt = BIN_COUNT
    maxBinCnt = (desiredBinCnt + 1)
    newValStart = dmin
    newValEnd = dmax
    newValRange = (newValEnd - newValStart)
    desiredBinCnt = BIN_COUNT
    newValBinSize = (newValRange / (desiredBinCnt + 0.0))
    newLowCount = 0
    assert (maxBinCnt > 0)
    hcnt2 = [None for b in range(maxBinCnt)]
    hcnt2_min = [None for b in range(maxBinCnt)]
    hcnt2_max = [None for b in range(maxBinCnt)]
    hcnt2_low = 0
    hcnt2_high = 0
    assert (newValBinSize != 0)
    assert (newValEnd > newValStart)
    assert (newValRange > 0)
    iteration = 0
    done = False
    best_result = []

    def htot2():
        return ((sum(hcnt2) + hcnt2_low) + hcnt2_high)
    while ((iteration <= maxIterations) and (not done)):
        h2p.green_print('newValStart', newValStart)
        h2p.green_print('newValEnd', newValEnd)
        h2p.green_print('newValRange', newValRange)
        h2p.green_print('newValBinSize', newValBinSize)
        h2p.green_print('newLowCount', newLowCount)
        h2p.green_print('threshold', threshold)
        valStart = newValStart
        valEnd = newValEnd
        valRange = newValRange
        valBinSize = newValBinSize
        lowCount = newLowCount
        desiredBinCnt = BIN_COUNT
        maxBinCnt = (desiredBinCnt + 1)
        NUDGE = 0
        for b in range(maxBinCnt):
            hcnt2[b] = 0.0
        hcnt2_low = 0
        hcnt2_high = 0
        hcnt2_high_min = None
        for val in d:
            valOffset = (val - valStart)
            binIdx2 = int(math.floor((valOffset / (valBinSize + 0.0))))
            if ((valOffset < 0) or (binIdx2 < 0)):
                hcnt2_low += 1
            elif ((val > valEnd) or (binIdx2 >= (maxBinCnt - 1))):
                if ((hcnt2_high == 0) or (val < hcnt2_high_min)):
                    hcnt2_high_min = val
                    print 'hcnt2_high_min update:', hcnt2_high_min, valOffset, val, valStart, hcnt2_high, val, valEnd
                hcnt2_high += 1
            else:
                assert ((binIdx2 >= 0) and (binIdx2 <= (maxBinCnt - 1))), ('val %s %s %s %s binIdx2: %s maxBinCnt: %s valBinSize: %s' % (val, valStart, valEnd, valOffset, binIdx2, maxBinCnt, valBinSize))
                if ((hcnt2[binIdx2] == 0) or (val < hcnt2_min[binIdx2])):
                    hcnt2_min[binIdx2] = val
                if ((hcnt2[binIdx2] == 0) or (val > hcnt2_max[binIdx2])):
                    hcnt2_max[binIdx2] = val
                hcnt2[binIdx2] += 1
                if (binIdx2 == (maxBinCnt - 1)):
                    print '\nFP! val went into the extra maxBinCnt bin:', binIdx2, hcnt2_high_min, valOffset, val, valStart, hcnt2_high, val, valEnd, '\n'
            assert ((hcnt2_high == 0) or (hcnt2_high_min is not None))
            assert ((hcnt2_high_min is None) or (hcnt2_high != 0))
        totalBinnedRows = htot2()
        print ('totalRows check: %s htot2(): %s should be equal. hcnt2_low: %s hcnt2_high: %s' % (totalRows, totalBinnedRows, hcnt2_low, hcnt2_high))
        assert (totalRows == totalBinnedRows), ('totalRows: %s htot2() %s not equal. hcnt2_low: %s hcnt2_high: %s' % (totalRows, totalBinnedRows, hcnt2_low, hcnt2_high))
        currentCnt = hcnt2_low
        targetCntFull = (threshold * (totalRows - 1))
        targetCntInt = int(math.floor((threshold * (totalRows - 1))))
        targetCntFract = (targetCntFull - targetCntInt)
        assert ((targetCntFract >= 0) and (targetCntFract <= 1))
        print 'targetCntInt:', targetCntInt, 'targetCntFract', targetCntFract
        k = 0
        while ((currentCnt + hcnt2[k]) <= targetCntInt):
            currentCnt += hcnt2[k]
            k += 1
            if (k == maxBinCnt):
                break
            assert (k < maxBinCnt), ('k too large, k: %s maxBinCnt %s %s %s %s' % (k, maxBinCnt, currentCnt, targetCntInt, hcnt2[(k - 1)]))
        print 'Found k (multi): ', k, ' ', currentCnt, ' ', targetCntInt, ' ', totalRows, ' ', hcnt2[k], ' ', hcnt2_min[k], ' ', hcnt2_max[k]
        assert ((hcnt2[k] != 1) or (hcnt2_min[k] == hcnt2_max[k]))
        done = False
        guess = ((hcnt2_max[k] - hcnt2_min[k]) / 2)
        if (currentCnt == targetCntInt):
            if ((hcnt2[k] > 2) and (hcnt2_min[k] == hcnt2_max[k])):
                guess = hcnt2_min[k]
                print 'Guess A', guess, k, hcnt2[k]
            if (hcnt2[k] == 2):
                print "\nTwo values in this bin but we could be aligned to the 2nd. so can't stop"
                guess = ((hcnt2_max[k] + hcnt2_min[k]) / 2.0)
                if (INTERPOLATION_TYPE == 2):
                    guess = ((hcnt2_max[k] + hcnt2_min[k]) / 2.0)
                else:
                    dDiff = (hcnt2_max[k] - hcnt2_min[k])
                    pctDiff = targetCntFract
                    guess = (hcnt2_min[k] + (pctDiff * dDiff))
                done = False
                print 'Guess B', guess
            if ((hcnt2[k] == 1) and (targetCntFract == 0)):
                assert (hcnt2_min[k] == hcnt2_max[k])
                guess = hcnt2_min[k]
                done = True
                print 'k', k
                print 'Guess C', guess
            if ((hcnt2[k] == 1) and (targetCntFract != 0)):
                assert (hcnt2_min[k] == hcnt2_max[k])
                print '\nSingle value in this bin, but fractional means we need to interpolate to next non-zero'
                if (k < maxBinCnt):
                    nextK = (k + 1)
                else:
                    nextK = k
                while ((nextK < maxBinCnt) and (hcnt2[nextK] == 0)):
                    nextK += 1
                if (nextK >= maxBinCnt):
                    assert (hcnt2_high != 0)
                    print 'Using hcnt2_high_min for interpolate:', hcnt2_high_min
                    nextVal = hcnt2_high_min
                else:
                    print 'Using nextK for interpolate:', nextK
                    assert (hcnt2[nextK] != 0)
                    nextVal = hcnt2_min[nextK]
                guess = ((hcnt2_max[k] + nextVal) / 2.0)
                if (INTERPOLATION_TYPE == 2):
                    guess = ((hcnt2_max[k] + nextVal) / 2.0)
                    pctDiff = 0.5
                else:
                    dDiff = (nextVal - hcnt2_max[k])
                    pctDiff = targetCntFract
                    guess = (hcnt2_max[k] + (pctDiff * dDiff))
                done = True
                print 'k', 'hcnt2_max[k]', 'nextVal'
                print 'hello3:', k, hcnt2_max[k], nextVal
                print ('\nInterpolating result using nextK: %s nextVal: %s' % (nextK, nextVal))
                print 'Guess D', guess
        if (not done):
            print 'Not done, setting new range', 'k: ', k, 'currentCnt: ', currentCnt, 'hcnt2_min[k]: ', hcnt2_min[k], 'hcnt2_max[k]: ', hcnt2_max[k]
            if ((k > 0) and (hcnt2[(k - 1)] > 0) and (hcnt2_max[(k - 1)] < hcnt2_min[k])):
                newValStart = hcnt2_max[(k - 1)]
            else:
                newValStart = hcnt2_min[k]
            if ((k < maxBinCnt) and (hcnt2[(k + 1)] > 0) and (hcnt2_min[(k + 1)] > hcnt2_max[k])):
                print 'hello'
                newValEnd = hcnt2_min[(k + 1)]
            else:
                newValEnd = hcnt2_max[k]
            newValRange = (newValEnd - newValStart)
            newValBinSize = (newValRange / (desiredBinCnt + 0.0))
            if (NUDGE == 0.0):
                assert ((desiredBinCnt > 1) or ((valStart == newValStart) and (valEnd == newValEnd))), ('if 1 bin, should be no per-pass edge leakage %s %s %s %s %s %s' % (k, hcnt2_high, valStart, newValStart, valEnd, newValEnd))
            newLowCount = currentCnt
            if (newValBinSize == 0):
                print 'Assuming done because newValBinSize is 0.'
                print ('newValRange: %s, hcnt2[k]: %s hcnt2_min[k]: %s hcnt2_max[k]: %s' % (newValRange, hcnt2[k], hcnt2_min[k], hcnt2_max[k]))
                guess = newValStart
                print 'Guess E', guess
                done = True
        best_result.append(guess)
        iteration += 1
        h2p.blue_print('Ending Pass', iteration)
        h2p.blue_print('best_result:', best_result, 'done:', done, 'hcnt2[k]', hcnt2[k])
        print 'currentCnt', currentCnt, 'targetCntInt', targetCntInt, 'hcnt2_low', hcnt2_low, 'hcnt2_high', hcnt2_high
        print 'was', valStart, valEnd, valRange, valBinSize
        print 'next', newValStart, newValEnd, newValRange, newValBinSize
    return best_result[(-1)]
