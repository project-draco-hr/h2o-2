{
  UKV.remove(dest);
  final ChunkProgressJob job=new ChunkProgressJob(ary.chunks());
  job.destination_key=dest;
  final H2OCountedCompleter fjtask=new H2OCountedCompleter(){
    @Override public void compute2(){
      KMeansApply kms=new KMeansApply();
      kms._job=job;
      kms._arykey=ary._key;
      kms._cols=model.columnMapping(ary.colNames());
      kms._clusters=model._clusters;
      kms._normalized=model._normalized;
      kms.invoke(ary._key);
      Column c=new Column();
      c._name=Constants.RESPONSE;
      c._size=ROW_SIZE;
      c._scale=1;
      c._min=0;
      c._max=model._clusters.length;
      c._mean=Double.NaN;
      c._sigma=Double.NaN;
      c._domain=null;
      c._n=ary.numRows();
      ValueArray res=new ValueArray(dest,ary.numRows(),c._size,new Column[]{c});
      DKV.put(dest,res);
      DKV.write_barrier();
      job.remove();
      tryComplete();
    }
    @Override public boolean onExceptionalCompletion(    Throwable ex,    CountedCompleter caller){
      job.onException(ex);
      return super.onExceptionalCompletion(ex,caller);
    }
  }
;
  job.start(fjtask);
  H2O.submitTask(fjtask);
  return job;
}
