{
  ScoreBuildHistogram sbh=new ScoreBuildHistogram(ktrees,leafs,hcs).doAll(fr);
  boolean did_split=false;
  for (int k=0; k < _nclass; k++) {
    DTree tree=ktrees[k];
    if (tree == null)     continue;
    int tmax=tree.len();
    for (int leaf=leafs[k]; leaf < tmax; leaf++) {
      UndecidedNode udn=tree.undecided(leaf);
      DecidedNode dn=makeDecided(udn,hcs[k][leaf - leafs[k]]);
      if (dn._split.col() == -1)       udn.do_not_split();
 else       did_split=true;
    }
    leafs[k]=tmax;
    int new_leafs=tree.len() - tmax;
    hcs[k]=new DSharedHistogram[new_leafs][];
    for (int nl=tmax; nl < tree.len(); nl++)     hcs[k][nl - tmax]=tree.undecided(nl)._hs;
    tree.depth++;
  }
  return did_split;
}
