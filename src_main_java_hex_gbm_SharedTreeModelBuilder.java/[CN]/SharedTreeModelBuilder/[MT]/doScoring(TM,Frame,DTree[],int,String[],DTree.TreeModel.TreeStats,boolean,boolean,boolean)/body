{
  long now=System.currentTimeMillis();
  if (_firstScore == 0)   _firstScore=now;
  long sinceLastScore=now - _timeLastScoreStart;
  Score sc=null;
  model=makeModel(model,ktrees,tstats);
  model.update(self());
  if (score_each_iteration || finalScoring || (now - _firstScore < 4000)|| (sinceLastScore > 4000 && (double)(_timeLastScoreEnd - _timeLastScoreStart) / sinceLastScore < 0.1)) {
    _timeLastScoreStart=now;
    Frame validationFrame=_validAdapted ? _adaptedValidation : validation;
    sc=new Score().doIt(model,fr,validationFrame,_adaptedValidationResponse,_modelMap,cmDomain,oob,build_tree_per_node).report(logTag(),tid,ktrees);
    _timeLastScoreEnd=System.currentTimeMillis();
  }
  model=makeModel(model,sc == null ? Double.NaN : sc.mse(),sc == null ? null : (_nclass > 1 ? new ConfusionMatrix(sc._cm) : null));
  model.update(self());
  return model;
}
