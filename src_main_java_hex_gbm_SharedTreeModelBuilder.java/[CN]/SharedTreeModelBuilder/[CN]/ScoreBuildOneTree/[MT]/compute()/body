{
  final int k=_treenum;
  final Chunk chks[]=_chks;
  final DTree tree=_trees[k];
  final int leaf=_leafs[k];
  final DSharedHistogram hcs[][]=_hcs[k];
  final Chunk nids=chk_nids(chks,k);
  final Chunk wrks=chk_work(chks,k);
  for (int row=0; row < nids._len; row++) {
    int nid=(int)nids.at80(row);
    if (isDecidedRow(nid))     continue;
    if (isOOBRow(nid)) {
      if (leaf > 0) {
        int nnid=oob2Nid(nid);
        DTree.DecidedNode dn=tree.decided(nnid);
        if (dn._split._col == -1)         nids.set0(row,nid2Oob(nnid=dn._pid));
        if (nnid != -1)         nnid=tree.decided(nnid).ns(chks,row);
        if (nnid != -1)         nids.set0(row,nid2Oob(nnid));
      }
      continue;
    }
    if (leaf > 0) {
      DTree.DecidedNode dn=tree.decided(nid);
      if (dn._split._col == -1)       nids.set0(row,(nid=dn._pid));
      if (nid != -1)       nid=tree.decided(nid).ns(chks,row);
      if (nid != -1)       nids.set0(row,nid);
    }
    if (nid < leaf)     continue;
    double y=wrks.at0(row);
    if (Double.isNaN(y))     continue;
    DSharedHistogram nhs[]=hcs[nid - leaf];
    int sCols[]=tree.undecided(nid)._scoreCols;
    if (sCols != null) {
      for (int j=0; j < sCols.length; j++) {
        final int c=sCols[j];
        nhs[c].incr((float)chks[c].at0(row),y);
      }
    }
 else {
      for (int j=0; j < _ncols; j++)       if (nhs[j] != null)       nhs[j].incr((float)chks[j].at0(row),y);
    }
  }
}
