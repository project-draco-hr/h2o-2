{
  long seed=0xDECAF;
  Key file_train=NFSFileVec.make(find_test_file(PATH));
  Frame train=ParseDataset2.parse(Key.make(),new Key[]{file_train});
  Key file_test=NFSFileVec.make(find_test_file(PATH2));
  Frame test=ParseDataset2.parse(Key.make(),new Key[]{file_test});
  DeepLearning p=new DeepLearning();
  p.source=train;
  p.autoencoder=true;
  p.response=train.vecs()[0];
  p.classification=false;
  p.seed=seed;
  p.hidden=new int[]{20};
  p.adaptive_rate=true;
  p.l1=1e-4;
  p.activation=DeepLearning.Activation.Tanh;
  p.loss=DeepLearning.Loss.MeanSquare;
  p.epochs=100;
  p.force_load_balance=true;
  p.invoke();
  DeepLearningModel mymodel=UKV.get(p.dest());
  StringBuilder sb=new StringBuilder();
  sb.append("Verifying results.");
  double quantile=0.95;
  final Frame l2_frame_train=mymodel.scoreAutoEncoder(train);
  final Vec l2_train=l2_frame_train.anyVec();
  sb.append("Mean reconstruction error: " + l2_train.mean() + "\n");
  Assert.assertEquals(mymodel.mse(),l2_train.mean(),1e-7);
  Frame reconstr=mymodel.score(train);
  double mean_l2=0;
  for (int r=0; r < reconstr.numRows(); ++r) {
    double my_l2=0;
    for (int c=0; c < reconstr.numCols(); ++c) {
      my_l2+=Math.pow((reconstr.vec(c).at(r) - train.vec(c).at(r)) * mymodel.model_info().data_info()._normMul[c],2);
    }
    my_l2/=reconstr.numCols();
    mean_l2+=my_l2;
  }
  mean_l2/=reconstr.numRows();
  reconstr.delete();
  sb.append("Mean reconstruction error (train): " + l2_train.mean() + "\n");
  Assert.assertEquals(mymodel.mse(),mean_l2,1e-7);
  sb.append("The following training points are reconstructed with an error above the " + quantile * 100 + "-th percentile - check for \"goodness\" of training data.\n");
  double thresh_train=mymodel.calcOutlierThreshold(l2_train,quantile);
  for (long i=0; i < l2_train.length(); i++) {
    if (l2_train.at(i) > thresh_train) {
      sb.append(String.format("row %d : l2_train error = %5f\n",i,l2_train.at(i)));
    }
  }
  final Frame l2_frame_test=mymodel.scoreAutoEncoder(test);
  final Vec l2_test=l2_frame_test.anyVec();
  double mult=10;
  double thresh_test=mult * thresh_train;
  sb.append("\nFinding outliers.\n");
  sb.append("Mean reconstruction error (test): " + l2_test.mean() + "\n");
  sb.append("The following test points are reconstructed with an error greater than " + mult + " times the mean reconstruction error of the training data:\n");
  HashSet<Long> outliers=new HashSet<Long>();
  for (long i=0; i < l2_test.length(); i++) {
    if (l2_test.at(i) > thresh_test) {
      outliers.add(i);
      sb.append(String.format("row %d : l2 error = %5f\n",i,l2_test.at(i)));
    }
  }
  Log.info(sb);
  Assert.assertTrue(outliers.contains(new Long(20)));
  Assert.assertTrue(outliers.contains(new Long(21)));
  Assert.assertTrue(outliers.contains(new Long(22)));
  Assert.assertTrue(outliers.size() == 3);
  p.delete();
  mymodel.delete();
  train.delete();
  l2_frame_train.delete();
  test.delete();
  l2_frame_test.delete();
}
