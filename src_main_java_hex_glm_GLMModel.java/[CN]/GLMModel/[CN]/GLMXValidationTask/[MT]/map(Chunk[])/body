{
  _xvals=new GLMValidation[_xmodels.length];
  for (int i=0; i < _xmodels.length; ++i)   _xvals[i]=new GLMValidation(null,_xmodels[i].ymu,_xmodels[i].glm,_xmodels[i].rank());
  final int nrows=chunks[0]._len;
  double[] row=MemoryManager.malloc8d(_model._names.length);
  float[] preds=MemoryManager.malloc4f(_model.glm.family == Family.binomial ? 2 : 1);
  OUTER:   for (int i=0; i < nrows; ++i) {
    if (chunks[chunks.length - 1].isNA0(i))     continue;
    for (int j=0; j < chunks.length - 1; ++j) {
      if (chunks[j].isNA0(i))       continue OUTER;
      row[j]=chunks[j].at0(i);
    }
    final int mid=i % _xmodels.length;
    final GLMModel model=_xmodels[mid];
    final GLMValidation val=_xvals[mid];
    model.score0(row,preds);
    double response=chunks[chunks.length - 1].at80(i);
    if (model._caseMode != CaseMode.none)     response=model._caseMode.isCase(response,model._caseVal) ? 1 : 0;
    val.add(response,model.glm.family == Family.binomial ? preds[1] : preds[0]);
  }
  for (  GLMValidation val : _xvals)   if (val.nobs > 0)   val.avg_err=val.avg_err / val.nobs;
}
