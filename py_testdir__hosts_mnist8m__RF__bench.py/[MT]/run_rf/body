def run_rf(files, configs, s3n):
    overallWallStart = time.time()
    importFolderPath = '/home/0xdiag/datasets/mnist'
    importFolderResult = h2i.setupImportFolder(None, importFolderPath)
    output = None
    if (not os.path.exists('rfbench.csv')):
        output = open('rfbench.csv', 'w')
        output.write((','.join(csv_header) + '\n'))
    else:
        output = open('rfbench.csv', 'a')
    csvWrt = csv.DictWriter(output, fieldnames=csv_header, restval=None, dialect='excel', extrasaction='ignore', delimiter=',')
    csvWrt.writeheader()
    try:
        java_heap_GB = h2o.nodes[0].java_heap_GB
        trainParseWallStart = time.time()
        print 'Training file is: ', files['train']
        csvPathname = files['train']
        destKey = (files['train'] + '.hex')
        parseKey = h2i.parseImportFolderFile(None, csvPathname, importFolderPath, key2=destKey, timeoutSecs=300, retryDelaySecs=5, pollTimeoutSecs=120)
        trainParseWallTime = (time.time() - trainParseWallStart)
        inspect = h2o.nodes[0].inspect(parseKey['destination_key'])
        row = {'java_heap_GB': java_heap_GB, 'dataset': 'mnist8m', 'nRows': inspect['num_rows'], 'nCols': inspect['num_cols'], 'trainParseWallTime': trainParseWallTime, }
        kwargs = configs.copy()
        trainRFStart = time.time()
        rfView = h2o_cmd.runRFOnly(parseKey=parseKey, rfView=True, timeoutSecs=3600, pollTimeoutSecs=60, retryDelaySecs=2, **kwargs)
        trainViewTime = (time.time() - trainRFStart)
        row.update({'trainViewTime': trainViewTime, })
        h2o_rf.simpleCheckRFView(None, rfView, **kwargs)
        modelKey = rfView['model_key']
        testParseWallStart = time.time()
        print 'Testing file is: ', file['test']
        csvPathname = files['test']
        destKey = (files['test'] + '.hex')
        parseKey = h2i.parseImportFolderFile(None, csvPathname, importFolderPath, key2=destKey, timeoutSecs=300, retryDelaySecs=5, pollTimeoutSecs=120)
        testParseWallTime = (time.time() - testParseWallStart)
        row.update({'testParseWallTime': testParseWallTime, })
        modelKey = rfView['model_key']
        kwargs = configs.copy()
        testRFStart = time.time()
        rfView = h2o_cmd.runRFView(data_key=destKey, model_key=modelKey, ntree=10, timeoutSecs=180, doSimpleCheck=False, **kwargs)
        testViewTime = (time.time() - testRFStart)
        errRate = rfView['classification_error']
        row.update({'testViewTime': testViewTime, })
        overallWallTime = (time.time() - overallWallStart)
        row.update({'overallWallTime': overallWallTime, })
        row.uodate({'errRate': errRate, })
    finally:
        output.close()
