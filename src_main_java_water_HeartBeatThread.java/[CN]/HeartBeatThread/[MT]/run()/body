{
  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
  ObjectName os;
  try {
    os=new ObjectName("java.lang:type=OperatingSystem");
  }
 catch (  MalformedObjectNameException ex) {
    throw new RuntimeException(ex);
  }
  Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
  while (true) {
    try {
      Thread.sleep(SLEEP);
    }
 catch (    InterruptedException e) {
    }
    H2O cloud=H2O.CLOUD;
    HeartBeat hb=H2O.SELF._heartbeat;
    hb._hb_version=HB_VERSION++;
    hb._jvm_boot_msec=TimeLine.JVM_BOOT_MSEC;
    final Runtime run=Runtime.getRuntime();
    hb.set_free_mem(run.freeMemory());
    hb.set_max_mem(run.maxMemory());
    hb.set_tot_mem(run.totalMemory());
    hb._keys=(H2O.STORE.size());
    hb.set_valsz(myHisto.histo(false)._cached);
    hb._num_cpus=(char)run.availableProcessors();
    Object load=null;
    try {
      load=mbs.getAttribute(os,"SystemLoadAverage");
    }
 catch (    Exception e) {
    }
    hb._system_load_average=load instanceof Double ? ((Double)load).floatValue() : 0;
    int rpcs=0;
    for (    H2ONode h2o : cloud._memary)     rpcs+=h2o.taskSize();
    hb._rpcs=(char)rpcs;
    hb._fjthrds_hi=new short[H2O.MAX_PRIORITY + 1 - H2O.MIN_HI_PRIORITY];
    hb._fjqueue_hi=new short[H2O.MAX_PRIORITY + 1 - H2O.MIN_HI_PRIORITY];
    for (int i=0; i < hb._fjthrds_hi.length; i++) {
      hb._fjthrds_hi[i]=(short)H2O.hiQPoolSize(i);
      hb._fjqueue_hi[i]=(short)H2O.getHiQueue(i);
    }
    hb._fjthrds_lo=(char)H2O.loQPoolSize();
    hb._fjqueue_lo=(char)H2O.getLoQueue();
    hb._tcps_active=(char)AutoBuffer.TCPS.get();
    if (PersistIce.ROOT == null) {
      hb.set_free_disk(0);
      hb.set_max_disk(0);
    }
 else {
      File f=new File(PersistIce.ROOT);
      hb.set_free_disk(f.getUsableSpace());
      hb.set_max_disk(f.getTotalSpace());
    }
    UDPHeartbeat.build_and_multicast(cloud,hb);
    long now=System.currentTimeMillis();
    H2O.SELF._last_heard_from=now;
    for (    H2ONode h2o : cloud._memary) {
      if (now - h2o._last_heard_from > SUSPECT) {
        Paxos.print("hart: announce suspect node",cloud._memary,h2o.toString());
        break;
      }
    }
  }
}
