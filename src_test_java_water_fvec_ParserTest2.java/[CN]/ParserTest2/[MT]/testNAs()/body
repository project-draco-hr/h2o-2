{
  String[] data=new String[]{"'C1Chunk',C1SChunk, 'C2Chunk', 'C2SChunk',  'C4Chunk',  'C4FChunk',  'C8Chunk',  'C8DChunk',   'Enum'\n" + "0,       0.0,          0,           0,           0,          0 ,          0,   8.878979,           A \n","1,       0.1,          1,         0.1,           1,          1 ,          1,   1.985934,           B \n","2,       0.2,          2,         0.2,           2,          2 ,          2,   3.398018,           C \n","3,       0.3,          3,         0.3,           3,          3 ,          3,   9.329589,           D \n","4,       0.4,          4,           4,           4,          4 , 2147483649,   0.290184,           A \n","0,       0.5,          0,           0,     -100000,    1.234e2 ,-2147483650,   1e-30,              B \n","254,       0.25,      2550,       6553.4,     100000,    2.345e-2,          0,   1e30,               C \n","   ,           ,          ,            ,            ,            ,           ,       ,                 \n","  ?,         NA,         ?,           ?,           ?,           ?,          ?,       ?,                \n"};
  Key rkey=FVecTest.makeByteVec("na_test",data);
  Key okey=Key.make("na_test.hex");
  Frame fr=ParseDataset2.parse(okey,new Key[]{rkey});
  int nlines=(int)fr._vecs[0].length();
  Class[] expectedTypes=new Class[]{C1Chunk.class,C1SChunk.class,C2Chunk.class,C2SChunk.class,C4Chunk.class,C4FChunk.class,C8Chunk.class,C8DChunk.class,C1Chunk.class};
  assertTrue(fr._vecs.length == expectedTypes.length);
  assertEquals(9,nlines);
  for (int i=0; i < nlines - 2; ++i)   for (  Vec v : fr._vecs)   assertTrue("error at line " + i + ", vec "+ v.elem2BV(0).getClass().getSimpleName(),!v.isNA(v.at(i)) && !v.isNA(v.at8(i)));
  System.out.println("nlines = " + nlines);
  int j=0;
  for (  Vec v : fr._vecs) {
    for (int i=nlines - 2; i < nlines; ++i) {
      assertTrue(i + ", " + j+ ":"+ v.at(i)+ ", "+ v.at8(i),v.isNA(v.at(i)) && v.isNA(v.at8(i)));
    }
    ++j;
  }
  UKV.remove(rkey);
  UKV.remove(okey);
}
