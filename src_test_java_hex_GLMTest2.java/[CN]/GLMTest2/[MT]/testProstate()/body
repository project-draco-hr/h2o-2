{
  Key parsed=Key.make("prostate_parsed");
  Key modelKey=Key.make("prostate_model");
  GLMModel model=null;
  File f=TestUtil.find_test_file("smalldata/glm_test/prostate_cat_replaced.csv");
  Frame fr=getFrameForFile(parsed,"smalldata/glm_test/prostate_cat_replaced.csv",new String[]{"ID"},"CAPSULE");
  try {
    String[] cfs1=new String[]{"Intercept","AGE","RACE.R2","RACE.R3","DPROS","DCAPS","PSA","VOL","GLEASON"};
    double[] vals=new double[]{-8.14867,-0.01368,0.32337,-0.38028,0.55964,0.49548,0.02794,-0.01104,0.97704};
    new GLM2("GLM test on prostate.",Key.make(),modelKey,new Source(fr,fr.lastVec(),false),Family.binomial).setRegularization(new double[]{0},new double[]{0}).doInit().fork().get();
    model=DKV.get(modelKey).get();
    Assert.assertTrue(model.get_params().state == Job.JobState.DONE);
    testHTML(model);
    HashMap<String,Double> coefs=model.coefficients();
    for (int i=0; i < cfs1.length; ++i)     assertEquals(vals[i],coefs.get(cfs1[i]),1e-4);
    GLMValidation val=model.validation();
    assertEquals(512.3,model.null_validation.residualDeviance(),1e-1);
    assertEquals(378.3,val.residualDeviance(),1e-1);
    assertEquals(396.3,val.aic(),1e-1);
    double prior=1e-5;
    new GLM2("GLM test on prostate.",Key.make(),modelKey,new Source(fr,fr.lastVec(),false),Family.binomial).setRegularization(new double[]{0},new double[]{0}).setPrior(prior).doInit().fork().get();
    GLMModel model2=DKV.get(modelKey).get();
    for (int i=0; i < model2.beta().length - 1; ++i)     assertEquals(model.beta()[i],model2.beta()[i],1e-8);
    assertEquals(model.beta()[model.beta().length - 1] - Math.log(model.ymu * (1 - prior) / (prior * (1 - model.ymu))),model2.beta()[model.beta().length - 1],1e-10);
  }
  finally {
    fr.delete();
    if (model != null)     model.delete();
  }
}
