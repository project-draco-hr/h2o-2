{
  Key parsed=Key.make("prostate_parsed");
  Key modelKey=Key.make("prostate_model");
  GLMModel model=null;
  Frame fr=getFrameForFile(parsed,"smalldata/logreg/prostate.csv",new String[]{"ID"},"CAPSULE");
  Key k=Key.make("rebalanced");
  H2O.submitTask(new RebalanceDataSet(fr,k,64)).join();
  fr.delete();
  fr=DKV.get(k).get();
  try {
    String[] cfs1=new String[]{"RACE","AGE","DPROS","DCAPS","PSA","VOL","GLEASON","Intercept"};
    double[] vals=new double[]{0,0,0.54788332,0.53816534,0.02380097,0,0.98115670,-8.945984};
    new GLM2("GLM offset test on prostate.",Key.make(),modelKey,new GLM2.Source((Frame)fr.clone(),fr.vec("CAPSULE"),true,true),Family.binomial).setNonNegative(true).setRegularization(new double[]{1},new double[]{2.22E-5}).doInit().fork().get();
    model=DKV.get(modelKey).get();
    Assert.assertTrue(model.get_params().state == Job.JobState.DONE);
    testHTML(model);
    HashMap<String,Double> coefs=model.coefficients();
    for (int i=0; i < cfs1.length; ++i)     assertEquals(vals[i],coefs.get(cfs1[i]),1e-2);
    GLMValidation val=model.validation();
    assertEquals(512.2888,model.null_validation.residualDeviance(),1e-1);
    assertEquals(383.8068,val.residualDeviance(),1e-1);
  }
  finally {
    fr.delete();
    if (model != null)     model.delete();
  }
}
