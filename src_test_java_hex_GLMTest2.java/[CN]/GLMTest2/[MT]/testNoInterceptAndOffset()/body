{
  Key parsed=Key.make("prostate_parsed");
  Key modelKey=Key.make("prostate_model");
  GLMModel model=null;
  Frame fr=getFrameForFile(parsed,"smalldata/logreg/prostate.csv",new String[]{"ID"},"CAPSULE");
  Key k=Key.make("rebalanced");
  H2O.submitTask(new RebalanceDataSet(fr,k,64)).join();
  fr.delete();
  fr=DKV.get(k).get();
  try {
    String[] cfs1=new String[]{"RACE","AGE","DPROS","PSA","VOL","GLEASON"};
    double[] vals=new double[]{-1.34515,-0.07731,0.44422,0.03559,-0.01001,0.57414};
    new GLM2("GLM offset test on prostate.",Key.make(),modelKey,new GLM2.Source(fr,fr.vec("CAPSULE"),false,false,fr.vec("DCAPS")),Family.binomial).setRegularization(new double[]{0},new double[]{0}).doInit().fork().get();
    model=DKV.get(modelKey).get();
    Assert.assertTrue(model.get_params().state == Job.JobState.DONE);
    testHTML(model);
    HashMap<String,Double> coefs=model.coefficients();
    for (int i=0; i < cfs1.length; ++i)     assertEquals(vals[i],coefs.get(cfs1[i]),1e-4);
    GLMValidation val=model.validation();
    assertEquals(696.8,model.null_validation.residualDeviance(),1e-1);
    assertEquals(402.9,val.residualDeviance(),1e-1);
    assertEquals(414.9,val.aic(),1e-1);
    Frame score=model.score(fr);
    Vec mu=score.vec("1");
    final double[] exp_preds=new double[]{0.2714328,0.6633844,0.3332337,0.261754,0.1286857,0.7700994,0.7278019,0.9234909,0.2111474,0.1685586,0.4976614,0.6792206,0.9448146,0.9433877,0.07163949,0.1055238,0.01654711,0.1167567,0.6150695,0.3851188,0.5469755,0.9775073,0.3686457,0.1734122,0.4399385,0.0647587,0.3155403,0.139005,0.2258441,0.5898738,0.5922247,0.2692957,0.6137802,0.8462912,0.3058918,0.2957983,0.462281,0.6524339,0.6799241,0.3226737,0.4941844,0.1330671,0.2254533,0.3066927,0.9200088,0.958889,0.04513577,0.5383411,0.1038777,0.2440525,0.1092492,0.9958668,0.3193829,0.9367929,0.4897762,0.663691,0.4023,0.5698951,0.4341724,0.4453501,0.1106898,0.1682721,0.2460871,0.4990961,0.8788688,0.4803311,0.5465907,0.1569607,0.1633997,0.1044413,0.2212412,0.1808158,0.6181282,0.2396049,0.3213105,0.7081065,0.2098653,0.3235215,0.2801671,0.6652517,0.2194231,0.5277527,0.4905273,0.2323389,0.1850839,0.2254083,0.9757958,0.9727239,0.8319945,0.482306,0.1248545,0.1360881,0.5320567,0.9574291,0.2080324,0.2144612,0.4982939,0.333785,0.4088947,0.4901476,0.3223926,0.3371016,0.1693325,0.1297989,0.3793889,0.6960325,0.2683522,0.7797531,0.3924964,0.5530082,0.2158664,0.1981704,0.5450428,0.4019126,0.9884714,0.9327079,0.5102081,0.495269,0.112279,0.6908168,0.2224574,0.08042856,0.4025428,0.6777602,0.4874214,0.3087576,0.3105473,0.2562402,0.146729,0.1274273,0.06670393,0.3613933,0.1757637,0.6709157,0.2491046,0.3167014,0.2513937,0.9851177,0.9885838,0.3577745,0.1546274,0.72168,0.2868293,0.9631664,0.2343213,0.06899739,0.9769368,0.3338782,0.6347512,0.3485507,0.05771538,0.175731,0.1481765,0.6632638,0.4730665,0.04656982,0.6374328,0.2778723,0.4285074,0.5850365,0.2805779,0.4880345,0.6923684,0.6431633,0.2055755,0.7452229,0.2049388,0.2320392,0.5034929,0.7341303,0.2612126,0.2810201,0.7449264,0.5941076,0.1742119,0.3320475,0.7572676,0.12218,0.2932756,0.6242029,0.8294807,0.7162603,0.2853046,0.5877545,0.6005982,0.8300135,0.8581161,0.04492492,0.5175156,0.5203193,0.4543528,0.8947635,0.1580703,0.149249,0.2448207,0.5182805,0.1475552,0.2579333,0.2301171,0.3908543,0.3775577,0.73236,0.348705,0.191458,0.3810784,0.6695089,0.1496464,0.3539768,0.4774868,0.3786629,0.2268355,0.5461673,0.9277121,0.4923828,0.3681328,0.2882241,0.8115473,0.9391989,0.2793372,0.1293679,0.5765253,0.6672549,0.1085629,0.6530963,0.2099487,0.4395374,0.3355906,0.5774188,0.3320534,0.553845,0.2571366,0.555651,0.8082447,0.9878579,0.3889303,0.2042754,0.1462106,0.2517127,0.3565349,0.05953082,0.1621768,0.2344363,0.8734925,0.1734602,0.2671484,0.2510726,0.1139504,0.4709787,0.2081558,0.8334942,0.6389909,0.8736708,0.3707539,0.1036151,0.4302368,0.9448559,0.8462579,0.2411054,0.4935917,0.13429,0.241161,0.3752208,0.3194919,0.3351406,0.5469151,0.3131954,0.4897492,0.1936143,0.6055124,0.324853,0.2217794,0.1513135,0.889535,0.3500166,0.1428834,0.1542479,0.3720363,0.1281707,0.4973429,0.3057025,0.7167489,0.009317823,0.06013731,0.07956679,0.5774665,0.3988433,0.3558458,0.7577223,0.2729823,0.08260389,0.2412571,0.1479702,0.3244259,0.7868388,0.4718041,0.7904578,0.8405282,0.1406044,0.3987826,0.1000184,0.1835483,0.1950392,0.9977054,0.4791991,0.6242925,0.2214897,0.273065,0.4966417,0.04303004,0.7397745,0.04042993,0.2130047,0.7908355,0.2323056,0.3072782,0.5756885,0.2978859,0.2074281,0.8241888,0.2913779,0.5488127,0.56141,0.2361691,0.6870129,0.04781581,0.1052127,0.1451822,0.482763,0.3677431,0.08324137,0.7907079,0.5541721,0.05215705,0.691283,0.1813831,0.5188524,0.3090686,0.9383484,0.1454368,0.8514089,0.5071669,0.2971994,0.08048813,0.3643893,0.8936522,0.09901629,0.2188425,0.07477413,0.537254,0.3051141,0.4667297,0.2651349,0.7941239,0.782783,0.01870947,0.2772949,0.008545014,0.1708219,0.3550333,0.239455,0.3003783,0.2502883,0.7356557,0.6204092,0.1454039,0.2910956,0.09259536,0.5196652,0.2838468,0.06632939,0.1611899,0.3349858,0.1828278,0.998065,0.2499865,0.3866357,0.02725202,0.252886,0.03562421,0.1845115};
    assertEquals(exp_preds.length,mu.length());
    for (int i=0; i < mu.length(); ++i)     assertEquals(exp_preds[i],mu.at(i),1e-4);
    fr=getFrameForFile(parsed,"smalldata/glm_test/prostate_cat_replaced.csv",new String[]{"ID"},"CAPSULE");
    try {
      new GLM2("GLM offset test on prostate.",Key.make(),modelKey,new GLM2.Source(fr,fr.vec("CAPSULE"),false,false),Family.binomial).doInit().fork().get();
      assertTrue("should've thrown",false);
    }
 catch (    IllegalArgumentException iae) {
    }
  }
  finally {
    fr.delete();
    if (model != null)     model.delete();
  }
}
