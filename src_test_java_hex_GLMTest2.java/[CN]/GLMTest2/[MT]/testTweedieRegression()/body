{
  Key raw=Key.make("gaussian_test_data_raw");
  Key parsed=Key.make("gaussian_test_data_parsed");
  Key modelKey=Key.make("gaussian_test");
  Frame fr=null;
  GLMModel model=null;
  try {
    FVecTest.makeByteVec(raw,"x,y\n0,0\n1,0.1\n2,0.2\n3,0.3\n4,0.4\n5,0.5\n6,0.6\n7,0.7\n8,0.8\n9,0.9\n0,0\n1,0\n2,0\n3,0\n4,0\n5,0\n6,0\n7,0\n8,0\n9,0");
    fr=ParseDataset2.parse(parsed,new Key[]{raw});
    double[] powers=new double[]{1.5,1.1,1.9};
    double[] intercepts=new double[]{3.643,1.318,9.154};
    double[] xs=new double[]{-0.260,-0.0284,-0.853};
    for (int i=0; i < powers.length; ++i) {
      GLM2 glm=new GLM2("GLM test of gaussian(linear) regression.",Key.make(),modelKey,new Source(fr,fr.lastVec(),false),Family.tweedie,Link.family_default,0,true);
      glm.setTweediePower(powers[i]);
      glm.setLambda(0);
      glm.max_iter=1000;
      glm.fork().get();
      model=DKV.get(modelKey).get();
      testHTML(model);
      HashMap<String,Double> coefs=model.coefficients();
      assertEquals(intercepts[i],coefs.get("Intercept"),1e-3);
      assertEquals(xs[i],coefs.get("x"),1e-3);
    }
  }
  finally {
    if (fr != null)     fr.delete();
    if (model != null)     model.delete();
  }
}
