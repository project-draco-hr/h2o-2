{
  Key parsed=Key.make("prostate_parsed");
  Key modelKey=Key.make("prostate_model");
  GLMModel model=null;
  Frame fr=getFrameForFile(parsed,"smalldata/logreg/prostate.csv",new String[]{"ID"},"CAPSULE");
  Key k=Key.make("rebalanced");
  H2O.submitTask(new RebalanceDataSet(fr,k,64)).join();
  fr.delete();
  fr=DKV.get(k).get();
  Key betaConsKey=Key.make("beta_constraints");
  FVecTest.makeByteVec(betaConsKey,"names, lower_bounds, upper_bounds\n RACE, -.5, .5\n DCAPS, -.4, .4\n DPROS, -.5, .5 \nPSA, -.5, .5\n VOL, -.5, .5\nGLEASON, -.5, .5\nAGE, -.5, .5");
  Frame betaConstraints=ParseDataset2.parse(parsed,new Key[]{betaConsKey});
  try {
    String[] cfs1=new String[]{"AGE","RACE","DPROS","DCAPS","PSA","VOL","GLEASON","Intercept"};
    double[] vals=new double[]{-0.006502588,-0.500000000,0.500000000,0.400000000,0.034826559,-0.011661747,0.500000000,-4.564024};
    new GLM2("GLM offset test on prostate.",Key.make(),modelKey,new GLM2.Source((Frame)fr.clone(),fr.vec("CAPSULE"),true,true),Family.binomial).setNonNegative(false).setRegularization(new double[]{1},new double[]{0.001607}).setBetaConstraints(betaConstraints).doInit().fork().get();
    model=DKV.get(modelKey).get();
    Assert.assertTrue(model.get_params().state == Job.JobState.DONE);
    testHTML(model);
    System.out.println(Arrays.toString(model.norm_beta(model.lambda())));
    System.out.println(model.coefficients().toString());
    System.out.println(model.validation().toString());
    HashMap<String,Double> coefs=model.coefficients();
    for (int i=0; i < cfs1.length; ++i)     assertEquals(vals[i],coefs.get(cfs1[i]),1e-2);
    GLMValidation val=model.validation();
    assertEquals(512.2888,model.null_validation.residualDeviance(),1e-1);
    assertEquals(388.4686,val.residualDeviance(),1e-1);
    model.delete();
    betaConstraints.delete();
    FVecTest.makeByteVec(betaConsKey,"names, lower_bounds, upper_bounds\n RACE, -.5, .5\n DCAPS, -.4, .4\n DPROS, -.5, .5 \nPSA, -.5, .5\n VOL, -.5, .5\nGLEASON, -.5, .5\nAGE, .5, .5");
    betaConstraints=ParseDataset2.parse(parsed,new Key[]{betaConsKey});
    new GLM2("GLM offset test on prostate.",Key.make(),modelKey,new GLM2.Source((Frame)fr.clone(),fr.vec("CAPSULE"),true,true),Family.binomial).setNonNegative(false).setRegularization(new double[]{1},new double[]{0.001607}).setBetaConstraints(betaConstraints).doInit().fork().get();
    model=DKV.get(modelKey).get();
    System.out.println(model.coefficients());
    assertEquals(.5,model.coefficients().get("AGE"),1e-16);
    FVecTest.makeByteVec(betaConsKey,"names, lower_bounds, upper_bounds\n AGE, .51, .5\n RACE, -.5, .5\n DCAPS, -.4, .4\n DPROS, -.5, .5 \nPSA, -.5, .5\n VOL, -.5, .5\nGLEASON, -.5, .5");
    model.delete();
    betaConstraints=ParseDataset2.parse(parsed,new Key[]{betaConsKey});
    try {
      new GLM2("GLM offset test on prostate.",Key.make(),modelKey,new GLM2.Source((Frame)fr.clone(),fr.vec("CAPSULE"),true,true),Family.binomial).setNonNegative(false).setRegularization(new double[]{1},new double[]{0.001607}).setBetaConstraints(betaConstraints).doInit().fork().get();
      assertTrue("should've thrown",false);
    }
 catch (    IllegalArgumentException t) {
      assertTrue(t.getMessage().contains("Invalid upper/lower bounds"));
    }
    FVecTest.makeByteVec(betaConsKey,"names, lower_bounds, upper_bounds\n AGE, .5, .5\n AGE, -.5, .5\n DCAPS, -.4, .4\n DPROS, -.5, .5 \nPSA, -.5, .5\n VOL, -.5, .5\nGLEASON, -.5, .5");
    model.delete();
    betaConstraints=ParseDataset2.parse(parsed,new Key[]{betaConsKey});
    try {
      new GLM2("GLM offset test on prostate.",Key.make(),modelKey,new GLM2.Source((Frame)fr.clone(),fr.vec("CAPSULE"),true,true),Family.binomial).setNonNegative(false).setRegularization(new double[]{1},new double[]{0.001607}).setBetaConstraints(betaConstraints).doInit().fork().get();
      assertTrue("should've thrown",false);
    }
 catch (    IllegalArgumentException t) {
      assertTrue(t.getMessage().contains("duplicate constraints for 'AGE'"));
    }
    FVecTest.makeByteVec(betaConsKey,"names, lower_bounds, upper_bounds\n AGE, .5, .5\n XXX, -.5, .5\n DCAPS, -.4, .4\n DPROS, -.5, .5 \nPSA, -.5, .5\n VOL, -.5, .5\nGLEASON, -.5, .5");
    betaConstraints=ParseDataset2.parse(parsed,new Key[]{betaConsKey});
    try {
      new GLM2("GLM offset test on prostate.",Key.make(),modelKey,new GLM2.Source((Frame)fr.clone(),fr.vec("CAPSULE"),true,true),Family.binomial).setNonNegative(false).setRegularization(new double[]{1},new double[]{0.001607}).setBetaConstraints(betaConstraints).doInit().fork().get();
      assertTrue("should've thrown",false);
    }
 catch (    IllegalArgumentException t) {
      assertTrue(t.getMessage().contains("unknown predictor name 'XXX'"));
    }
    betaConstraints.delete();
    FVecTest.makeByteVec(betaConsKey,"nms, lower_bounds, upper_bounds\n AGE, .5, .5\n XXX, -.5, .5\n DCAPS, -.4, .4\n DPROS, -.5, .5 \nPSA, -.5, .5\n VOL, -.5, .5\nGLEASON, -.5, .5");
    betaConstraints=ParseDataset2.parse(parsed,new Key[]{betaConsKey});
    try {
      new GLM2("GLM offset test on prostate.",Key.make(),modelKey,new GLM2.Source((Frame)fr.clone(),fr.vec("CAPSULE"),true,true),Family.binomial).setNonNegative(false).setRegularization(new double[]{1},new double[]{0.001607}).setBetaConstraints(betaConstraints).doInit().fork().get();
      assertTrue("should've thrown",false);
    }
 catch (    IllegalArgumentException t) {
      assertTrue(t.getMessage().contains("missing column with predictor names"));
    }
  }
  finally {
    if (betaConstraints != null)     betaConstraints.delete();
    fr.delete();
    if (model != null)     model.delete();
  }
}
