{
  Key parsed=Key.make("prostate_parsed");
  Key modelKey=Key.make("prostate_model");
  GLMModel model=null;
  Frame fr=getFrameForFile(parsed,"smalldata/logreg/prostate.csv",new String[]{"ID"},"CAPSULE");
  try {
    String[] cfs1=new String[]{"RACE","AGE","DPROS","DCAPS","PSA","VOL","GLEASON"};
    double[] vals=new double[]{-1.23262,-0.07205,0.47899,0.13934,0.03626,-0.01155,0.63645};
    new GLM2("GLM offset test on prostate.",Key.make(),modelKey,new GLM2.Source(fr,fr.vec("CAPSULE"),false,false),Family.binomial).fork().get();
    model=DKV.get(modelKey).get();
    Assert.assertTrue(model.get_params().state == Job.JobState.DONE);
    testHTML(model);
    HashMap<String,Double> coefs=model.coefficients();
    for (int i=0; i < cfs1.length; ++i)     assertEquals(vals[i],coefs.get(cfs1[i]),1e-4);
    GLMValidation val=model.validation();
    assertEquals(526.8,model.null_validation.residualDeviance(),1e-1);
    assertEquals(399,val.residualDeviance(),1e-1);
    assertEquals(413,val.aic(),1e-1);
    fr=getFrameForFile(parsed,"smalldata/glm_test/prostate_cat_replaced.csv",new String[]{"ID"},"CAPSULE");
    try {
      new GLM2("GLM offset test on prostate.",Key.make(),modelKey,new GLM2.Source(fr,fr.vec("CAPSULE"),false,false),Family.binomial).fork().get();
      assertTrue("should've thrown",false);
    }
 catch (    IllegalArgumentException iae) {
    }
  }
  finally {
    fr.delete();
    if (model != null)     model.delete();
  }
}
