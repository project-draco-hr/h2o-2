def test_DeepLearning_twovalues(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    csvFilename = 'syn_twovalues.csv'
    csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
    rowDataTrue = '1, 0, 65, 1, 2, 1, 1, 4, 1, 4, 1, 4'
    rowDataFalse = '0, 1, 0, -1, -2, -1, -1, -4, -1, -4, -1, -4'
    twoValueList = [('A', 'B', 0, 14), ('A', 'B', 1, 14), (0, 1, 0, 12), (0, 1, 1, 12), (0, 1, 'NaN', 12), (1, 0, 'NaN', 12), ((-1), 1, 0, 12), ((-1), 1, 1, 12), ((-10.0), 10.0, 10.0, 12), ((-10.0), 10.0, (-10.0), 12)]
    trial = 0
    for (outputTrue, outputFalse, case, coeffNum) in twoValueList:
        write_syn_dataset(csvPathname, 20, rowDataTrue, rowDataFalse, str(outputTrue), str(outputFalse))
        start = time.time()
        hex_key = ((csvFilename + '_') + str(trial))
        model_key = (('trial_' + str(trial)) + '.hex')
        validation_key = hex_key
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key)
        print ('using outputTrue: %s outputFalse: %s' % (outputTrue, outputFalse))
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvPathname), '    numRows:', '{:,}'.format(inspect['numRows']), '    numCols:', '{:,}'.format(inspect['numCols'])
        response = inspect['numCols']
        response = ('C' + str(response))
        kwargs = {'ignored_cols': None, 'response': response, 'classification': 1, 'activation': 'Tanh', 'hidden': '113,71,54', 'rate': 0.01, 'rate_annealing': 1e-06, 'momentum_start': 0, 'momentum_stable': 0, 'l1': 0.0, 'l2': 1e-06, 'seed': 80023842348, 'loss': 'CrossEntropy', 'initial_weight_distribution': 'UniformAdaptive', 'epochs': 100, 'destination_key': model_key, 'validation': hex_key, }
        timeoutSecs = 60
        start = time.time()
        h2o_cmd.runDeepLearning(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
        print 'trial #', trial, 'Deep Learning end on ', csvFilename, ' took', (time.time() - start), 'seconds'
        expectedErr = 0.0
        relTol = 0.01
        predict_key = 'Predict.hex'
        kwargs = {'data_key': validation_key, 'destination_key': predict_key, 'model_key': model_key, }
        predictResult = h2o_cmd.runPredict(timeoutSecs=timeoutSecs, **kwargs)
        h2o_cmd.runInspect(key=predict_key, verbose=True)
        kwargs = {}
        predictCMResult = h2o.nodes[0].predict_confusion_matrix(actual=validation_key, vactual=response, predict=predict_key, vpredict='predict', timeoutSecs=timeoutSecs, **kwargs)
        cm = predictCMResult['cm']
        print h2o_gbm.pp_cm(cm)
        actualErr = (h2o_gbm.pp_cm_summary(cm) / 100.0)
        print ('actual   classification error:' + format(actualErr))
        print ('expected classification error:' + format(expectedErr))
        if ((actualErr != expectedErr) and (abs(((expectedErr - actualErr) / expectedErr)) > relTol)):
            raise Exception(('Scored classification error of %s is not within %s %% relative error of %s' % (actualErr, (float(relTol) * 100), expectedErr)))
        trial += 1
