{
  if (fr == null)   return null;
  assert(label.isEnum());
  assert(maxrows >= minrows);
  assert(maxrows >= fr.numRows());
  if (sampling_ratios == null || (Utils.minValue(sampling_ratios) == 0 && Utils.maxValue(sampling_ratios) == 0)) {
    long[] dist=new ClassDist(label).doAll(label).dist();
    assert(dist.length > 0);
    assert(minrows >= dist.length);
    if (debug) {
      Log.info("Before stratified sampling: " + fr.numRows() + " rows.");
      for (int i=0; i < dist.length; ++i) {
        Log.info("Class " + label.domain(i) + ": count: "+ dist[i]+ " prior: "+ (float)dist[i] / fr.numRows());
      }
    }
    if (sampling_ratios == null) {
      sampling_ratios=new float[dist.length];
    }
    assert(sampling_ratios.length == dist.length);
    for (int i=0; i < dist.length; ++i) {
      sampling_ratios[i]=((float)fr.numRows() / label.domain().length) / dist[i];
    }
    float inv_scale=Utils.minValue(sampling_ratios);
    long numrows=(long)((float)fr.numRows() / inv_scale + 0.5f);
    if (debug)     Log.info("Full class balance via oversampling requires approx. " + numrows + " rows.");
    numrows=Math.min(maxrows,numrows);
    numrows=Math.max(minrows,numrows);
    Utils.mult(sampling_ratios,(float)numrows / fr.numRows());
    Log.info("Doing stratified sampling to obtain class balance with " + numrows + " total rows.");
  }
  return sampleFrameStratified(fr,label,sampling_ratios,seed,debug);
}
