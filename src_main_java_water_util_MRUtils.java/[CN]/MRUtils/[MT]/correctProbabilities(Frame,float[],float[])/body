{
  if (prior_fraction == null || model_fraction == null)   return;
  assert(prior_fraction != null && model_fraction != null);
  assert(prior_fraction.length == model_fraction.length);
  assert(fr.numCols() == 1 + prior_fraction.length);
  new MRTask2(){
    @Override public void map(    Chunk[] cs){
      for (int r=0; r < cs[0]._len; r++) {
        double[] probs=new double[cs.length - 1];
        for (int i=0; i < cs.length - 1; i++) {
          final double scoring_result=cs[i + 1].at0(r);
          assert(!Double.isNaN(scoring_result));
          final double original_fraction=prior_fraction[i];
          assert(original_fraction > 0);
          final double oversampled_fraction=model_fraction[i];
          assert(oversampled_fraction > 0);
          probs[i]=scoring_result * original_fraction / oversampled_fraction;
          assert(!Double.isNaN(probs[i]));
        }
        final double probsum=Utils.sum(probs);
        for (int i=0; i < cs.length - 1; i++) {
          cs[i + 1].set0(r,probs[i] / probsum);
        }
      }
    }
  }
.doAll(fr);
}
