def writeSimpleSliceTestTask(FU, data, dataPath, FUParams):
    (TESTNAME, DESCRIPTION, COLS, ROWS, COLROW, LOOPCOLS, LOOPROWS, LOOPCOLROW) = FUParams.split(':')
    DATANAME = data
    DATAPATH = dataPath
    with open('githash', 'rb') as f:
        githash = f.read()
    with open('seed', 'rb') as f:
        seed = f.read()
    ts = time.time()
    st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
    test = '\n            ##\n            # Author: Autogenerated on {4}\n            # gitHash: {5}\n            # SEED: {6}\n  \n            ##\n            source(\'./findNSourceUtils.R\')\n\n            Log.info("======================== Begin Test ===========================")\n            {3} <- function(conn) {{\n                Log.info("A munge-task R unit test on data <{0}> testing the functional unit <{1}> ")\n                Log.info("Uploading {0}")\n                hex <- h2o.uploadFile(conn, {2}, "r{0}.hex")\n           '.format(DATANAME, FU, DATAPATH, TESTNAME.replace('-', '_'), st, githash, seed)
    cols = makeVec(COLS)
    rows = makeVec(ROWS)
    cR = COLROW.split('|')
    colRow = [makeVec(cR[1]), makeVec(cR[0])]
    loopCols = convertSeq(filter((lambda a: (a in ['0', 0])), LOOPCOLS.split(';')))
    loopRows = convertSeq(filter((lambda a: (a in ['0', 0])), LOOPROWS.split(';')))
    loopColRow = LOOPCOLROW.split('|')
    loopColsRows = list(itertools.product(*[loopColRow[1].split(';'), loopColRow[0].split(';')]))
    colSlice = '\n                slicedHex <- hex[,{0}]\n               '
    rowSlice = '\n                slicedHex <- hex[{0},]\n               '
    colRowSlice = '\n                slicedHex <- hex[{0},{1}]\n               '
    if ((cols != '0') and (cols != 'c()')):
        test += '\n                \n                Log.info("Performing a column slice of {0} using these columns: {1}")'.format(DATANAME, escape(cols))
        test += colSlice.format(cols)
    if (rows not in ['0', 0, '', '', 'c()', 'c(0)']):
        test += '\n                \n                    Log.info("Performing a row slice of {0} using these rows: {1}")\n                '.format(DATANAME, rows)
        test += rowSlice.format(rows)
    if ((colRow[0] not in ['c(0)', 'c()', 'c("")', '', '', '0', 0, 'c("")']) and (colRow[1] not in ['c(0)', 'c()', 'c("")', '', '', '0', 0, 'c("")'])):
        test += '\n                \n                    Log.info("Performing a row & column slice of {0} using these rows & columns: {2} & {1}")\n                '.format(DATANAME, colRow[0], escape(colRow[1]))
        test += colRowSlice.format(colRow[0], colRow[1])
    if (not any(((x in loopCols) for x in ['"0"', '0', '0', 0, '', '', 'c()', 'c(0)']))):
        test += ' \n                \n                    Log.info("Performing a 1-by-1 column slice of {0} using these columns: {1}")\n                '.format(DATANAME, escape(','.join(loopCols)))
        for i in loopCols:
            test += '\n                    Log.info("Slicing column {1} from data {0}")\n                '.format(DATANAME, escape(i))
            test += colSlice.format(i)
    if (not any(((x in loopRows) for x in ['c(0)', 'c()', 'c("")', '', '', '0', 0, 'c("")']))):
        test += ' \n                \n                    Log.info("Performing a 1-by-1 row slice of {0} using these rows: {1}")\n                '.format(DATANAME, ','.join(loopRows))
        for i in loopRows:
            test += '\n                    Log.info("Slicing row {1} from data {0}")\n                '.format(DATANAME, i)
            test += rowSlice.format(i)
    if ((not any(((x in loopColRow[0]) for x in ['"0"', '0', '0', '', '', 'c()', 'c(0)', 'c("")']))) or (not any(((x in loopColRow[1]) for x in ['"0"', '0', '0', '', '', 'c()', 'c(0)', 'c("")'])))):
        test += ' \n                \n                    Log.info("Performing a 1-by-1 combined row & column slice of {0} using these rows & columns: {1} & {2}")\n                '.format(DATANAME, escape(','.join(loopColRow[1].split(';'))), escape(','.join(loopColRow[0].split(';'))))
        for i in loopColsRows:
            test += '\n                    Log.info("Slicing row {1} and column {2} from data {0}")\n                '.format(DATANAME, escape(i[0]), escape(i[1]))
            test += colRowSlice.format(i[0], i[1])
    test += '\n            }}\n            \n            conn = new("H2OClient", ip=myIP, port=myPort)\n            tryCatch(test_that({1}, {0}(conn)), warning = function(w) WARN(w), error = function(e) FAIL(e))\n            PASS()'.format(TESTNAME.replace('-', '_'), DESCRIPTION)
    return test
