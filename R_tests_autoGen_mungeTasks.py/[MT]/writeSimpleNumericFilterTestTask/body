def writeSimpleNumericFilterTestTask(FU, data, dataPath, FUParams):
    (TESTNAME, DESCRIPTION, COLS, VALUECOL, VALUECOL2) = FUParams.split(':')
    DATANAME = data
    DATAPATH = dataPath
    with open('githash', 'rb') as f:
        githash = f.read()
    with open('seed', 'rb') as f:
        seed = f.read()
    ts = time.time()
    st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
    test = ' \n            ##\n            # Author: Autogenerated on {4}\n            # gitHash: {5}\n            # SEED: {6}\n            ##\n            setwd(normalizePath(dirname(R.utils::commandArgs(asValues=TRUE)$"f")))\n            source(\'../findNSourceUtils.R\') \n\n            {3} <- function(conn) {{\n                Log.info("A munge-task R unit test on data <{0}> testing the functional unit <{1}> ")\n                Log.info("Uploading {0}")\n                hex <- h2o.uploadFile.FV(conn, locate({2}), "r{0}.hex")\n           '.format(DATANAME.replace('-', '_'), FU, DATAPATH, TESTNAME.replace('-', '_'), st, githash, seed)
    valCol = zip(VALUECOL.split('|')[0].split(';'), VALUECOL.split('|')[1].split(';'))
    valCol2 = (zip(VALUECOL2.split('|')[0].split(';'), VALUECOL2.split('|')[1].split(';')) if (VALUECOL2 != '0') else '0')
    compCols = COLS.split(';')
    rowFilterByCol = '\n                     filterHex <- hex[hex[,{1}] {0} {2},]\n                     '
    rowFilterByColNSelect = '\n                     filterHex <- hex[hex[,{1}] {0} {2}, {3}]\n                     '
    rowFilterByMunee = ''
    rowFilterByMuneeNSelect = ''
    try:
        float(valCol[0][1])
    except ValueError:
        rowFilterByMunee = '\n                    filterHex <- hex[hex${1} {0} {2},]\n                    '
        rowFilterByMuneeNSelect = '\n                    filterHex <- hex[hex${1} {0} {2}, {3}]\n                    '
    for i in valCol:
        if (i[0] in ['0', 0, '', '']):
            continue
        if (i[1] in ['0', 0, '', '']):
            continue
        test += '\n                Log.info("Filtering out rows by {0} from dataset {1} and column {2} using value {3}")\n                '.format(FU, DATANAME, escape(i[1]), escape(i[0]))
        test += rowFilterByCol.format(FU, makeVec(i[1]), i[0])
        if (rowFilterByMunee != ''):
            test += '\n                    Log.info("Perform filtering with the \'$\' sign also")\n                    '
            test += rowFilterByMunee.format(FU, i[1], i[0])
    if (valCol2 != '0'):
        for i in valCol2:
            if (i[0] in ['0', 0, '', '']):
                continue
            if (i[1] in ['0', 0, '', '']):
                continue
            test += ' \n                    Log.info("Filtering out rows by {0} from dataset {1} and column {2} using value {3}, and also subsetting columns.")\n                    '.format(FU, DATANAME, escape(i[1]), escape(i[0]))
            test += rowFilterByColNSelect.format(FU, makeVec(i[1]), i[0], makeVec(i[1]))
            test += '\n                    Log.info("Now do the same filter & subset, but select complement of columns.")\n                    '
            cC = filter((lambda a: (a != i[1])), compCols)
            test += rowFilterByColNSelect.format(FU, makeVec(i[1]), i[0], makeVec(';'.join(cC)))
    test += ' \n            testEnd()\n            }}\n           \n            doTest("{1} unit= {2}", {0})'.format(TESTNAME.replace('-', '_'), DESCRIPTION.replace('"', ''), FU)
    return test
