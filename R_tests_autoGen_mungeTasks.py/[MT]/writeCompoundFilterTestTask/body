def writeCompoundFilterTestTask(FU, data, dataPath, FUParams):
    FU = FU.split(';')
    (TESTNAME, DESCRIPTION, COLS, VALUECOLL, VALUECOLR, VALUECOLL2, VALUECOLR2) = FUParams.split(':')
    DATANAME = data
    DATAPATH = dataPath
    test = ' \n            source(\'./Utils/h2oR.R\')\n\n            Log.info("======================== Begin Test ===========================")\n            {3} <- function(conn) {{\n                Log.info("A munge-task R unit test on data <{0}> testing the compound functional unit <{1}> ")\n                Log.info("Uploading {0}")\n                hex <- h2o.uploadFile(conn, {2}, "{0}.hex")\n           '.format(DATANAME, FU, DATAPATH, TESTNAME)
    valColL = zip(VALUECOLL.split('|')[0].split(';'), VALUECOLL.split('|')[1].split(';'))
    valColR = zip(VALUECOLR.split('|')[0].split(';'), VALUECOLR.split('|')[1].split(';'))
    valCol = zip(valColL, valColR)
    valColL2 = (zip(VALUECOLL2.split('|')[0].split(';'), VALUECOLL2.split('|')[1].split(';')) if (VALUECOLL2 != '0') else '0')
    valColR2 = (zip(VALUECOLR2.split('|')[0].split(';'), VALUECOLR2.split('|')[1].split(';')) if (VALUECOLR2 != '0') else '0')
    valCol2 = zip(valColL2, valColR2)
    compCols = COLS.split(';')
    rowFilterByCol = '\n                     filterHex <- hex[{0},]\n                     '
    rowFilterByColNSelect = '\n                     filterHex <- hex[{0}, {1}]\n                     '
    FUcopy = FU[:]
    EXPRESSION = makeExpression(FUcopy, valCol)
    test += ' \n            Log.info("Performing compound task {0} on dataset <{1}>")\n            '.format(escape(EXPRESSION), DATANAME)
    test += rowFilterByCol.format(EXPRESSION)
    if (valCol2[0][0][0] != "'0'"):
        FUcopy = FU[:]
        EXPRESSION = makeExpression(FUcopy, valCol2)
        test += ' \n            Log.info("Performing compound task {0} on dataset {1}, and also subsetting columns.")\n            '.format(escape(EXPRESSION), DATANAME)
        selectCols = ([i[1].replace('"', '') for i in valColL2] + [i[1] for i in valColR2])
        selectCols = [i.replace('"', '') for i in selectCols]
        test += rowFilterByColNSelect.format(EXPRESSION, makeVec(';'.join(selectCols)))
        test += '\n                Log.info("Now do the same filter & subset, but select complement of columns.")\n                '
        cC = filter((lambda a: (a not in selectCols)), compCols)
        test += rowFilterByColNSelect.format(EXPRESSION, makeVec(';'.join(cC)))
    test += '\n            }}\n            \n            conn = new("H2OClient", ip=myIP, port=myPort)\n            tryCatch(test_that({1}, {0}(conn)), error = function(e) FAIL(e))\n            PASS()'.format(TESTNAME, DESCRIPTION)
    return test
