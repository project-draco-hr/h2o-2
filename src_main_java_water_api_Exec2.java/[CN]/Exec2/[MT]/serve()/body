{
  if (str == null)   return RequestServer._http404.serve();
  Throwable e;
  Env env=null;
  try {
    env=water.exec.Exec2.exec(str);
    StringBuilder sb=env._sb;
    if (sb.length() != 0)     sb.append("\n");
    if (env == null)     throw new IllegalArgumentException("Null return from Exec2?");
    if (env.sp() == 0) {
    }
 else     if (env.isAry()) {
      Frame fr=env.peekAry();
      String skey=env.peekKey();
      num_rows=fr.numRows();
      num_cols=fr.numCols();
      cols=new Inspect2.ColSummary[num_cols];
      for (int i=0; i < num_cols; i++)       cols[i]=new Inspect2.ColSummary(fr._names[i],fr.vecs()[i]);
      String[] fs=fr.toStringHdr(sb);
      for (int i=0; i < Math.min(6,fr.numRows()); i++)       fr.toString(sb,fs,i);
      env.pop();
    }
 else     if (env.isFcn()) {
      ASTOp op=env.peekFcn();
      funstr=op.toString();
      sb.append(op.toString(true));
      env.pop();
    }
 else {
      scalar=env.popDbl();
      sb.append(Double.toString(scalar));
    }
    if (env.warnings().length != 0) {
      sb.append(Arrays.toString(env.warnings()));
    }
    result=sb.toString();
    return Response.done(this);
  }
 catch (  IllegalArgumentException pe) {
    e=pe;
  }
catch (  Throwable e2) {
    Log.err(e=e2);
  }
 finally {
    if (env != null) {
      try {
        env.remove_and_unlock();
      }
 catch (      Exception xe) {
        Log.err("env.remove_and_unlock() failed",xe);
      }
    }
  }
  return Response.error(e);
}
