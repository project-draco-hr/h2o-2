def test_GBM_covtype_train_test(self):
    h2o.beta_features = False
    bucket = 'home-0xdiag-datasets'
    modelKey = 'GBMModelKey'
    files = [('standard', 'covtype.shuffled.90pct.data', 'covtype.train.hex', 1800, 54, 'covtype.shuffled.10pct.data', 'covtype.test.hex')]
    for (importFolderPath, trainFilename, trainKey, timeoutSecs, vresponse, testFilename, testKey) in files:
        h2o.beta_features = False
        start = time.time()
        h2o.beta_features = True
        xList = []
        eList = []
        sList = []
        print 'Parsing to fvec directly! Have to noPoll=true!, and doSummary=False!'
        parseTrainResult = h2i.import_parse(bucket=bucket, path=((importFolderPath + '/') + trainFilename), schema='local', hex_key=trainKey, timeoutSecs=timeoutSecs, noPoll=True, doSummary=False)
        if h2o.beta_features:
            h2j.pollWaitJobs(timeoutSecs=1800, pollTimeoutSecs=1800)
            print "Filling in the parseTrainResult['destination_key'] for h2o"
            parseTrainResult['destination_key'] = trainKey
        elapsed = (time.time() - start)
        print 'train parse end on ', trainFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'train parse result:', parseTrainResult['destination_key']
        print 'Parsing to fvec directly! Have to noPoll=true!, and doSummary=False!'
        parseTestResult = h2i.import_parse(bucket=bucket, path=((importFolderPath + '/') + testFilename), schema='local', hex_key=testKey, timeoutSecs=timeoutSecs, noPoll=True, doSummary=False)
        if h2o.beta_features:
            h2j.pollWaitJobs(timeoutSecs=1800, pollTimeoutSecs=1800)
            print "Filling in the parseTestResult['destination_key'] for h2o"
            parseTestResult['destination_key'] = testKey
        elapsed = (time.time() - start)
        print 'test parse end on ', testFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'test parse result:', parseTestResult['destination_key']
        ntrees = 40
        ntrees = 10
        for max_depth in [5]:
            params = {'learn_rate': 0.2, 'nbins': 1024, 'ntrees': ntrees, 'max_depth': max_depth, 'min_rows': 10, 'vresponse': vresponse, }
            print 'Using these parameters for GBM: ', params
            kwargs = params.copy()
            h2o_cmd.runInspect(key=parseTrainResult['destination_key'])
            start = time.time()
            gbmTrainResult = h2o_cmd.runGBM(parseResult=parseTrainResult, noPoll=True, timeoutSecs=timeoutSecs, destination_key=modelKey, **kwargs)
            if h2o.beta_features:
                h2j.pollWaitJobs(timeoutSecs=1800, pollTimeoutSecs=1800)
            elapsed = (time.time() - start)
            print 'GBM training completed in', elapsed, 'seconds. On dataset: ', trainFilename
            gbmTrainView = h2o_cmd.runGBMView(model_key=modelKey)
            errsLast = gbmTrainView['gbm_model']['errs'][(-1)]
            cm = gbmTrainView['gbm_model']['cm']
            print "GBM 'cm'", cm
            print "GBM 'errsLast'", errsLast
            predictKey = 'Predict.hex'
            h2o_cmd.runInspect(key=parseTestResult['destination_key'])
            start = time.time()
            gbmTestResult = h2o_cmd.runPredict(data_key=parseTestResult['destination_key'], model_key=modelKey, destination_key=predictKey, timeoutSecs=timeoutSecs, **kwargs)
            if h2o.beta_features:
                h2j.pollWaitJobs(timeoutSecs=1800, pollTimeoutSecs=1800)
            elapsed = (time.time() - start)
            print 'GBM training completed in', elapsed, 'seconds. On dataset: ', testFilename
            print 'This is crazy!'
            gbmPredictCMResult = h2o.nodes[0].predict_confusion_matrix(actual=parseTestResult['destination_key'], vactual=vresponse, predict=predictKey, pactual='predict')
            gbmTestView = gbmPredictCMResult
            print 'gbmTestView:', h2o.dump_json(gbmTestView)
            errsLast = gbmTestView['gbm_model']['errs'][(-1)]
            print "GBM 'errsLast'", errsLast
            xList.append(max_depth)
            eList.append(errsLast)
            sList.append(elapsed)
        h2o.beta_features = False
        plotit(xList, eList, sList)
