{
  SpeeDRFModel rf_model=null;
  try {
    source.read_lock(self());
    if (validation != null && validation != source)     validation.read_lock(self());
    buildForest();
    if (n_folds > 0)     CrossValUtils.crossValidate(this);
  }
 catch (  JobCancelledException ex) {
    rf_model=UKV.get(dest());
    state=JobState.CANCELLED;
    rf_model.get_params().state=state;
    Log.info("Random Forest was cancelled.");
  }
catch (  Exception ex) {
    ex.printStackTrace();
    throw new RuntimeException(ex);
  }
 finally {
    source.unlock(self());
    if (validation != null && validation != source)     validation.unlock(self());
    remove();
    state=UKV.<Job>get(self()).state;
    new TAtomic<SpeeDRFModel>(){
      @Override public SpeeDRFModel atomic(      SpeeDRFModel m){
        if (m != null)         m.get_params().state=state;
        return m;
      }
    }
.invoke(dest());
    emptyLTrash();
    cleanup();
  }
}
