{
  try {
    source.read_lock(self());
    float[] samps=new float[(int)(response.max() - response.min() + 1)];
    for (int i=0; i < samps.length; ++i)     samps[i]=67;
    if (strata_samples != null) {
      int[] _samples=new int[(int)(response.max() - response.min() + 1)];
      for (int i=0; i < _samples.length; ++i)       _samples[i]=67;
      if (class_weights == null) {
        strata_samples=_samples;
      }
      if (strata_samples.length > _samples.length) {
        System.arraycopy(_samples,0,strata_samples,0,_samples.length);
        strata_samples=_samples;
      }
      if (strata_samples.length < _samples.length) {
        System.arraycopy(strata_samples,0,_samples,0,strata_samples.length);
        strata_samples=_samples;
      }
      for (int i=0; i < _samples.length; ++i) {
        samps[i]=(float)strata_samples[i];
      }
    }
    if (class_weights != null) {
      double[] weights=new double[(int)(response.max() - response.min() + 1)];
      for (int i=0; i < weights.length; ++i)       weights[i]=1.0;
      if (class_weights == null) {
        class_weights=weights;
      }
      if (class_weights.length > weights.length) {
        System.arraycopy(class_weights,0,weights,0,weights.length);
        class_weights=weights;
      }
      if (class_weights.length < weights.length) {
        System.arraycopy(class_weights,0,weights,0,class_weights.length);
        class_weights=weights;
      }
    }
    if (seed == -1) {
      seed=_seedGenerator.nextLong();
    }
    Frame train=FrameTask.DataInfo.prepareFrame(source,response,ignored_cols,false,false,false);
    Frame test=null;
    if (validation != null) {
      test=FrameTask.DataInfo.prepareFrame(validation,validation.vecs()[source.find(response)],ignored_cols,false,false,false);
    }
    SpeeDRFModel model=new SpeeDRFModel(dest(),self(),source._key,train,response,new Key[0],seed,getCMDomain());
    model.nbins=bin_limit;
    if (mtry == -1) {
      model.mtry=(int)Math.floor(Math.sqrt(source.numCols()));
    }
 else {
      model.mtry=mtry;
    }
    model.features=source.numCols();
    model.sampling_strategy=sampling_strategy;
    model.sample=(float)sample;
    model.weights=class_weights;
    model.time=0;
    model.N=num_trees;
    model.strata_samples=samps;
    model.max_depth=max_depth;
    model.oobee=validation == null && oobee;
    model.statType=stat_type;
    model.test_frame=test;
    model.testKey=validation == null ? null : validation._key;
    model.importance=importance;
    return model;
  }
  finally {
    source.unlock(self());
  }
}
