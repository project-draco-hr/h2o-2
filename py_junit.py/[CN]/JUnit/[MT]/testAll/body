def testAll(self):
    try:
        h2o.build_cloud(node_count=2)
        (ps, stdout, stderr) = h2o.spawn_cmd('junit', ['java', ('-Dh2o.arg.ice_root=' + h2o.tmp_dir('ice.')), ('-Dh2o.arg.name=' + h2o.cloud_name()), ('-Dh2o.arg.ip=' + h2o.get_ip_address()), '-ea', '-jar', h2o.find_file('target/h2o.jar'), '-mainClass', 'org.junit.runner.JUnitCore', 'hex.GLMTest', 'hex.KMeansTest', 'hex.MinorityClassTest', 'hex.rf.RandomForestTest', 'water.AppendKeyTest', 'water.AutoSerialTest', 'water.KVTest', 'water.KeyToString', 'water.api.RStringTest', 'water.exec.ExprTest', 'water.exec.RBigDataTest', 'water.parser.DatasetCornerCasesTest', 'water.parser.ParserTest'])
        rc = ps.wait(None)
        out = file(stdout).read()
        err = file(stderr).read()
        if (rc is None):
            ps.terminate()
            raise Exception(('junit timed out.\nstdout:\n%s\n\nstderr:\n%s' % (out, err)))
        elif (rc != 0):
            raise Exception(('junit failed.\nstdout:\n%s\n\nstderr:\n%s' % (out, err)))
    finally:
        h2o.tear_down_cloud()
