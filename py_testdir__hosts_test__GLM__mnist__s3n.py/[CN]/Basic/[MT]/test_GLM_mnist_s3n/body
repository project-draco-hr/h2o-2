def test_GLM_mnist_s3n(self):
    URI = 's3n://home-0xdiag-datasets/mnist/'
    csvFilelist = [('mnist_training.csv.gz', 'mnist_testing.csv.gz', 600), ('mnist_testing.csv.gz', 'mnist_training.csv.gz', 600), ('mnist_training.csv.gz', 'mnist_training.csv.gz', 600)]
    importHDFSResult = h2o.nodes[0].import_hdfs(URI)
    s3nFullList = importHDFSResult['succeeded']
    self.assertGreater(len(s3nFullList), 1, 'Should see more than 1 files in s3n?')
    trial = 0
    for (trainCsvFilename, testCsvFilename, timeoutSecs) in csvFilelist:
        trialStart = time.time()
        s3nKey = (URI + testCsvFilename)
        testKey2 = (((testCsvFilename + '_') + str(trial)) + '.hex')
        print 'Loading s3n key: ', s3nKey, 'thru HDFS'
        start = time.time()
        parseResult = h2o.nodes[0].parse(s3nKey, testKey2, timeoutSecs=timeoutSecs, retryDelaySecs=10, pollTimeoutSecs=120)
        elapsed = (time.time() - start)
        print 'parse end on ', s3nKey, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseResult['destination_key']
        s3nKey = (URI + trainCsvFilename)
        trainKey2 = (((trainCsvFilename + '_') + str(trial)) + '.hex')
        print 'Loading s3n key: ', s3nKey, 'thru HDFS'
        start = time.time()
        parseResult = h2o.nodes[0].parse(s3nKey, trainKey2, timeoutSecs=timeoutSecs, retryDelaySecs=10, pollTimeoutSecs=120)
        elapsed = (time.time() - start)
        print 'parse end on ', s3nKey, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseResult['destination_key']
        y = 0
        print 'y:'
        x = h2o_glm.goodXFromColumnInfo(y, key=parseResult['destination_key'], timeoutSecs=300)
        print 'x:', x
        kwargs = {'x': x, 'y': y, 'family': 'gaussian', 'lambda': 1e-05, 'alpha': 0.5, 'max_iter': 5, 'thresholds': 0.5, 'n_folds': 1, 'weight': 1, 'beta_epsilon': 0.0001, }
        timeoutSecs = 1800
        start = time.time()
        glm = h2o_cmd.runGLMOnly(parseResult=parseKey, timeoutSecs=timeoutSecs, pollTimeoutsecs=60, **kwargs)
        elapsed = (time.time() - start)
        print 'GLM completed in', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        h2o_glm.simpleCheckGLM(self, glm, None, **kwargs)
        GLMModel = glm['GLMModel']
        modelKey = GLMModel['model_key']
        kwargs = {'x': x, 'y': y, 'thresholds': 0.5, }
        start = time.time()
        glmScore = h2o_cmd.runGLMScore(key=testKey2, model_key=modelKey, thresholds='0.5', timeoutSecs=60)
        print 'GLMScore in', (time.time() - start), 'secs', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        h2o.verboseprint(h2o.dump_json(glmScore))
