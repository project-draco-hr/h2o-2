{
  long start=System.currentTimeMillis();
  CalcSumsTask lr1=new CalcSumsTask();
  lr1._arykey=ary._key;
  lr1._colA=colA;
  lr1._colB=colB;
  lr1.invoke(ary._key);
  long pass1=System.currentTimeMillis();
  final long n=lr1._rows;
  CalcSquareErrorsTasks lr2=new CalcSquareErrorsTasks();
  lr2._arykey=ary._key;
  lr2._colA=colA;
  lr2._colB=colB;
  lr2._Xbar=lr1._sumX / n;
  lr2._Ybar=lr1._sumY / n;
  lr2.invoke(ary._key);
  long pass2=System.currentTimeMillis();
  CalcRegressionTask lr3=new CalcRegressionTask();
  lr3._arykey=ary._key;
  lr3._colA=colA;
  lr3._colB=colB;
  lr3._beta1=lr2._XYbar / lr2._XXbar;
  lr3._beta0=lr2._Ybar - lr3._beta1 * lr2._Xbar;
  lr3._Ybar=lr2._Ybar;
  lr3.invoke(ary._key);
  long pass3=System.currentTimeMillis();
  long df=n - 2;
  double R2=lr3._ssr / lr2._YYbar;
  double svar=lr3._rss / df;
  double svar1=svar / lr2._XXbar;
  double svar0=svar / n + lr2._Xbar * lr2._Xbar * svar1;
  LRResult result=new LRResult(ary._key.toString(),ary._cols[colA]._name,ary._cols[colB]._name,pass1 - start,pass2 - pass1,pass3 - pass2,n,lr3._beta0,lr3._beta1,R2,Math.sqrt(svar0),Math.sqrt(svar1),lr2._YYbar,lr3._rss,lr3._ssr);
  return result;
}
