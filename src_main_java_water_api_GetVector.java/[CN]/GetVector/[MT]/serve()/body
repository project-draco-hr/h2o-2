{
  JsonObject result=new JsonObject();
  try {
    ValueArray va=_key.value();
    VAIterator iter=new VAIterator(va._key,0,0);
    long maxRows=Math.min(MAX_REQUEST_ITEMS / iter._ary.numCols(),iter._ary.numRows());
    maxRows=Math.min(_maxRows.value(),maxRows);
    JsonArray columns=new JsonArray();
    JsonArray[] cols=new JsonArray[iter._ary.numCols()];
    for (int i=0; i < cols.length; ++i)     cols[i]=new JsonArray();
    for (int j=0; j < maxRows; ++j) {
      iter.next();
      for (int i=0; i < cols.length; ++i)       cols[i].add(iter.isNA(i) ? new JsonPrimitive("NaN") : new JsonPrimitive(String.valueOf(iter.datad(i))));
    }
    for (int i=0; i < cols.length; ++i) {
      JsonObject col=new JsonObject();
      String name=iter._ary._cols[i]._name;
      col.addProperty(Constants.NAME,(name == null || name.isEmpty()) ? String.valueOf(i) : name);
      col.add(Constants.CONTENTS,cols[i]);
      columns.add(col);
    }
    result.addProperty(KEY,va._key.toString());
    result.add(COLS,columns);
    result.addProperty(Constants.NUM_ROWS,iter._ary.numRows());
    result.addProperty(Constants.NUM_COLS,iter._ary.numCols());
    result.addProperty(Constants.SENT_ROWS,maxRows);
  }
 catch (  Exception e) {
    Log.err(e);
    return Response.error(e.toString());
  }
  return Response.done(result);
}
