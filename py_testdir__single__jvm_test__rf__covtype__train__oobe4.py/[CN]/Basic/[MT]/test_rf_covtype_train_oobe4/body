def test_rf_covtype_train_oobe4(self):
    print '\nUse randomFilter to sample the dataset, then slice it'
    importFolderPath = 'standard'
    csvFilename = 'covtype.data'
    csvPathname = ((importFolderPath + '/') + csvFilename)
    hex_key = (csvFilename + '.hex')
    print '\nUsing header=0 on the normal covtype.data'
    parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, hex_key=hex_key, header=0, timeoutSecs=100)
    inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
    print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
    num_rows = inspect['num_rows']
    pct10 = int((num_rows * 0.1))
    rowsForPct = [(i * pct10) for i in range(0, 11)]
    last10 = (num_rows - rowsForPct[9])
    rowsForPct[10] = num_rows
    rowsForPct[0] = rowsForPct[10]
    expectTrainPctRightList = [0, 93, 94, 94, 94, 94, 94, 94, 94, 94]
    expectScorePctRightList = [0, 75, 77, 79, 83, 86, 89, 91, 93, 97]
    print 'Creating the key of the last 10% data, for scoring'
    dataKeyTest = 'rTest'
    dataKeyTrain = 'rTrain'
    execExpr = ((dataKeyTest + '=') + hex_key)
    h2o_exec.exec_expr(None, execExpr, resultKey=dataKeyTest, timeoutSecs=10)
    execExpr = (((((dataKeyTrain + '=randomFilter(') + hex_key) + ',') + str(rowsForPct[9])) + ',12345)')
    print "This generation of test/train isn't stats-legal since they overlap"
    execExpr = ((dataKeyTrain + '=') + hex_key)
    h2o_exec.exec_expr(None, execExpr, resultKey=dataKeyTrain, timeoutSecs=10)
    actualTrainPctRightList = [0]
    actualScorePctRightList = [0]
    for trial in range(1, 10):
        rowsToUse = rowsForPct[(trial % 10)]
        resultKey = ('r' + str(trial))
        execExpr = (((((resultKey + '=slice(') + dataKeyTrain) + ',1,') + str(rowsToUse)) + ')')
        print 'execExpr:', execExpr
        h2o_exec.exec_expr(None, execExpr, resultKey=resultKey, timeoutSecs=10)
        parseResult['destination_key'] = resultKey
        kwargs = paramDict.copy()
        timeoutSecs = (30 + (kwargs['ntree'] * 20))
        start = time.time()
        kwargs['out_of_bag_error_estimate'] = 1
        kwargs['model_key'] = ('model_' + str(trial))
        rfv = h2o_cmd.runRF(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
        elapsed = (time.time() - start)
        print 'RF end on ', csvPathname, 'took', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
        oobeTrainPctRight = (100 * (1.0 - rfv['confusion_matrix']['classification_error']))
        self.assertAlmostEqual(oobeTrainPctRight, expectTrainPctRightList[trial], msg=('OOBE: pct. right for %s pct. training not close enough %6.2f %6.2f' % ((trial * 10), oobeTrainPctRight, expectTrainPctRightList[trial])), delta=1)
        actualTrainPctRightList.append(oobeTrainPctRight)
        print 'Now score on the last 10%'
        model_key = rfv['model_key']
        kwargs.pop('model_key', None)
        data_key = rfv['data_key']
        kwargs.pop('data_key', None)
        ntree = rfv['ntree']
        kwargs.pop('ntree', None)
        kwargs['iterative_cm'] = 1
        kwargs['out_of_bag_error_estimate'] = 0
        rfv = h2o_cmd.runRFView(None, dataKeyTest, model_key, ntree, timeoutSecs, retryDelaySecs=1, print_params=True, **kwargs)
        h2o.nodes[0].generate_predictions(model_key=model_key, data_key=dataKeyTest)
        fullScorePctRight = (100 * (1.0 - rfv['confusion_matrix']['classification_error']))
        self.assertAlmostEqual(fullScorePctRight, expectScorePctRightList[trial], msg=('Full: pct. right for scoring after %s pct. training not close enough %6.2f %6.2f' % ((trial * 10), fullScorePctRight, expectScorePctRightList[trial])), delta=1)
        actualScorePctRightList.append(fullScorePctRight)
        print 'Trial #', trial, 'completed', ('using %6.2f' % ((rowsToUse * 100.0) / num_rows)), 'pct. of all rows'
    actualDelta = [abs((a - b)) for (a, b) in zip(expectTrainPctRightList, actualTrainPctRightList)]
    niceFp = ['{0:0.2f}'.format(i) for i in actualTrainPctRightList]
    print 'actualTrainPctRightList =', niceFp
    niceFp = ['{0:0.2f}'.format(i) for i in actualDelta]
    print 'actualDelta =', niceFp
    actualDelta = [abs((a - b)) for (a, b) in zip(expectScorePctRightList, actualScorePctRightList)]
    niceFp = ['{0:0.2f}'.format(i) for i in actualScorePctRightList]
    print 'actualScorePctRightList =', niceFp
    niceFp = ['{0:0.2f}'.format(i) for i in actualDelta]
    print 'actualDelta =', niceFp
