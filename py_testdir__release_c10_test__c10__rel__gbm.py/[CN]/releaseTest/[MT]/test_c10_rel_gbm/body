def test_c10_rel_gbm(self):
    print "Since the python is not necessarily run as user=0xcust..., can't use a  schema='put' here"
    print 'Want to be able to run python as jenkins'
    print "I guess for big 0xcust files, we don't need schema='put'"
    print 'For files that we want to put (for testing put), we can get non-private files'
    importFolderPath = '/mnt/0xcustomer-datasets/c3'
    testFilename = 'classification1Test.txt'
    testPathname = ((importFolderPath + '/') + testFilename)
    start = time.time()
    parseTestResult = h2i.import_parse(path=testPathname, schema='local', timeoutSecs=500, doSummary=False)
    print 'Parse of', parseTestResult['destination_key'], 'took', (time.time() - start), 'seconds'
    importFolderPath = '/mnt/0xcustomer-datasets/c3'
    trainFilename = 'classification1Train.txt'
    trainPathname = ((importFolderPath + '/') + trainFilename)
    start = time.time()
    parseTrainResult = h2i.import_parse(path=trainPathname, schema='local', timeoutSecs=500, doSummary=False)
    print 'Parse of', parseTrainResult['destination_key'], 'took', (time.time() - start), 'seconds'
    start = time.time()
    inspect = h2o_cmd.runInspect(None, parseTrainResult['destination_key'], timeoutSecs=500)
    print 'Inspect:', parseTrainResult['destination_key'], 'took', (time.time() - start), 'seconds'
    h2o_cmd.infoFromInspect(inspect, trainPathname)
    summaryResult = h2o_cmd.runSummary(key=parseTrainResult['destination_key'])
    h2o_cmd.infoFromSummary(summaryResult, noPrint=False)
    x = [6, 7, 8, 10, 12, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70]
    response = 'outcome'
    ntrees = 100
    params = {'learn_rate': 0.2, 'nbins': 1024, 'ntrees': ntrees, 'max_depth': 5, 'min_rows': 10, 'response': response, 'cols': x, }
    print 'Using these parameters for GBM: ', params
    kwargs = params.copy()
    h2o.beta_features = True
    modelKey = 'GBMModelKey'
    timeoutSecs = 900
    trainStart = time.time()
    gbmTrainResult = h2o_cmd.runGBM(parseResult=parseTrainResult, noPoll=True, timeoutSecs=timeoutSecs, destination_key=modelKey, **kwargs)
    if h2o.beta_features:
        h2j.pollWaitJobs(timeoutSecs=timeoutSecs, pollTimeoutSecs=timeoutSecs)
    trainElapsed = (time.time() - trainStart)
    print 'GBM training completed in', trainElapsed, 'seconds. On dataset: ', trainFilename
    gbmTrainView = h2o_cmd.runGBMView(model_key=modelKey)
    errsLast = gbmTrainView['gbm_model']['errs'][(-1)]
    print "GBM 'errsLast'", errsLast
    cm = gbmTrainView['gbm_model']['cm']
    pctWrongTrain = h2o_gbm.pp_cm_summary(cm)
    print 'Last line of this cm might be NAs, not CM'
    print '\nTrain\n==========\n'
    print h2o_gbm.pp_cm(cm)
    predictKey = 'Predict.hex'
    h2o_cmd.runInspect(key=parseTestResult['destination_key'])
    start = time.time()
    gbmTestResult = h2o_cmd.runPredict(data_key=parseTestResult['destination_key'], model_key=modelKey, destination_key=predictKey, timeoutSecs=timeoutSecs)
    if h2o.beta_features:
        h2j.pollWaitJobs(timeoutSecs=timeoutSecs, pollTimeoutSecs=timeoutSecs)
    elapsed = (time.time() - start)
    print 'GBM predict completed in', elapsed, 'seconds. On dataset: ', testFilename
    print 'This is crazy!'
    gbmPredictCMResult = h2o.nodes[0].predict_confusion_matrix(actual=parseTestResult['destination_key'], vactual=response, predict=predictKey, vpredict='predict')
    cm = gbmPredictCMResult['cm']
    pctWrong = h2o_gbm.pp_cm_summary(cm)
    print 'Last line of this cm is really NAs, not CM'
    print '\nTest\n==========\n'
    print h2o_gbm.pp_cm(cm)
