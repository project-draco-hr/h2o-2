{
  Matrix myGram=new Matrix(tsk._gram.getXX());
  SingularValueDecomposition mySVD=myGram.svd();
  double[] Sval=mySVD.getSingularValues();
  double[][] eigVec=mySVD.getV().getArray();
  double[] sdev=new double[Sval.length];
  double totVar=0;
  double dfcorr=dinfo._adaptedFrame.numRows() / (dinfo._adaptedFrame.numRows() - 1.0);
  for (int i=0; i < Sval.length; i++) {
    Sval[i]=dfcorr * Sval[i];
    sdev[i]=Math.sqrt(Sval[i]);
    totVar+=Sval[i];
  }
  double[] propVar=new double[Sval.length];
  double[] cumVar=new double[Sval.length];
  for (int i=0; i < Sval.length; i++) {
    propVar[i]=Sval[i] / totVar;
    cumVar[i]=i == 0 ? propVar[0] : cumVar[i - 1] + propVar[i];
  }
  Key dataKey=input("source") == null ? null : Key.make(input("source"));
  int ncomp=Math.min(getNumPC(sdev,tolerance),max_pc);
  PCAParams params=new PCAParams(max_pc,tolerance,standardize);
  return new PCAModel(destination_key,dataKey,dinfo,tsk,sdev,propVar,cumVar,eigVec,mySVD.rank(),ncomp,params);
}
