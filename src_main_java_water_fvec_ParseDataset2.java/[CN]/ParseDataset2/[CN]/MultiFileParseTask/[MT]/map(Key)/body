{
  ByteVec vec=UKV.get(key);
  Compression cpr=guessCompressionMethod(vec);
  CsvParser.Setup setup=csvGuessValue(vec,_setup._separator,cpr);
  if (!_setup.equals(setup)) {
    _parserr="Conflicting file layouts, expecting: " + _setup + " but found "+ setup;
    return;
  }
  boolean has_hdr=_setup._header && setup._header;
  if (has_hdr) {
    for (int i=0; i < setup._data[0].length; ++i)     has_hdr&=setup._data[0][i].equalsIgnoreCase(_setup._data[0][i]);
    if (!has_hdr)     setup=new CsvParser.Setup(setup,false);
  }
  final int ncols=_setup._data[0].length;
  _cols=new AppendableVec[ncols];
  for (int i=0; i < ncols; i++)   _cols[i]=new AppendableVec(Key.make(key.toString() + "C" + i));
  try {
switch (cpr) {
case NONE:
      throw H2O.unimpl();
case ZIP:
{
      ZipInputStream zis=new ZipInputStream(vec.openStream());
      ZipEntry ze=zis.getNextEntry();
      if (ze != null && !ze.isDirectory())       streamParse(key,zis,setup);
 else       zis.close();
      break;
    }
case GZIP:
  streamParse(key,new GZIPInputStream(vec.openStream()),setup);
break;
}
}
 catch (IOException ioe) {
_parserr=ioe.toString();
return;
}
}
