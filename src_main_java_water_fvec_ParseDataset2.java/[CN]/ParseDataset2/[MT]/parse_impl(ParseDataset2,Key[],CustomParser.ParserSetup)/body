{
  UKV.remove(job.dest());
  if (fkeys.length == 0) {
    job.cancel();
    return;
  }
  ByteVec vec=(ByteVec)getVec(fkeys[0]);
  Compression compression=guessCompressionMethod(vec);
  byte sep=setup == null ? CsvParser.NO_SEPARATOR : setup._separator;
  if (setup == null || setup._data == null || setup._data[0] == null) {
    if (setup == null || setup._pType == CustomParser.ParserType.AUTO)     setup=ParseDataset.guessSetup(DKV.get(fkeys[0]));
 else switch (setup._pType) {
case CSV:
      setup=CsvParser.guessSetup(DKV.get(fkeys[0]).getFirstBytes(),sep);
    break;
case SVMLight:
  throw H2O.unimpl();
default :
throw H2O.unimpl();
}
}
MultiFileParseTask uzpt=new MultiFileParseTask(setup,job._progress).invoke(fkeys);
if (uzpt._parserr != null) throw new ParseException(uzpt._parserr);
int[] ecols=uzpt.enumCols();
String[] names=new String[uzpt._vecs.length];
for (int i=0; i < names.length; i++) names[i]=setup._header ? setup._data[0][i] : ("" + i);
if (ecols != null && ecols.length > 0) {
Enum[] enums=EnumFetchTask.fetchEnums(uzpt._eKey,ecols);
for (int i : ecols) uzpt._vecs[i]._domain=enums[i].computeColumnDomain();
String[][] ds=new String[ecols.length][];
for (int i=0; i < ecols.length; ++i) ds[i]=uzpt._vecs[ecols[i]]._domain;
Vec[] evecs=new Vec[ecols.length];
for (int i=0; i < evecs.length; ++i) evecs[i]=uzpt._vecs[ecols[i]];
new EnumUpdateTask(ds,uzpt._eKey,ecols).doAll(evecs);
}
UKV.put(job.dest(),new Frame(names,uzpt._vecs));
job.remove();
}
