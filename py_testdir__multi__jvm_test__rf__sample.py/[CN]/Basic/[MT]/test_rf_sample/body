def test_rf_sample(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    csvFilename = 'syn_ints.csv'
    csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
    headerData = 'ID,CAPSULE,AGE,RACE,DPROS,DCAPS,PSA,VOL,GLEASON'
    print 'just going to see if rf is doing the sampling right for one tree on 100000 rows'
    rList = rand_rowData()
    totalRows = 10000
    write_syn_dataset(csvPathname, totalRows, headerData, rList)
    for trial in range(2):
        key = ((csvFilename + '_') + str(trial))
        key2 = (((csvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        timeoutSecs = 30
        parseResult = h2o_cmd.parseFile(csvPathname=csvPathname, key=key, key2=key2, timeoutSecs=timeoutSecs, pollTimeoutSecs=30, header=1)
        print 'parse end on ', csvPathname, 'took', (time.time() - start), 'seconds'
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
        kwargs = {'sample': 75, 'depth': 25, 'ntree': 1, }
        start = time.time()
        rfv = h2o_cmd.runRFOnly(parseResult=parseResult, timeoutSecs=30, **kwargs)
        elapsed = (time.time() - start)
        print ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
        print 'trial #', trial, 'totalRows:', totalRows, 'parse end on ', csvFilename, 'took', (time.time() - start), 'seconds'
        cm = rfv['confusion_matrix']
        rows_skipped = cm['rows_skipped']
        sample = kwargs['sample']
        rowsUsed = ((sample * totalRows) / 100)
        rowsNotUsed = (totalRows - rowsUsed)
        h2o.check_sandbox_for_errors()
