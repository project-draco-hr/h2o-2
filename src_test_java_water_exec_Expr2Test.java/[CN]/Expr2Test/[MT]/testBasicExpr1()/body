{
  Key dest=Key.make("h.hex");
  try {
    File file=TestUtil.find_test_file("smalldata/tnc3_10.csv");
    Key fkey=NFSFileVec.make(file);
    ParseDataset2.parse(dest,new Key[]{fkey});
    checkStr("1.23",1.23);
    checkStr(" 1.23 + 2.34",3.57);
    checkStr(" 1.23 + 2.34 * 3",8.25);
    checkStr(" 1.23 2.34","Junk at end of line\n" + " 1.23 2.34\n" + "      ^--^\n");
    checkStr("1.23 < 2.34",1);
    checkStr("1.23 <=2.34",1);
    checkStr("1.23 > 2.34",0);
    checkStr("1.23 >=2.34",0);
    checkStr("1.23 ==2.34",0);
    checkStr("1.23 !=2.34",1);
    checkStr("1 & 2",1);
    checkStr("NA&0",0);
    checkStr("0&NA",0);
    checkStr("NA&1",Double.NaN);
    checkStr("1&NA",Double.NaN);
    checkStr("1|NA",1);
    checkStr("1&&2",1);
    checkStr("1||0",1);
    checkStr("NA||1",1);
    checkStr("NA||0",Double.NaN);
    checkStr("0||NA",Double.NaN);
    checkStr("!1",0);
    checkStr("(!)(1)",0);
    checkStr("(!!)(1)","Arg 'x' typed as dblary but passed dblary(dblary)\n" + "(!!)(1)\n" + " ^-^\n");
    checkStr("-1",-1);
    checkStr("-(1)",-1);
    checkStr("(-)(1)","Passed 1 args but expected 2\n" + "(-)(1)\n" + "   ^--^\n");
    checkStr("-T",-1);
    checkStr("* + 1","Arg 'x' typed as dblary but passed anyary{dblary,dblary,}(dblary,dblary)\n" + "* + 1\n" + "^----^\n");
    checkStr("+(1.23,2.34)","Missing ')'\n" + "+(1.23,2.34)\n" + "  ^---^\n");
    checkStr("+(1.23)",1.23);
    checkStr("1=2","Junk at end of line\n" + "1=2\n" + " ^^\n");
    checkStr("x","Unknown var x\n" + "x\n" + "^^\n");
    checkStr("x+2","Unknown var x\n" + "x+2\n" + "^^\n");
    checkStr("2+x","Missing expr or unknown ID\n" + "2+x\n" + "  ^\n");
    checkStr("x=1",1);
    checkStr("x<-1",1);
    checkStr("x=3;y=4",4);
    checkStr("x=mean");
    checkStr("x=mean=3",3);
    checkStr("x=mean(c(3))",3);
    checkStr("x=mean+3","Arg 'x' typed as dblary but passed dbl(ary)\n" + "x=mean+3\n" + "  ^-----^\n");
    checkStr("h.hex");
    checkStr("h.hex[2,3]",1);
    checkStr("h.hex[2,+]","Must be scalar or array\n" + "h.hex[2,+]\n" + "        ^-^\n");
    checkStr("h.hex[2+4,-4]");
    checkStr("h.hex[1,-1]; h.hex[2,-2]; h.hex[3,-3]");
    checkStr("h.hex[2+3,h.hex]","Selector must be a single column: {pclass,name,sex,age,sibsp,parch,ticket,fare,cabin,embarked,boat,body,home.dest,survived}, 1.1 KB\n" + "Chunk starts: {0,}");
    checkStr("h.hex[2,]");
    checkStr("h.hex[,3]");
    checkStr("h.hex+1");
    checkStr("h.hex-h.hex");
    checkStr("1.23+(h.hex-h.hex)");
    checkStr("(1.23+h.hex)-h.hex");
    checkStr("min(h.hex,1+2)",0);
    checkStr("max(h.hex,1+2)",211.3375);
    checkStr("min.na.rm(h.hex,NA)",0);
    checkStr("max.na.rm(h.hex,NA)",211.3375);
    checkStr("min.na.rm(c(NA, 1), -1)",-1);
    checkStr("max.na.rm(c(NA, 1), -1)",1);
    checkStr("max(c(Inf,1),  2 )",Double.POSITIVE_INFINITY);
    checkStr("min(c(Inf,1),-Inf)",Double.NEGATIVE_INFINITY);
    checkStr("is.na(h.hex)");
    checkStr("sum(is.na(h.hex))",0);
    checkStr("nrow(h.hex)*3",30);
    checkStr("h.hex[nrow(h.hex)-1,ncol(h.hex)-1]");
    checkStr("x=1;x=h.hex");
    checkStr("a=h.hex");
    checkStr("(h.hex+1)<-2","Junk at end of line\n" + "(h.hex+1)<-2\n" + "         ^-^\n");
    checkStr("h.hex[nrow(h.hex=1),]","Arg 'x' typed as ary but passed dbl\n" + "h.hex[nrow(h.hex=1),]\n" + "          ^--------^\n");
    checkStr("h.hex[{h.hex=10},]");
    checkStr("h.hex[2,3]<-4;",4);
    checkStr("c(1,3,5)");
    checkStr("h.hex[,c(1,3,5)]");
    checkStr("h.hex[c(1,3,5),]");
    checkStr("a=c(11,22,33,44,55,66); a[c(2,6,1),]");
    checkStr("c(1,0)&c(2,3)");
    checkStr("c(2,NA)&&T",1);
    checkStr("-(x = 3)",-3);
    checkStr("x<-+");
    checkStr("x<-+;x(2)");
    checkStr("x<-+;x(1,2)",3);
    checkStr("x<-*;x(2,3)",6);
    checkStr("x=c(0,1);!x+1");
    checkStr("x=c(1,-2);-+---x");
    checkStr("x=c(1,-2);--!--x");
    checkStr("!(y=c(3,4))");
    checkStr("!x!=1");
    checkStr("(!x)!=1");
    checkStr("1+x^2");
    checkStr("1+x**2");
    checkStr("x + 2/y");
    checkStr("x + (2/y)");
    checkStr("-x + y");
    checkStr("-(x + y)");
    checkStr("-x % y");
    checkStr("-(x % y)");
    checkStr("T|F&F",1);
    checkStr("T||F&&F",1);
    checkStr("function(=){x+1}(2)");
    checkStr("function(x,=){x+1}(2)");
    checkStr("function(x,<-){x+1}(2)");
    checkStr("function(x,x){x+1}(2)");
    checkStr("function(x,y,z){x[]}(h.hex,1,2)");
    checkStr("function(x){x[]}(2)");
    checkStr("function(x){x+1}(2)",3);
    checkStr("function(x){y=x+y}(2)");
    checkStr("function(x){}(2)");
    checkStr("function(x){y=x*2; y+1}(2)",5);
    checkStr("function(x){y=1+2}(2)",3);
    checkStr("function(x){y=1+2;y=c(1,2)}");
    checkStr("c(1,c(2,3))");
    checkStr("a=c(1,Inf);c(2,a)");
    checkStr("sum(1,2,3)",6);
    checkStr("sum(c(1,3,5))",9);
    checkStr("sum(4,c(1,3,5),2,6)",21);
    checkStr("sum(1,h.hex,3)");
    checkStr("sum(c(NA,-1,1))",Double.NaN);
    checkStr("sum.na.rm(c(NA,-1,1))",0);
    checkStr("function(a){a[];a=1}");
    checkStr("a=1;a=2;function(x){x=a;a=3}");
    checkStr("a=h.hex;function(x){x=a;a=3;nrow(x)*a}(a)",30);
    checkStr("a=h.hex;a[,1]=(a[,1]==8)");
    checkStr("function(funy){function(x){funy(x)*funy(x)}}(sgn)(-2)",1);
    checkStr("h.hex[h.hex[,4]>30,]");
    checkStr("a=c(1,2,3);a[a[,1]>10,1]");
    checkStr("apply(h.hex,2,sum)");
    checkStr("y=5;apply(h.hex,2,function(x){x[]+y})");
    checkStr("apply(h.hex,2,function(x){x=1;h.hex})");
    checkStr("apply(h.hex,2,function(x){h.hex})");
    checkStr("apply(h.hex,2,function(x){sum(x)/nrow(x)})");
    checkStr("mean=function(x){apply(x,2,sum)/nrow(x)};mean(h.hex)");
    checkStr("ifelse(0,1,2)",2);
    checkStr("ifelse(0,h.hex+1,h.hex+2)");
    checkStr("ifelse(h.hex>3,99,h.hex)");
    checkStr("ifelse(0,+,*)(1,2)",2);
    checkStr("(0 ? + : *)(1,2)",2);
    checkStr("(1? h.hex : (h.hex+1))[1,2]",0);
    checkStr("apply(h.hex,2,function(x){total=sum(ifelse(is.na(x),0,x)); rcnt=nrow(x)-sum(is.na(x)); mean=total / rcnt; ifelse(is.na(x),mean,x)})");
    checkStr("factor(h.hex[,5])");
    checkStr("h.hex[,2]");
    checkStr("h.hex[,2]+1");
    checkStr("h.hex[,3]=3.3;h.hex");
    checkStr("h.hex[,3]=h.hex[,2]+1");
    checkStr("h.hex[,ncol(h.hex)+1]=4");
    checkStr("a=ncol(h.hex);h.hex[,c(a+1,a+2)]=5");
    checkStr("table(h.hex)");
    checkStr("table(h.hex[,5])");
    checkStr("table(h.hex[,c(2,7)])");
    checkStr("table(h.hex[,c(2,9)])");
    checkStr("a=cbind(c(1,2,3), c(4,5,6))");
    checkStr("a[,1] = factor(a[,1])");
    checkStr("is.factor(a[,1])",1);
    checkStr("isTRUE(c(1,3))",0);
    checkStr("a=1;isTRUE(1)",1);
    checkStr("a=c(1,2);isTRUE(a)",0);
    checkStr("isTRUE(min)",0);
    checkStr("seq_len(0)");
    checkStr("seq_len(-1)");
    checkStr("seq_len(10)");
    checkStr("3 < 4 |  F &  3 > 4",1);
    checkStr("3 < 4 || F && 3 > 4",1);
    checkStr("h.hex[,4] != 29 || h.hex[,2] < 305 && h.hex[,2] < 81",Double.NaN);
    checkStr("a=0;x=0;y=0",0);
  }
  finally {
    Lockable.delete(dest);
  }
}
