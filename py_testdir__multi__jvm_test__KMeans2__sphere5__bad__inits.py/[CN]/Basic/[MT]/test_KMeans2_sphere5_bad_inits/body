def test_KMeans2_sphere5_bad_inits(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    csvFilename = 'syn_spheres100.csv'
    csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
    expectedCenters = write_spheres_dataset(csvPathname, CLUSTERS, SPHERE_PTS)
    print '\nStarting', csvFilename
    parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=(csvFilename + '.hex'))
    savedResults = []
    Result = collections.namedtuple('Result', 'trial clusters size cluster_variances error iterations normalized max_iter clustersSorted')
    sameAsBest = 1
    bestResult = Result(None, None, None, None, None, None, None, None, None)
    for trial in range(TRIALS):
        kwargs = {'normalize': 0, 'k': CLUSTERS, 'max_iter': MAX_ITER, 'initialization': INIT, 'destination_key': 'syn_spheres100.hex', 'seed': SEED, }
        timeoutSecs = 30
        start = time.time()
        kmeansResult = h2o_cmd.runKMeans(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
        elapsed = (time.time() - start)
        print 'kmeans end on ', csvPathname, 'took', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
        h2o_kmeans.simpleCheckKMeans(self, kmeansResult, **kwargs)
        model = kmeansResult['model']
        clusters = model['centers']
        size = model['size']
        cluster_variances = model['within_cluster_variances']
        error = int(model['total_within_SS'])
        iterations = model['iterations']
        normalized = model['normalized']
        max_iter = model['max_iter']
        clustersSorted = sorted(clusters)
        r = Result(trial, clusters, size, cluster_variances, error, iterations, normalized, max_iter, clustersSorted)
        savedResults.append(r)
        if (iterations >= (max_iter - 1)):
            raise Exception('KMeans unexpectedly took %s iterations..which was the full amount allowed by max_iter %s', (iterations, max_iter))
        print 'iterations', iterations
        print 'savedResults, error'
        print r.error
        if (bestResult.error and (r.error <= bestResult.error)):
            sameAsBest += 1
            if (sorted(r.size) != sorted(bestResult.size)):
                raise Exception(('Would expect that if two trials got the same error (rounded to int), the cluster sizes would likely be the same? %s %s' % (r.size, bestResult.size)))
        if (not bestResult.error):
            bestResult = r
        elif (r.error < bestResult.error):
            print 'Trial', r.trial, 'has a lower error', r.error, 'than current lowest error', bestResult.error
            print 'Using it for best now'
            bestResult = r
        print 'Trial #', trial, 'completed'
    print ('\nApparently, %s out of %s trials, got the same best error: %s  (lowest) ' % (sameAsBest, TRIALS, bestResult.error))
    print ('\nh2o best result was from trial %s, centers sorted:' % bestResult.trial)
    print bestResult.clustersSorted
    print '\ngenerated centers for comparison'
    print expectedCenters
    for (i, center) in enumerate(expectedCenters):
        a = center
        bb = bestResult.clustersSorted
        print 'bb:', bb
        b = bb[i]
        print '\nexpected:', a
        print 'h2o:', b
        aStr = ','.join(map(str, a))
        bStr = ','.join(map(str, b))
        iStr = str(i)
        self.assertAlmostEqual(a[0], b[0], delta=2, msg=(((((aStr + '!=') + bStr) + '. Sorted cluster center ') + iStr) + '; x not correct.'))
        self.assertAlmostEqual(a[1], b[1], delta=2, msg=(((((aStr + '!=') + bStr) + '. Sorted cluster center ') + iStr) + '; y not correct.'))
        self.assertAlmostEqual(a[2], b[2], delta=2, msg=(((((aStr + '!=') + bStr) + '. Sorted cluster center ') + iStr) + '; z not correct.'))
