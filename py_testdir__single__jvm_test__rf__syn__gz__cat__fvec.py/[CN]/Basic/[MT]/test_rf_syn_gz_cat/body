def test_rf_syn_gz_cat(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    REPL = 3
    tryList = [(REPL, 200, 50, 'cA', 600), (REPL, 300, 50, 'cA', 600), (REPL, 350, 50, 'cA', 600), (REPL, 375, 50, 'cB', 600), (REPL, 500, 300, 'cC', 600), (REPL, 500, 400, 'cD', 600), (REPL, 500, 500, 'cE', 600), (10, 50, 1600, 'cF', 600), (10, 50, 3200, 'cG', 600), (10, 50, 5000, 'cH', 600)]
    paramDict = {'ntrees': 10, 'destination_key': 'model_keyA', 'max_depth': 10, 'nbins': 100, 'sample_rate': 0.8, }
    trial = 0
    for (FILEREPL, rowCount, colCount, hex_key, timeoutSecs) in tryList:
        trial += 1
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + str(SEEDPERFILE)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        parseResult = make_datasetgz_and_parse(SYNDATASETS_DIR, csvFilename, hex_key, rowCount, colCount, FILEREPL, SEEDPERFILE, timeoutSecs)
        if DO_RF:
            paramDict['response'] = ('C' + str(colCount))
            paramDict['mtries'] = 2
            paramDict['seed'] = random.randint(0, sys.maxint)
            kwargs = paramDict.copy()
            start = time.time()
            rfView = h2o_cmd.runRF(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
            elapsed = (time.time() - start)
            print 'RF end on ', parseResult['destination_key'], 'took', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
            (classification_error, classErrorPctList, totalScores) = h2o_rf.simpleCheckRFView(rfv=rfView)
            algo = 'RF '
            l = '{:d} jvms, {:d}GB heap, {:s} {:s} {:6.2f} secs. trees: {:d} Error: {:6.2f}                     numRows: {:d} numCols: {:d} value_size_bytes: {:d}'.format(len(h2o.nodes), tryHeap, algo, parseResult['destination_key'], elapsed, kwargs['ntrees'], classification_error, parseResult['numRows'], parseResult['numCols'], parseResult['byteSize'])
            print l
            h2o.cloudPerfH2O.message(l)
        print 'Trial #', trial, 'completed'
