def write_syn_dataset(csvPathname, rowCount, colCount, expectedMin, expectedMax, SEEDPERFILE, sel):
    if (colCount != 1):
        raise Exception('only support colCount == 1 here right now %s', colCount)
    NUM_CASES = h2o_util.fp_format()
    if (sel and ((sel < 0) or (sel >= NUM_CASES))):
        raise Exception('sel used to select from possible fp formats is out of range: %s %s', (sel, NUM_CASES))
    dsf = open(csvPathname, 'w')
    expectedRange = (expectedMax - expectedMin)
    expectedFpSum = float(0)
    expectedUllSum = int(0)
    for row in range(rowCount):
        rowData = []
        for j in range(colCount):
            method = (row % CHUNKING_CNT)
            if (method == 1):
                value = (expectedMin + (random.random() * expectedRange))
            elif (method == 2):
                value = random.randint(1, 1000000.0)
            elif (method == 3):
                value = (5555555555555 + row)
            else:
                exp = random.randint(0, 120)
                value = (random.random() + (2 ** exp))
            r = random.randint(0, 4)
            if (DO_NEGATIVE and (r == 0)):
                value = ((-1) * value)
            if RANDOM_E_FP_FORMATS:
                s = h2o_util.fp_format(value, sel=None, only='e')
            else:
                s = h2o_util.fp_format(value, sel=sel, only='e')
            if DO_BUG:
                pass
            else:
                s = s.rstrip('0')
            fpResult = float(s)
            expectedUllSum ^= h2o_util.doubleToUnsignedLongLong(fpResult)
            expectedFpSum += fpResult
            rowData.append(s)
            rowDataCsv = ','.join(map(str, rowData))
            dsf.write((rowDataCsv + '\n'))
    dsf.close()
    expectedUllSum &= (~ (15 << 60))
    return (expectedUllSum, expectedFpSum)
