def test_c9_GLM_airlines_hdfs(self):
    h2o.beta_features = True
    files = [('datasets', 'airlines_all.csv', 'airlines_all.hex', 1800, 'IsDepDelayed')]
    for (importFolderPath, csvFilename, trainKey, timeoutSecs, response) in files:
        csvPathname = ((importFolderPath + '/') + csvFilename)
        start = time.time()
        parseResult = h2i.import_parse(path=csvPathname, schema='hdfs', hex_key=trainKey, timeoutSecs=timeoutSecs)
        elapsed = (time.time() - start)
        print 'parse end on ', csvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseResult['destination_key']
        params = {'lambda': 0.0001, 'alpha': 0.5, 'max_iter': 30, 'n_folds': 3, 'family': 'binomial', 'destination_key': 'GLMKEY', 'response': response, 'ignored_cols_by_name': 'CRSDepTime,CRSArrTime,ActualElapsedTime,CRSElapsedTime,AirTime,ArrDelay,DepDelay,TaxiIn,TaxiOut,Cancelled,CancellationCode,Diverted,CarrierDelay,WeatherDelay,NASDelay,SecurityDelay,LateAircraftDelay,IsArrDelayed', }
        kwargs = params.copy()
        timeoutSecs = 1800
        start = time.time()
        GLMResult = h2o_cmd.runGLM(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
        elapsed = (time.time() - start)
        print 'GLM training completed in', elapsed, 'seconds. On dataset: ', csvFilename
    h2i.delete_keys_at_all_nodes(timeoutSecs=600)
