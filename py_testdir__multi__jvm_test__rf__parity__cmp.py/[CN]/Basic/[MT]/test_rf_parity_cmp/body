def test_rf_parity_cmp(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    for x in [50000]:
        shCmdString = ((((('perl ' + h2o.find_file('syn_scripts/parity.pl')) + ' 128 4 ') + str(x)) + ' quad ') + SYNDATASETS_DIR)
        h2o.spawn_cmd_and_wait('parity.pl', shCmdString.split(), 4)
        csvFilename = (('parity_128_4_' + str(x)) + '_quad.data')

    def doBoth():
        h2o.verboseprint('Trial', trial)
        start = time.time()
        rfView = h2o_cmd.runRF(parseResult=parseResult, ntrees=ntrees, max_depth=40, response=response, timeoutSecs=600, retryDelaySecs=3)
        elapsed1 = (time.time() - start)
        (totalError1, classErrorPctList1, totalScores2) = h2o_rf.simpleCheckRFView(rfv=rfView)
        rfView = h2o_cmd.runSpeeDRF(parseResult=parseResult, ntrees=ntrees, max_depth=40, response=response, timeoutSecs=600, retryDelaySecs=3)
        elapsed2 = (time.time() - start)
        (totalError2, classErrorPctList2, totalScores2) = h2o_rf.simpleCheckRFView(rfv=rfView)
        print 'Checking that results are similar (within 20%)'
        print 'DRF2 then SpeeDRF'
        print "per-class variance is large..basically we can't check very well for this dataset"
        for (i, (j, k)) in enumerate(zip(classErrorPctList1, classErrorPctList2)):
            print ('classErrorPctList[%s]:i %s %s' % (i, j, k))
        print ('totalError: %s %s' % (totalError1, totalError2))
        self.assertAlmostEqual(totalError1, totalError2, delta=(0.2 * totalError2), msg='Comparing RF total error for DRF2 and SpeeDRF')
        print ('elapsed: %s %s' % (elapsed1, elapsed2))
        self.assertAlmostEqual(elapsed1, elapsed2, delta=(0.5 * elapsed2), msg='Comparing RF times for DRF2 and SpeeDRF')
    for trial in range(1):
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        hex_key = (((csvFilename + '_') + str(trial)) + '.hex')
        parseResult = h2o_cmd.parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=30, doSummary=False)
        inspect = h2o_cmd.runInspect(key=hex_key)
        numCols = inspect['numCols']
        numRows = inspect['numRows']
        response = ('C' + str(numCols))
        ntrees = 30
        doBoth()
        print '*****************************'
        print ('end # %s RF compare' % trial),
        print '*****************************'
        print 'Now change all cols to enums'
        for e in range(numCols):
            enumResult = h2o.nodes[0].to_enum(src_key=hex_key, column_index=(e + 1))
        doBoth()
        print '*********************************'
        print ('end # %s RF compare, with enums #' % trial),
        print '*********************************'
