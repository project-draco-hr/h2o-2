def test_GBM_parseTrain(self):
    h2o.beta_features = False
    bucket = 'home-0xdiag-datasets'
    files = [('standard', 'covtype.data', 'covtype.hex', 1800, 54)]
    for (importFolderPath, csvFilename, trainKey, timeoutSecs, response) in files:
        h2o.beta_features = False
        start = time.time()
        parseResult = h2i.import_parse(bucket=bucket, path=((importFolderPath + '/') + csvFilename), hex_key=trainKey, timeoutSecs=timeoutSecs)
        elapsed = (time.time() - start)
        print 'parse end on ', csvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseResult['destination_key']
        params = {'destination_key': 'GBMKEY', 'learn_rate': 0.1, 'ntrees': 1, 'max_depth': 1, 'min_rows': 1, 'response': response, }
        print 'Using these parameters for GBM: ', params
        kwargs = params.copy()
        h2o.beta_features = True
        GBMResult = h2o_cmd.runGBM(parseResult=parseResult, noPoll=True, timeoutSecs=timeoutSecs, **kwargs)
        h2j.pollWaitJobs(pattern='GBMKEY', timeoutSecs=1800, pollTimeoutSecs=1800)
        GBMView = h2o_cmd.runGBMView(model_key='GBMKEY')
        print GBMView['gbm_model']['errs']
