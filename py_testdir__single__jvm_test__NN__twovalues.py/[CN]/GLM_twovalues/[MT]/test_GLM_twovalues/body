def test_GLM_twovalues(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    csvFilename = 'syn_twovalues.csv'
    csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
    rowDataTrue = '1, 0, 65, 1, 2, 1, 1, 4, 1, 4, 1, 4'
    rowDataFalse = '0, 1, 0, -1, -2, -1, -1, -4, -1, -4, -1, -4'
    twoValueList = [('A', 'B', 0, 14), ('A', 'B', 1, 14), (0, 1, 0, 12), (0, 1, 1, 12), (0, 1, 'NaN', 12), (1, 0, 'NaN', 12), ((-1), 1, 0, 12), ((-1), 1, 1, 12), ((-10.0), 10.0, 10.0, 12), ((-10.0), 10.0, (-10.0), 12)]
    trial = 0
    for (outputTrue, outputFalse, case, coeffNum) in twoValueList:
        write_syn_dataset(csvPathname, 20, rowDataTrue, rowDataFalse, str(outputTrue), str(outputFalse))
        start = time.time()
        hex_key = ((csvFilename + '_') + str(trial))
        kwargs = {'case': case, 'y': 12, 'family': 'binomial', 'alpha': 0, 'beta_epsilon': 0.0002, }
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key)
        print ('using outputTrue: %s outputFalse: %s' % (outputTrue, outputFalse))
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
        response = (inspect['num_cols'] - 1)
        x = ','.join(map(str, range(response)))
        kwargs = {'response': response, 'cols': x, 'ignored_cols': None, 'classification': 1, 'validation': hex_key, 'activation': 'Tanh', 'hidden': 500, 'rate': 0.01, 'l2': 0.0001, 'epochs': 2, 'destination_key': 'a.hex', }
        for iteration in range(2):
            timeoutSecs = 600
            start = time.time()
            h2o.beta_features = True
            nnResult = h2o_cmd.runNNet(parseResult=parseResult, timeoutSecs=timeoutSecs, noPoll=True, **kwargs)
            h2o.beta_features = False
            print "Hack: neural net apparently doesn't support the right polling response yet?"
            h2o_jobs.pollWaitJobs(pattern=None, timeoutSecs=300, pollTimeoutSecs=10, retryDelaySecs=5)
            print 'FIX! need to add something that looks at the neural net result here?'
            print 'nnResult:', h2o.dump_json(nnResult)
            print 'trial #', trial, 'iteration #', iteration, 'NN end on ', csvFilename, 'took', (time.time() - start), 'seconds'
            h2o.check_sandbox_for_errors()
        trial += 1
