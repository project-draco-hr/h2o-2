def test_GLM_allstate_s3n_thru_hdfs(self):
    csvFilename = 'year1987.csv'
    csvPathname = csvFilename
    URI = 's3n://h2o-airlines-unpacked/'
    s3nKey = (URI + csvPathname)
    trialMax = 2
    for trial in range(trialMax):
        trialStart = time.time()
        importHDFSResult = h2o.nodes[0].import_hdfs(URI)
        s3nFullList = importHDFSResult['succeeded']
        self.assertGreater(len(s3nFullList), 8, "Didn't see more than 8 files in s3n?")
        storeView = h2o.nodes[0].store_view()
        for s in storeView['keys']:
            print '\nkey:', s['key']
            if ('rows' in s):
                print 'rows:', s['rows'], 'value_size_bytes:', s['value_size_bytes']
        key2 = (((csvFilename + '_') + str(trial)) + '.hex')
        print 'Loading s3n key: ', s3nKey, 'thru HDFS'
        timeoutSecs = 500
        start = time.time()
        parseKey = h2o.nodes[0].parse(s3nKey, key2, timeoutSecs=timeoutSecs, retryDelaySecs=10, pollTimeoutSecs=1200, noise=('JStack', None))
        elapsed = (time.time() - start)
        print s3nKey, 'h2o reported parse time:', parseKey['response']['time']
        print 'parse end on ', s3nKey, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseKey['destination_key']
        kwargs = {'y': 'CRSArrTime', 'x': '1,2,3,4,8,9,16,17,18,30', 'family': 'poisson', 'link': 'familyDefault', 'n_folds': 1, 'max_iter': 8, 'beta_epsilon': 0.001, }
        timeoutSecs = 500
        kwargs.update({'alpha': 0, 'lambda': 0, })
        start = time.time()
        glm = h2o_cmd.runGLMOnly(parseKey=parseKey, timeoutSecs=timeoutSecs, pollTimeoutSecs=120, noise=('JStack', None), **kwargs)
        elapsed = (time.time() - start)
        print 'glm (L2) end on ', csvPathname, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        h2o_glm.simpleCheckGLM(self, glm, None, noPrint=True, **kwargs)
        h2o.check_sandbox_for_errors()
        kwargs.update({'alpha': 0.5, 'lambda': 0.0001, })
        start = time.time()
        glm = h2o_cmd.runGLMOnly(parseKey=parseKey, timeoutSecs=timeoutSecs, pollTimeoutSecs=60, noise=('JStack', None), **kwargs)
        elapsed = (time.time() - start)
        print 'glm (Elastic) end on ', csvPathname, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        h2o_glm.simpleCheckGLM(self, glm, None, noPrint=True, **kwargs)
        h2o.check_sandbox_for_errors()
        kwargs.update({'alpha': 1.0, 'lambda': 0.0001, })
        start = time.time()
        glm = h2o_cmd.runGLMOnly(parseKey=parseKey, timeoutSecs=timeoutSecs, pollTimeoutSecs=60, noise=('JStack', None), **kwargs)
        elapsed = (time.time() - start)
        print 'glm (L1) end on ', csvPathname, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        h2o_glm.simpleCheckGLM(self, glm, None, noPrint=True, **kwargs)
        h2o.check_sandbox_for_errors()
        print 'Deleting key in H2O so we get it from S3 (if ec2) or nfs again.', 'Otherwise it would just parse the cached key.'
        storeView = h2o.nodes[0].store_view()
        print 'Removing', s3nKey
        removeKeyResult = h2o.nodes[0].remove_key(key=s3nKey)
        print 'Trial #', trial, 'completed in', (time.time() - trialStart), 'seconds.',
