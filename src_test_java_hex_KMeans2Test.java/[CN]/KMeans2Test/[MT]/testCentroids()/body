{
  String data="1, 0, 0\n" + "0, 1, 0\n" + "0, 0, 1\n";
  Frame fr=null;
  try {
    Key k=FVecTest.makeByteVec("yada",data);
    fr=ParseDataset2.parse(Key.make(),new Key[]{k});
    for (int i=0; i < 10; i++) {
      for (      boolean normalize : new boolean[]{false,true}) {
        for (        Initialization init : new Initialization[]{Initialization.None,Initialization.PlusPlus,Initialization.Furthest}) {
          KMeans2 parms=new KMeans2();
          parms.source=fr;
          parms.k=3;
          parms.normalize=normalize;
          parms.max_iter=100;
          parms.initialization=init;
          parms.seed=0;
          parms.invoke();
          KMeans2Model kmm=UKV.get(parms.dest());
          double[][] exp1=new double[][]{d(1,0,0),d(0,1,0),d(0,0,1)};
          double[][] exp2=new double[][]{d(0,1,0),d(1,0,0),d(0,0,1)};
          double[][] exp3=new double[][]{d(0,1,0),d(0,0,1),d(1,0,0)};
          double[][] exp4=new double[][]{d(1,0,0),d(0,0,1),d(0,1,0)};
          double[][] exp5=new double[][]{d(0,0,1),d(1,0,0),d(0,1,0)};
          double[][] exp6=new double[][]{d(0,0,1),d(0,1,0),d(1,0,0)};
          boolean gotit=false;
          for (int j=0; j < parms.k; ++j)           gotit|=close(exp1[j],kmm.centers[j]);
          for (int j=0; j < parms.k; ++j)           gotit|=close(exp2[j],kmm.centers[j]);
          for (int j=0; j < parms.k; ++j)           gotit|=close(exp3[j],kmm.centers[j]);
          for (int j=0; j < parms.k; ++j)           gotit|=close(exp4[j],kmm.centers[j]);
          for (int j=0; j < parms.k; ++j)           gotit|=close(exp5[j],kmm.centers[j]);
          for (int j=0; j < parms.k; ++j)           gotit|=close(exp6[j],kmm.centers[j]);
          Assert.assertTrue(gotit);
          kmm.delete();
        }
      }
    }
  }
  finally {
    if (fr != null)     fr.delete();
  }
}
