{
  _numSplits=1;
  final int ncols=fr._vecs.length;
  Vec vsplit=Vec.makeZero(fr._vecs[0]);
  double mins[]=new double[ncols], maxs[]=new double[ncols];
  boolean isInts[]=new boolean[ncols];
  for (int i=0; i < ncols; i++) {
    mins[i]=fr._vecs[i].min();
    maxs[i]=fr._vecs[i].max();
    isInts[i]=fr._vecs[i]._isInt;
  }
  Log.unwrap(System.out,"=== " + fr.toString() + " "+ fr._vecs[0].length());
  for (int j=0; j < fr.length(); j++)   Log.unwrap(System.out,fr._names[j] + " = " + fr._vecs[j].toString());
  Histogram hist=new Histogram(fr._names,fr._vecs[0].length(),mins,maxs,isInts);
  Log.unwrap(System.out,hist.toString() + "\n");
  double[] ds=new double[ncols];
  for (int j=0; j < fr._vecs[0].length(); j++) {
    for (int i=0; i < ncols; i++)     ds[i]=fr._vecs[i].at(j);
    hist.incr(ds);
  }
  Log.unwrap(System.out,hist.toString() + "\n");
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < ncols - 1; i++)   sb.append(i).append("=").append(hist.score(i)).append("  ");
  Log.unwrap(System.out,sb.toString());
  int scol=hist.bestSplit();
  Log.unwrap(System.out,"Best split is column " + scol);
  for (int j=0; j < fr._vecs[0].length(); j++) {
    double d=fr._vecs[scol].at(j);
    int bin=hist.bin(scol,d);
    vsplit.set8(j,bin);
  }
  Tree t=new Tree(hist,scol);
  UKV.remove(vsplit._key);
}
