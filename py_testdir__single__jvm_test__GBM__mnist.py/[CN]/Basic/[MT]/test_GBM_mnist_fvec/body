def test_GBM_mnist_fvec(self):
    h2o.beta_features = False
    importFolderPath = 'mnist'
    csvFilename = 'mnist_training.csv.gz'
    timeoutSecs = 1800
    trialStart = time.time()
    trainKey = ((csvFilename + '_') + '.hex')
    start = time.time()
    parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=((importFolderPath + '/') + csvFilename), schema='put', hex_key=trainKey, timeoutSecs=timeoutSecs)
    elapsed = (time.time() - start)
    print 'parse end on ', csvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
    print 'parse result:', parseResult['destination_key']
    modelKey = 'GBM_model'
    params = {'classification': 1, 'destination_key': modelKey, 'learn_rate': 0.1, 'ntrees': 3, 'max_depth': 8, 'min_rows': 1, 'response': 0, }
    kwargs = params.copy()
    timeoutSecs = 1800
    start = time.time()
    GBMFirstResult = h2o_cmd.runGBM(parseResult=parseResult, noPoll=True, **kwargs)
    h2o_jobs.pollStatsWhileBusy(timeoutSecs=1200, pollTimeoutSecs=120, retryDelaySecs=5)
    elapsed = (time.time() - start)
    print 'GBM training completed in', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
    gbmTrainView = h2o_cmd.runGBMView(model_key=modelKey)
    errsLast = gbmTrainView['gbm_model']['errs'][(-1)]
    print "GBM 'errsLast'", errsLast
    if DO_CLASSIFICATION:
        cm = gbmTrainView['gbm_model']['cms'][(-1)]['_arr']
        pctWrongTrain = h2o_gbm.pp_cm_summary(cm)
        print '\nTrain\n==========\n'
        print h2o_gbm.pp_cm(cm)
    else:
        print 'GBMTrainView:', h2o.dump_json(gbmTrainView['gbm_model']['errs'])
