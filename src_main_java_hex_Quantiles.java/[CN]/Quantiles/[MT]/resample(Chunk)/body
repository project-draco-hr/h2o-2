{
  Random r=new Random(chk._start);
  if (_stat0.len1() <= RESAMPLE_SZ)   return copy1(chk);
  int ns=(int)(_len1 * RESAMPLE_SZ / _stat0.len1()) + 1;
  double[] dbls=new double[ns];
  if (ns << 3 < _len1 && ns << 3 < chk._len) {
    int n=0;
    while (n < ns) {
      double val;
      int i=r.nextInt(chk._len);
      if (chk.isNA0(i))       continue;
      if (Double.isNaN(val=chk.at0(i)))       continue;
      dbls[n++]=val;
    }
    return dbls;
  }
  dbls=copy1(chk);
  if (dbls.length <= ns)   return dbls;
  for (int i=dbls.length - 1; i >= ns; i--)   dbls[r.nextInt(i + 1)]=dbls[i];
  return Arrays.copyOf(dbls,ns);
}
