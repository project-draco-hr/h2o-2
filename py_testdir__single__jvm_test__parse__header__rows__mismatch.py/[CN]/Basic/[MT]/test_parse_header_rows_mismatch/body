def test_parse_header_rows_mismatch(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    csvFilename = 'syn_ints.csv'
    csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
    headerData = 'ID,CAPSULE,AGE,RACE,DPROS,DCAPS,PSA,VOL'
    totalCols = 8
    totalRows = 10000
    rList = rand_rowData(totalCols)
    write_syn_dataset(csvPathname, totalRows, headerData, rList)
    for trial in range(2):
        src_key = ((csvFilename + '_') + str(trial))
        hex_key = (((csvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        timeoutSecs = 30
        print "Force it to think there's a header. using comma forced as separator"
        parseResult = h2i.import_parse(path=csvPathname, src_key=src_key, schema='local', hex_key=hex_key, timeoutSecs=timeoutSecs, pollTimeoutSecs=30, header=1, separator=44)
        print ("parseResult['destination_key']: " + parseResult['destination_key'])
        print 'parse time:', parseResult['response']['time']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        h2o_cmd.infoFromInspect(inspect, csvPathname)
        print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
        self.assertEqual(inspect['num_cols'], totalCols, ('parse created result with the wrong number of cols %s %s' % (inspect['num_cols'], totalCols)))
        self.assertEqual(inspect['num_rows'], totalRows, ("parse created result with the wrong number of rows (header shouldn't count) %s %s" % (inspect['num_rows'], totalRows)))
        kwargs = {'sample': 75, 'depth': 25, 'ntree': 1, }
        start = time.time()
        rfv = h2o_cmd.runRF(parseResult=parseResult, timeoutSecs=30, **kwargs)
        elapsed = (time.time() - start)
        print ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
        print 'trial #', trial, 'totalRows:', totalRows, 'parse end on ', csvFilename, 'took', (time.time() - start), 'seconds'
        h2o.check_sandbox_for_errors()
