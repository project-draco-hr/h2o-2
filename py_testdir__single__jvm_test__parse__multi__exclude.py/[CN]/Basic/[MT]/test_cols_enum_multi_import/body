def test_cols_enum_multi_import(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    translateList = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u']
    tryList = [(300, 100, 'cA', 60, '*x[2-5]*'), (310, 200, 'cB', 60, '*x[1,3-5]*'), (320, 300, 'cC', 60, '*x[1-2,4-5]*'), (330, 400, 'cD', 60, '*x[1-3-5]*'), (340, 500, 'cE', 60, '*x[1-4]*')]
    h2b.browseTheCloud()
    cnum = 0
    for (rowCount, colCount, key2, timeoutSecs, excludePattern) in tryList:
        cnum += 1
        print 'Wait while', FILENUM, 'synthetic files are created in', SYNDATASETS_DIR
        rowxcol = ((str(rowCount) + 'x') + str(colCount))
        for fileN in range(FILENUM):
            csvFilename = (((((('syn_' + str(fileN)) + '_') + str(SEED)) + '_') + rowxcol) + '.csv')
            csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
            write_syn_dataset(csvPathname, rowCount, colCount, SEED, translateList)
    for (rowCount, colCount, key2, timeoutSecs, excludePattern) in tryList:
        cnum += 1
        h2o.nodes[0].import_files(SYNDATASETS_DIR)
        parseKey = h2o.nodes[0].parse('*', key2=key2, exclude=excludePattern, header=1, timeoutSecs=timeoutSecs)
        print ("parseKey['destination_key']: " + parseKey['destination_key'])
        print 'parse time:', parseKey['response']['time']
        inspect = h2o_cmd.runInspect(None, parseKey['destination_key'])
        h2o_cmd.infoFromInspect(inspect, csvPathname)
        num_rows = inspect['num_rows']
        num_cols = inspect['num_cols']
        print (('\n' + parseKey['destination_key']) + ':'), '    num_rows:', '{:,}'.format(num_rows), '    num_cols:', '{:,}'.format(num_cols)
        self.assertEqual(num_rows, ((rowCount + 1) * FILENUM), msg=('got num_rows: %s. Should be rowCount+1: %s * FILENUM: %s' % (num_rows, (rowCount + 1), FILENUM)))
