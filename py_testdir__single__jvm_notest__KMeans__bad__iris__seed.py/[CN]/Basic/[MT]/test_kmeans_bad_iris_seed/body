def test_kmeans_bad_iris_seed(self):
    if (1 == 1):
        outputClasses = 3
        y = 4
        response = 'response'
        skipSrcOutputHeader = 1
        skipPredictHeader = 1
        trees = 40
        bucket = 'smalldata'
        csvPathname = 'iris/iris2.csv'
        hexKey = 'iris2.csv.hex'
        translate = {'setosa': 0.0, 'versicolor': 1.0, 'virginica': 2.0, }
        expectedPctWrong = 0.7
    timeoutSecs = 15
    parseResult = h2i.import_parse(bucket=bucket, path=csvPathname, schema='put', hex_key=hexKey)
    inspect = h2o_cmd.runInspect(key=parseResult['destination_key'])
    numCols = inspect['numCols']
    numRows = inspect['numRows']
    for trial in range(10):
        seed = random.randint(0, sys.maxint)
        badSeed = 8224855816180210471
        kwargs = {'ignored_cols_by_name': response, 'seed': (badSeed if USE_BAD_SEED else seed), 'k': outputClasses, 'initialization': 'PlusPlus', 'destination_key': 'kmeans_model', 'max_iter': 1000, }
        kmeans = h2o_cmd.runKMeans(parseResult=parseResult, timeoutSecs=60, **kwargs)
        size = kmeans['model']['size']
        iterations = kmeans['model']['iterations']
        expectedMaxIterations = 20
        if (iterations > expectedMaxIterations):
            raise Exception(("didn't expect more than %s iterations: %s" % (expectedMaxIterations, iterations)))
        (centers, tupleResultList) = h2o_kmeans.bigCheckResults(self, kmeans, csvPathname, parseResult, 'd', **kwargs)
        size2 = [t[1] for t in tupleResultList]
        if (size != size2):
            raise Exception('trial: %s training cluster sizes: %s not the same as predict on same data: %s', (trial, size, size2))
        expectedSizes = [[39, 50, 61], [38, 50, 62]]
        sortedSize = sorted(size)
        if (sortedSize not in expectedSizes):
            raise Exception(('trial: %s I got cluster sizes %s but expected one of these: %s ' % (trial, sortedSize, expectedSizes)))
        print 'centers:', centers
        self.assertEqual((numCols - 1), len(centers[0]), ("trial: %s kmeans first center doesn't have same # of values as dataset row %s %s" % (trial, (numCols - 1), len(centers[0]))))
        error = kmeans['model']['total_within_SS']
        within_cluster_variances = kmeans['model']['within_cluster_variances']
        print 'trial %s within_cluster_variances:', (trial, within_cluster_variances)
