def test_from_import(self):
    if (1 == 1):
        importFolderPath = '/home2/0xdiag/datasets'
        print "Using non-.gz'ed files in", importFolderPath
        avgMichalSize = 116561140
        csvFilenameAll = [('manyfiles-nflx/file_1.dat', 'file_1.dat', (1 * avgMichalSize), 700), ('manyfiles-nflx/file_[2][0-9].dat', 'file_10.dat', (10 * avgMichalSize), 700), ('manyfiles-nflx/file_[34][0-9].dat', 'file_20.dat', (20 * avgMichalSize), 700), ('manyfiles-nflx/file_[5-9][0-9].dat', 'file_50.dat', (50 * avgMichalSize), 700)]
    elif (1 == 0):
        importFolderPath = '/home2/0xdiag/datasets'
        print "Using non-.gz'ed files in", importFolderPath
        avgMichalSize = 116561140
        csvFilenameAll = [('manyfiles-nflx/file_1.dat', 'file_1.dat', (1 * avgMichalSize), 700), ('manyfiles-nflx/file_[2][0-9].dat', 'file_10.dat', (10 * avgMichalSize), 700), ('manyfiles-nflx/file_[34][0-9].dat', 'file_20.dat', (20 * avgMichalSize), 700), ('manyfiles-nflx/file_[5-9][0-9].dat', 'file_50.dat', (50 * avgMichalSize), 700)]
    else:
        importFolderPath = '/home/0xdiag/datasets'
        print "Using .gz'ed files in", importFolderPath
        avgMichalSize = 237270000
        csvFilenameAll = [('manyfiles-nflx-gz/file_1.dat.gz', 'file_1.dat.gz', (1 * avgMichalSize), 700), ('manyfiles-nflx-gz/file_[2][0-9].dat.gz', 'file_10.dat.gz', (10 * avgMichalSize), 700), ('manyfiles-nflx-gz/file_[34][0-9].dat.gz', 'file_20.dat.gz', (20 * avgMichalSize), 700), ('manyfiles-nflx-gz/file_[5-9][0-9].dat.gz', 'file_50.dat.gz', (50 * avgMichalSize), 700)]
    csvFilenameList = csvFilenameAll
    trialMax = 1
    base_port = 54321
    tryHeap = 28
    for (csvFilepattern, csvFilename, totalBytes, timeoutSecs) in csvFilenameList:
        localhost = h2o.decide_if_localhost()
        if localhost:
            h2o.build_cloud(1, java_heap_GB=tryHeap, base_port=base_port, enable_benchmark_log=True)
        else:
            h2o_hosts.build_cloud_with_hosts(1, java_heap_GB=tryHeap, base_port=base_port, enable_benchmark_log=True)
        base_port += 2
        for trial in range(trialMax):
            importFolderResult = h2i.setupImportFolder(None, importFolderPath)
            importFullList = importFolderResult['succeeded']
            importFailList = importFolderResult['failed']
            print '\n Problem if this is not empty: importFailList:', h2o.dump_json(importFailList)
            logging.critical('')
            logging.critical((('Parse ' + csvFilename) + ' Start--------------------------------'))
            start = time.time()
            parseKey = h2i.parseImportFolderFile(None, csvFilepattern, importFolderPath, key2=(csvFilename + '.hex'), timeoutSecs=timeoutSecs, retryDelaySecs=5, benchmarkLogging=['cpu', 'disk'])
            elapsed = (time.time() - start)
            print 'Parse #', trial, 'completed in', ('%6.2f' % elapsed), 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
            if (totalBytes is not None):
                fileMBS = ((totalBytes / 1000000.0) / elapsed)
                print '\nMB/sec (before uncompress)', ('%6.2f' % fileMBS)
                logging.critical('{!s} jvms, {!s}GB heap, {:s} {:s} {:6.2f} MB/sec'.format(len(h2o.nodes), tryHeap, csvFilepattern, csvFilename, fileMBS))
            print csvFilepattern, 'parse time:', parseKey['response']['time']
            print "Parse result['destination_key']:", parseKey['destination_key']
            inspect = h2o_cmd.runInspect(key=parseKey['destination_key'])
            origKey = parseKey['destination_key']
            execExpr = (('a = slice(' + origKey) + ',1,200)')
            h2e.exec_expr(h2o.nodes[0], execExpr, 'a', timeoutSecs=30)
            newParseKey = {'destination_key': 'a', }
            print ('\n' + csvFilepattern)
            start = time.time()
            print 'Temporarily hacking to do nothing instead of RF on the parsed file'
            for k in importFullList:
                deleteKey = k['key']
                if ((csvFilename in deleteKey) and (not ('.hex' in deleteKey))):
                    print '\nRemoving', deleteKey
                    removeKeyResult = h2o.nodes[0].remove_key(key=deleteKey)
            h2o.tear_down_cloud()
            if (not localhost):
                print 'Waiting 10 secs before building cloud again (sticky ports?)'
                time.sleep(10)
            sys.stdout.write('.')
            sys.stdout.flush()
