def test_libsvm(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    for trial in range(2):
        csvFilename = 'syn_ints.csv'
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        write_syn_dataset(csvPathname, trial)
        importFolderPath = '/home/kevin/h2o/py'
        csvFilename = '1.txt'
        hex_key = '1.hex'
        timeoutSecs = 10
        csvPathname = ((importFolderPath + '/') + csvFilename)
        parseResult = h2i.import_parse(parser_type=PARSER_TYPE, path=csvPathname, hex_key=hex_key, timeoutSecs=2000)
        start = time.time()
        inspect = h2o_cmd.runInspect(key=hex_key, timeoutSecs=360)
        print 'Inspect:', hex_key, 'took', (time.time() - start), 'seconds'
        h2o_cmd.infoFromInspect(inspect, csvFilename)
        numRows = inspect['numRows']
        numCols = inspect['numCols']
        summaryResult = h2o_cmd.runSummary(key=hex_key)
        h2o_cmd.infoFromSummary(summaryResult)
        if DO_KMEANS:
            kwargs = {'k': 3, 'initialization': 'Furthest', 'ignored_cols': None, 'max_iter': 10, 'seed': 265211114317615310, }
            timeoutSecs = 600
            start = time.time()
            kmeans = h2o_cmd.runKMeans(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
            elapsed = (time.time() - start)
            print 'kmeans end on ', csvPathname, 'took', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
            h2o_kmeans.simpleCheckKMeans(self, kmeans, **kwargs)
            (centers, tupleResultList) = h2o_kmeans.bigCheckResults(self, kmeans, csvPathname, parseResult, 'd', **kwargs)
