{
  try {
    JsonObject res=new JsonObject();
    ValueArray ary=_key.value();
    int[] columns=createColumns();
    res.addProperty("key",ary._key.toString());
    res.addProperty("h2o",H2O.SELF.toString());
    GLMParams glmParams=getGLMParams();
    DataFrame data=DGLM.getData(ary,columns,null,_standardize.value());
    LSMSolver lsm=null;
switch (_lsmSolver.value()) {
case AUTO:
      lsm=new ADMMSolver(_lambda.value(),_alpha.value());
    break;
case ADMM:
  lsm=new ADMMSolver(_lambda.value(),_alpha.value());
break;
case GenGradient:
lsm=new GeneralizedGradientSolver(_lambda.value(),_alpha.value());
}
GLMJob job=DGLM.startGLMJob(data,lsm,glmParams,null,_xval.value(),true);
JsonObject j=new JsonObject();
j.addProperty(Constants.DEST_KEY,job.dest().toString());
Response r=GLMProgressPage.redirect(j,job.self(),job.dest(),job.progressKey());
r.setBuilder(Constants.DEST_KEY,new KeyElementBuilder());
return r;
}
 catch (GLMException e) {
Log.err(e);
return Response.error(e.getMessage());
}
catch (Throwable t) {
Log.err(t);
return Response.error(t.getMessage());
}
}
