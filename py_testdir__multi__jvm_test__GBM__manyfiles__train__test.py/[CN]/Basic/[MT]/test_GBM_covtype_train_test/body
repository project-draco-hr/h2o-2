def test_GBM_covtype_train_test(self):
    bucket = 'home-0xdiag-datasets'
    modelKey = 'GBMModelKey'
    files = [('manyfiles-nflx-gz', 'file_1.dat.gz', 'file_1.hex', 1800, None, 'file_1.dat.gz', 'file_1_test.hex')]
    for (importFolderPath, trainFilename, trainKey, timeoutSecs, vresponse, testFilename, testKey) in files:
        h2o.beta_features = False
        start = time.time()
        xList = []
        eList = []
        fList = []
        print 'Parsing to fvec directly! Have to noPoll=true!, and doSummary=False!'
        csvPathname = ((importFolderPath + '/') + trainFilename)
        parseTrainResult = h2i.import_parse(bucket=bucket, path=csvPathname, schema='local', hex_key=trainKey, timeoutSecs=timeoutSecs, noPoll=h2o.beta_features, doSummary=False)
        if h2o.beta_features:
            h2j.pollWaitJobs(timeoutSecs=timeoutSecs, pollTimeoutSecs=timeoutSecs)
            print "Filling in the parseTrainResult['destination_key'] for h2o"
            parseTrainResult['destination_key'] = trainKey
        elapsed = (time.time() - start)
        print 'train parse end on ', trainFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'train parse result:', parseTrainResult['destination_key']
        inspect = h2o_cmd.runInspect(key=parseTrainResult['destination_key'])
        print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
        num_rows = inspect['num_rows']
        num_cols = inspect['num_cols']
        print 'Parsing to fvec directly! Have to noPoll=true!, and doSummary=False!'
        parseTestResult = h2i.import_parse(bucket=bucket, path=((importFolderPath + '/') + testFilename), schema='local', hex_key=testKey, timeoutSecs=timeoutSecs, noPoll=h2o.beta_features, doSummary=False)
        if h2o.beta_features:
            h2j.pollWaitJobs(timeoutSecs=timeoutSecs, pollTimeoutSecs=timeoutSecs)
            print "Filling in the parseTestResult['destination_key'] for h2o"
            parseTestResult['destination_key'] = testKey
        elapsed = (time.time() - start)
        print 'test parse end on ', testFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'test parse result:', parseTestResult['destination_key']
        if (not vresponse):
            vresponse = num_cols
        print ('Using the same vresponse %s for train and test (which should have a output value too)' % vresponse)
        ntrees = 10
        for max_depth in [5, 10, 20, 40]:
            params = {'learn_rate': 0.2, 'nbins': 1024, 'ntrees': ntrees, 'max_depth': max_depth, 'min_rows': 10, 'vresponse': vresponse, }
            print 'Using these parameters for GBM: ', params
            kwargs = params.copy()
            h2o.beta_features = True
            trainStart = time.time()
            gbmTrainResult = h2o_cmd.runGBM(parseResult=parseTrainResult, noPoll=True, timeoutSecs=timeoutSecs, destination_key=modelKey, **kwargs)
            if h2o.beta_features:
                h2j.pollWaitJobs(timeoutSecs=timeoutSecs, pollTimeoutSecs=timeoutSecs)
            trainElapsed = (time.time() - trainStart)
            print 'GBM training completed in', trainElapsed, 'seconds. On dataset: ', trainFilename
            gbmTrainView = h2o_cmd.runGBMView(model_key=modelKey)
            errsLast = gbmTrainView['gbm_model']['errs'][(-1)]
            print "GBM 'errsLast'", errsLast
            cm = gbmTrainView['gbm_model']['cm']
            pctWrongTrain = h2o_gbm.pp_cm_summary(cm)
            print 'Last line of this cm might be NAs, not CM'
            print '\nTrain\n==========\n'
            print h2o_gbm.pp_cm(cm)
            predictKey = 'Predict.hex'
            start = time.time()
            gbmTestResult = h2o_cmd.runPredict(data_key=parseTestResult['destination_key'], model_key=modelKey, destination_key=predictKey, timeoutSecs=timeoutSecs, **kwargs)
            if h2o.beta_features:
                h2j.pollWaitJobs(timeoutSecs=timeoutSecs, pollTimeoutSecs=timeoutSecs)
            elapsed = (time.time() - start)
            print 'GBM predict completed in', elapsed, 'seconds. On dataset: ', testFilename
            print 'This is crazy!'
            gbmPredictCMResult = h2o.nodes[0].predict_confusion_matrix(actual=parseTestResult['destination_key'], vactual=vresponse, predict=predictKey, vpredict='predict')
            cm = gbmPredictCMResult['cm']
            pctWrong = h2o_gbm.pp_cm_summary(cm)
            print 'Last line of this cm is really NAs, not CM'
            print '\nTest\n==========\n'
            print h2o_gbm.pp_cm(cm)
            xList.append(max_depth)
            eList.append(pctWrong)
            fList.append(trainElapsed)
        h2o.beta_features = False
        xLabel = 'max_depth'
        eLabel = 'pctWrong'
        fLabel = 'trainElapsed'
        eListTitle = ''
        fListTitle = ''
        h2o_gbm.plotLists(xList, xLabel, eListTitle, eList, eLabel, fListTitle, fList, fLabel)
