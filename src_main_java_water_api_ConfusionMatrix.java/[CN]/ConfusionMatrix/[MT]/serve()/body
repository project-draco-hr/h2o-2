{
  Vec va=null, vp=null, avp=null;
  classification=vactual.isInt() && vpredict.isInt();
  if (vactual == null || vpredict == null)   throw new IllegalArgumentException("Missing actual or predict!");
  if (vactual.length() != vpredict.length())   throw new IllegalArgumentException("Both arguments must have the same length!");
  try {
    if (classification) {
      va=vactual.toEnum();
      actual_domain=va._domain;
      vp=vpredict.toEnum();
      predicted_domain=vp._domain;
      if (!Arrays.equals(actual_domain,predicted_domain)) {
        domain=Utils.domainUnion(actual_domain,predicted_domain);
        int[][] vamap=Model.getDomainMapping(domain,actual_domain,true);
        va=TransfVec.compose((TransfVec)va,vamap,domain,false);
        int[][] vpmap=Model.getDomainMapping(domain,predicted_domain,true);
        vp=TransfVec.compose((TransfVec)vp,vpmap,domain,false);
      }
 else       domain=actual_domain;
      if (!va.group().equals(vp.group())) {
        avp=vp;
        vp=va.align(vp);
      }
      cm=new CM(domain.length).doAll(va,vp)._cm;
    }
 else {
      if (vactual.isEnum())       throw new IllegalArgumentException("Actual vector cannot be categorical for regression scoring.");
      if (vpredict.isEnum())       throw new IllegalArgumentException("Predicted vector cannot be categorical for regression scoring.");
      mse=new CM(1).doAll(vactual,vpredict).mse();
    }
    return Response.done(this);
  }
 catch (  Throwable t) {
    return Response.error(t);
  }
 finally {
    if (va != null)     UKV.remove(va._key);
    if (vp != null)     UKV.remove(vp._key);
    if (avp != null)     UKV.remove(avp._key);
  }
}
