{
  DeepLearningModel cp;
  if (checkpoint == null)   cp=initModel();
 else {
    final DeepLearningModel previous=UKV.get(checkpoint);
    if (previous == null)     throw new IllegalArgumentException("Checkpoint not found.");
    cp=new DeepLearningModel(previous,destination_key,job_key);
    try {
      cp.write_lock(self());
      assert(state == JobState.RUNNING);
      if (source == null || !Arrays.equals(source._key._kb,previous.model_info().get_params().source._key._kb)) {
        throw new IllegalArgumentException("source must be the same as for the checkpointed model.");
      }
      if (response == null || !Arrays.equals(response._key._kb,previous.model_info().get_params().response._key._kb)) {
        throw new IllegalArgumentException("response must be the same as for the checkpointed model.");
      }
      if (Utils.difference(ignored_cols,previous.model_info().get_params().ignored_cols).length != 0) {
        throw new IllegalArgumentException("ignored_cols must be the same as for the checkpointed model.");
      }
      if ((validation != null) != (previous.model_info().get_params().validation != null) || (validation != null && !Arrays.equals(validation._key._kb,previous.model_info().get_params().validation._key._kb))) {
        throw new IllegalArgumentException("validation must be the same as for the checkpointed model.");
      }
      if (classification != previous.model_info().get_params().classification) {
        throw new IllegalArgumentException("classification must be the same as for the checkpointed model.");
      }
      Log.info("Resuming from checkpoint.");
      final DeepLearning mp=cp.model_info().get_params();
      Object A=mp, B=this;
      for (      Field fA : A.getClass().getDeclaredFields()) {
        if (Utils.contains(cp_modifiable,fA.getName())) {
          if (!expert_mode && Utils.contains(expert_options,fA.getName()))           continue;
          for (          Field fB : B.getClass().getDeclaredFields()) {
            if (fA.equals(fB)) {
              try {
                if (!fA.get(A).toString().equals(fB.get(B).toString())) {
                  Log.info("Applying user-requested modification of '" + fA.getName() + "': "+ fA.get(A)+ " -> "+ fB.get(B));
                  fA.set(A,fB.get(B));
                }
              }
 catch (              IllegalAccessException e) {
                e.printStackTrace();
              }
            }
          }
        }
      }
      cp.update(self());
    }
  finally {
      cp.unlock(self());
    }
  }
  trainModel(cp);
  delete();
  return JobState.DONE;
}
