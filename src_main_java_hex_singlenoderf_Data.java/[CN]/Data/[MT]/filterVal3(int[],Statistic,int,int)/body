{
  if (!s._regression) {
    DataAdapter.Col cs[]=_dapt._c;
    short classs[]=cs[_dapt.classColIdx()]._binned;
    int cds[][][]=s._columnDists;
    int fs[]=s._features;
    for (    int f : fs) {
      if (f == -1)       break;
      int cdsf[][]=cds[f];
      short[] bins=cs[f]._binned;
      if (bins != null) {
        for (int i=lo; i < hi; i++) {
          int permIdx=permutation[i];
          int val=bins[permIdx];
          if (val == DataAdapter.BAD)           continue;
          int cls=classs[permIdx];
          if (cls == DataAdapter.BAD)           continue;
          cdsf[val][cls]++;
        }
      }
 else {
        byte[] raw=cs[f]._rawB;
        for (int i=lo; i < hi; i++) {
          int permIdx=permutation[i];
          int val=(0xFF & raw[permIdx]);
          int cls=classs[permIdx];
          cdsf[val][cls]++;
        }
      }
    }
  }
 else {
    DataAdapter.Col cols[]=_dapt._c;
    float[] response;
    if (cols[_dapt.classColIdx()]._binned == null) {
      response=new float[cols[_dapt.classColIdx()]._rawB.length];
      for (int b=0; b < response.length; ++b)       response[b]=(float)(0xFF & cols[_dapt.classColIdx()]._rawB[b]);
    }
 else {
      response=new float[cols[_dapt.classColIdx()]._binned.length];
      for (int f=0; f < response.length; ++f)       response[f]=cols[_dapt.classColIdx()]._binned2raw[cols[_dapt.classColIdx()]._binned[f]];
    }
    float cds[][][]=s._columnDistsRegression;
    int fs[]=s._features;
    for (    int f : fs) {
      if (f == -1)       break;
      float cdsf[][]=cds[f];
      short[] bins=cols[f]._binned;
      if (bins != null) {
        for (int i=lo; i < hi; i++) {
          int permIdx=permutation[i];
          int val=bins[permIdx];
          if (val == DataAdapter.BAD)           continue;
          float resp=response[permIdx];
          int response_bin=cols[_dapt.classColIdx()]._binned == null ? permIdx : cols[_dapt.classColIdx()]._binned[permIdx];
          if (resp == DataAdapter.BAD)           continue;
          cdsf[val][response_bin]=resp;
        }
      }
 else {
        byte[] raw=cols[f]._rawB;
        for (int i=lo; i < hi; i++) {
          int permIdx=permutation[i];
          int val=(0xFF & raw[permIdx]);
          float resp=response[permIdx];
          int response_bin=cols[_dapt.classColIdx()]._binned == null ? permIdx : cols[_dapt.classColIdx()]._binned[permIdx];
          cdsf[val][response_bin]=resp;
        }
      }
    }
  }
}
