{
  H2O cloud=H2O.CLOUD;
  int lo=cloud._memary.length, hi=-1;
  for (  Key k : _keys) {
    int i=k.home(cloud);
    if (i < lo)     lo=i;
    if (i > hi)     hi=i;
  }
  final ArrayList<Key> locals=new ArrayList<Key>();
  final ArrayList<Key> lokeys=new ArrayList<Key>();
  final ArrayList<Key> hikeys=new ArrayList<Key>();
  int self_idx=cloud.nidx(H2O.SELF);
  int mid=(lo + hi) >>> 1;
  for (  Key k : _keys) {
    int idx=k.home(cloud);
    if (idx == self_idx)     locals.add(k);
 else     if (idx < mid)     lokeys.add(k);
 else     hikeys.add(k);
  }
  _lo=remote_compute(lokeys);
  _hi=remote_compute(hikeys);
  if (locals.size() != 0) {
    _local=clone();
    _local._is_local=true;
    _local._keys=locals.toArray(new Key[locals.size()]);
    _local.init();
    H2O.submitTask(_local);
  }
 else {
    tryComplete();
  }
}
