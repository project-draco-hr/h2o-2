{
  final int N=xx.getRows();
  double lambda=_lambda * (1 - _alpha) * 0.5 + _rho;
  if (_lambda != 0)   for (int i=0; i < N - 1; ++i)   xx.put(i,i,xx.get(i,i) + lambda);
  if (_alpha == 0 || _lambda == 0)   try {
    double[] res=Solve.solvePositive(xx,xy).reshape(xx.getColumns() * xy.getColumns(),1).toArray();
    System.arraycopy(res,0,z,0,res.length);
    _converged=true;
    return res;
  }
 catch (  Exception e) {
    if (!e.getMessage().equals("Matrix is not symmetric positive definite."))     throw Log.errRTExcept(e);
    throw new NonSPDMatrixException();
  }
  final double ABSTOL=Math.sqrt(N) * 1e-4;
  final double RELTOL=1e-2;
  double[] u=MemoryManager.malloc8d(N - 1);
  DoubleMatrix xm=null;
  DoubleMatrix xyPrime=xy.dup();
  OUTER:   for (int a=0; a < 5; ++a) {
    double kappa=_lambda * _alpha / _rho;
    for (int i=0; i < 1000; ++i) {
      for (int j=0; j < N - 1; ++j) {
        xyPrime.put(j,0,xy.get(j,0) + _rho * (z[j] - u[j]));
      }
      try {
        xm=Solve.solvePositive(xx,xyPrime);
      }
 catch (      Exception e) {
        if (!e.getMessage().equals("Matrix is not symmetric positive definite."))         throw Log.errRTExcept(e);
        _rho*=10;
        lambda=(_lambda * (1 - _alpha) + _rho) - lambda;
        for (int j=0; j < N - 1; ++j)         xx.put(j,j,xx.get(j,j) + lambda);
        Arrays.fill(z,0);
        Arrays.fill(u,0);
        continue OUTER;
      }
      double x_norm=0;
      double z_norm=0;
      double u_norm=0;
      double r_norm=0;
      double s_norm=0;
      double eps_pri=0;
      double eps_dual=0;
      for (int j=0; j < N - 1; ++j) {
        double x_hat=xm.get(j,0);
        x_norm+=x_hat * x_hat;
        x_hat=x_hat * _orlx + (1 - _orlx) * z[j];
        double zold=z[j];
        z[j]=shrinkage(x_hat + u[j],kappa);
        z_norm+=z[j] * z[j];
        s_norm+=(z[j] - zold) * (z[j] - zold);
        r_norm+=(xm.get(j,0) - z[j]) * (xm.get(j,0) - z[j]);
        u[j]+=x_hat - z[j];
        u_norm+=u[j] * u[j];
      }
      z[N - 1]=xm.get(N - 1,0);
      r_norm=Math.sqrt(r_norm);
      s_norm=_rho * Math.sqrt(s_norm);
      eps_pri=ABSTOL + RELTOL * Math.sqrt(Math.max(x_norm,z_norm));
      eps_dual=ABSTOL + _rho * RELTOL * Math.sqrt(u_norm);
      if (r_norm < eps_pri && s_norm < eps_dual) {
        _converged=true;
        break;
      }
    }
    return z;
  }
  throw new NonSPDMatrixException();
}
