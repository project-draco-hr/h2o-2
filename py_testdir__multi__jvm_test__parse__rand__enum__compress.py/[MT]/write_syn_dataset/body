def write_syn_dataset(csvPathname, enumList, rowCount, colCount=1, scale=1, colSepChar=',', rowSepChar='\n', SEED=12345678):
    robj = random.Random(SEED)
    dsf = open(csvPathname, 'w+')
    for row in range(rowCount):
        rowModulo = (row % 1000000)
        if (rowModulo < (100000 * scale)):
            howManyEnumsToUse = robj.choice([3])
        elif (rowModulo < (200000 * scale)):
            howManyEnumsToUse = robj.choice([8])
        elif (rowModulo < (300000 * scale)):
            howManyEnumsToUse = robj.choice([3, 16, 8001, 8002])
        elif (rowModulo < (400000 * scale)):
            howManyEnumsToUse = robj.choice([4, 9, 11, 1223, 1224])
        elif (rowModulo < (500000 * scale)):
            howManyEnumsToUse = robj.choice([100, 3330, 3331, 3332])
        elif (rowModulo < (600000 * scale)):
            howManyEnumsToUse = robj.choice([4, 5000, 5001, 5003])
        elif (rowModulo < (700000 * scale)):
            howManyEnumsToUse = robj.choice([7, 7900, 7910, 7919])
        elif (rowModulo < (800000 * scale)):
            howManyEnumsToUse = robj.choice([13, (2 * 7900), (2 * 7910), (2 * 7919)])
        else:
            howManyEnumsToUse = robj.choice([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349])
        if (howManyEnumsToUse > len(enumList)):
            print ('WARNING: you should make ENUMS_NUM %s bigger than howManyEnumsToUse: %s' % (ENUMS_NUM, howManyEnumsToUse))
            howManyEnumsToUse = len(enumList)
        rowData = []
        rowIndex = []
        riIndexSum = 0
        for col in range(colCount):
            riIndex = robj.randint(0, (howManyEnumsToUse - 1))
            if REPORT_OUTPUT:
                riIndexSum += riIndex
            rowData.append(enumList[riIndex])
            if REPORT_LAST_ENUM_INDICES:
                rowIndex.append(riIndex)
        if REPORT_OUTPUT:
            ri = (riIndexSum % MULTINOMIAL)
            rowData.append(ri)
        rowDataCsv = (colSepChar.join(map(str, rowData)) + rowSepChar)
        dsf.write(rowDataCsv)
    dsf.close()
    rowIndexCsv = (colSepChar.join(map(str, rowIndex)) + rowSepChar)
    return rowIndexCsv
