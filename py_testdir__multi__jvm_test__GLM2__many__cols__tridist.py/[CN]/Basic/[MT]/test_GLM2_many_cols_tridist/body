def test_GLM2_many_cols_tridist(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(10000, 10, 'cA', 300), (10000, 20, 'cB', 300), (10000, 30, 'cC', 300), (10000, 40, 'cD', 300), (10000, 50, 'cE', 300), (10000, 60, 'cF', 300), (10000, 70, 'cG', 300), (10000, 80, 'cH', 300), (10000, 90, 'cI', 300), (10000, 100, 'cJ', 300), (10000, 200, 'cK', 300), (10000, 300, 'cL', 300), (10000, 400, 'cM', 300), (10000, 500, 'cN', 300), (10000, 600, 'cO', 300)]
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + str(SEEDPERFILE)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print '\nCreating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=30)
        print "\nParse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvFilename)
        paramDict2 = {}
        for k in paramDict:
            paramDict2[k] = paramDict[k][0]
        y = colCount
        kwargs = {'response': y, }
        kwargs.update(paramDict2)
        start = time.time()
        glm = h2o_cmd.runGLM(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
        print 'glm end on ', csvPathname, 'took', (time.time() - start), 'seconds'
        h2o_glm.simpleCheckGLM(self, glm, 'C9', **kwargs)
        if (not h2o.browse_disable):
            h2b.browseJsonHistoryAsUrlLastMatch('Inspect')
            time.sleep(5)
