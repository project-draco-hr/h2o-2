def test_GLM_covtype_train(self):
    importFolderPath = 'standard'
    csvFilename = 'covtype.shuffled.data'
    csvPathname = ((importFolderPath + '/') + csvFilename)
    hex_key = (csvFilename + '.hex')
    print '\nUsing header=0 on the normal covtype.data'
    parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, schema='put', hex_key=hex_key, header=0, timeoutSecs=180)
    inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
    print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
    num_rows = inspect['num_rows']
    pct10 = int((num_rows * 0.1))
    rowsForPct = [(i * pct10) for i in range(0, 11)]
    last10 = (num_rows - rowsForPct[9])
    rowsForPct[10] = last10
    rowsForPct[0] = rowsForPct[10]
    print 'Creating the key of the last 10% data, for scoring'
    dataKeyTest = 'rTest'
    execExpr = (((((dataKeyTest + ' = slice(') + hex_key) + ',') + str((rowsForPct[9] + 1))) + ')')
    h2o_exec.exec_expr(None, execExpr, resultKey=dataKeyTest, timeoutSecs=10)
    kwargs = {'y': 54, 'max_iter': 20, 'n_folds': 0, 'thresholds': 0.5, 'alpha': 0.1, 'lambda': 1e-05, 'family': 'binomial', 'case_mode': '=', 'case': 2, }
    timeoutSecs = 60
    for trial in range(10):
        rowsToUse = rowsForPct[(trial % 10)]
        resultKey = ('r' + str(trial))
        execExpr = (((((resultKey + ' = slice(') + hex_key) + ',1,') + str(rowsToUse)) + ')')
        h2o_exec.exec_expr(None, execExpr, resultKey=resultKey, timeoutSecs=10)
        parseResult['destination_key'] = resultKey
        start = time.time()
        glm = h2o_cmd.runGLMOnly(parseResult=parseResult, timeoutSecs=timeoutSecs, pollTimeoutSecs=180, **kwargs)
        print 'glm end on ', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
        h2o_glm.simpleCheckGLM(self, glm, None, **kwargs)
        GLMModel = glm['GLMModel']
        modelKey = GLMModel['model_key']
        start = time.time()
        glmScore = h2o_cmd.runGLMScore(key=dataKeyTest, model_key=modelKey, thresholds='0.5', timeoutSecs=timeoutSecs)
        print 'glmScore end on ', dataKeyTest, 'took', (time.time() - start), 'seconds'
        classErr = glmScore['validation']['classErr']
        auc = glmScore['validation']['auc']
        err = glmScore['validation']['err']
        print 'classErr:', classErr
        print 'err:', err
        print 'auc:', auc
        print 'Trial #', trial, 'completed', ('using %6.2f' % ((rowsToUse * 100.0) / num_rows)), 'pct. of all rows'
