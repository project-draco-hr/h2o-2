def test_rf_predict(self):
    trees = 6
    timeoutSecs = 20
    csvPathname = h2o.find_file('smalldata/iris/iris2.csv')
    h2o_cmd.runRF(trees=trees, model_key='iris_rf_model', timeoutSecs=timeoutSecs, csvPathname=csvPathname)
    print '\\Use H2O GeneratePredictionsPage with a H2O generated model and the same data key. Inspect/Summary result'
    start = time.time()
    key2 = 'iris2.csv.hex'
    predict = h2o.nodes[0].generate_predictions(model_key='iris_rf_model', data_key=key2)
    print 'generate_predictions end on ', key2, ' took', (time.time() - start), 'seconds'
    expectedCols = {'base': 0, 'enum_domain_size': 0, 'max': 2.0, 'mean': 1.0, 'min': 0.0, 'num_missing_values': 0, 'offset': 0, 'scale': 1, 'size': 8, 'type': 'float', 'variance': 0.816496580927726, }
    predictCols = predict['cols'][0]
    diffkeys = [k for k in expectedCols if (predictCols[k] != expectedCols[k])]
    for k in diffkeys:
        raise Exception(('Checking H2O summary results, wrong %s: %s, should be: %s' % (k, predictCols[k], expectedCols[k])))
    expected = {'num_rows': 150, 'num_cols': 1, 'row_size': 8, }
    diffkeys = [k for k in expected if (predict[k] != expected[k])]
    for k in diffkeys:
        raise Exception(('%s : %s != %s' % (k, predict[k], expected[k])))
