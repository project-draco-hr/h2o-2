{
  load();
  Vec trainLabels=_train[_train.length - 1];
  _train=Utils.remove(_train,_train.length - 1);
  Vec testLabels=_test[_test.length - 1];
  _test=Utils.remove(_test,_test.length - 1);
  Layer[] ls=build(_train,trainLabels,null,null);
  Trainer trainer=startTraining(ls);
  long start=System.nanoTime();
  for (; ; ) {
    try {
      Thread.sleep(2000);
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
    double time=(System.nanoTime() - start) / 1e9;
    long steps=trainer.items();
    int ps=(int)(steps / time);
    String text=(int)time + "s, " + steps+ " steps ("+ (ps)+ "/s) ";
    Layer[] temp=build(_train,trainLabels,(VecsInput)ls[0],(VecSoftmax)ls[ls.length - 1]);
    Layer.copyWeights(ls,temp);
    Error error=NeuralNet.eval(temp,NeuralNet.EVAL_ROW_COUNT,null);
    text+="train: " + error;
    temp=build(_test,testLabels,(VecsInput)ls[0],(VecSoftmax)ls[ls.length - 1]);
    Layer.copyWeights(ls,temp);
    error=NeuralNet.eval(temp,NeuralNet.EVAL_ROW_COUNT,null);
    text+=", test: " + error;
    System.out.println(text);
  }
}
