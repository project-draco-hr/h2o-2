{
  load();
  System.out.println("Loaded data");
  Vec trainLabels=train[train.length - 1];
  train=Utils.remove(train,train.length - 1);
  Vec testLabels=test[test.length - 1];
  test=Utils.remove(test,test.length - 1);
  Layer[] ls=build(train,trainLabels,null,null);
  Trainer trainer=startTraining(ls);
  long start=System.nanoTime();
  while (!cancelled()) {
    try {
      Thread.sleep(2000);
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
    double time=(System.nanoTime() - start) / 1e9;
    long samples=trainer.samples();
    int ps=(int)(samples / time);
    String text=(int)time + "s, " + samples+ " samples ("+ (ps)+ "/s) ";
    Layer[] temp=build(train,trainLabels,(VecsInput)ls[0],(VecSoftmax)ls[ls.length - 1]);
    Layer.shareWeights(ls,temp);
    Error error=NeuralNet.eval(temp,NeuralNet.EVAL_ROW_COUNT,null);
    text+="train: " + error;
    temp=build(test,testLabels,(VecsInput)ls[0],(VecSoftmax)ls[ls.length - 1]);
    Layer.shareWeights(ls,temp);
    error=NeuralNet.eval(temp,NeuralNet.EVAL_ROW_COUNT,null);
    text+=", test: " + error;
    text+=", rates: ";
    for (int i=1; i < ls.length; i++)     text+=String.format("%.3g",ls[i].rate(samples)) + ", ";
    System.out.println(text);
  }
}
