def test_GBM_manyfiles_train_test(self):
    bucket = 'home-0xdiag-datasets'
    modelKey = 'GBMModelKey'
    if localhost:
        files = [('manyfiles-nflx-gz', 'file_1.dat.gz', 'train.hex', 1800, None, 'file_1.dat.gz', 'test.hex')]
    else:
        files = [('manyfiles-nflx-gz', 'file_[0-9].dat.gz', 'train.hex', 1800, None, 'file_1[0-9].dat.gz', 'test.hex')]
    for (importFolderPath, trainFilename, trainKey, timeoutSecs, response, testFilename, testKey) in files:
        h2o.beta_features = False
        start = time.time()
        xList = []
        eList = []
        fList = []
        if h2o.beta_features:
            print 'Parsing to fvec directly! Have to noPoll=true!, and doSummary=False!'
        csvPathname = ((importFolderPath + '/') + trainFilename)
        parseTrainResult = h2i.import_parse(bucket=bucket, path=csvPathname, schema='local', hex_key=trainKey, timeoutSecs=timeoutSecs, noPoll=h2o.beta_features, doSummary=False)
        if h2o.beta_features:
            h2j.pollWaitJobs(timeoutSecs=timeoutSecs, pollTimeoutSecs=timeoutSecs)
            print "Filling in the parseTrainResult['destination_key'] for h2o"
            parseTrainResult['destination_key'] = trainKey
        elapsed = (time.time() - start)
        print 'train parse end on ', trainFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'train parse result:', parseTrainResult['destination_key']
        inspect = h2o_cmd.runInspect(key=parseTrainResult['destination_key'])
        print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
        num_rows = inspect['num_rows']
        num_cols = inspect['num_cols']
        execExpr = ('%s=colSwap(%s,378,(%s[378]>15 ? 1 : 0))' % (trainKey, trainKey, trainKey))
        resultExec = h2o_cmd.runExec(expression=execExpr, timeoutSecs=60)
        if h2o.beta_features:
            print 'Parsing to fvec directly! Have to noPoll=true!, and doSummary=False!'
        csvPathname = ((importFolderPath + '/') + testFilename)
        parseTestResult = h2i.import_parse(bucket=bucket, path=csvPathname, schema='local', hex_key=testKey, timeoutSecs=timeoutSecs, noPoll=h2o.beta_features, doSummary=False)
        if h2o.beta_features:
            h2j.pollWaitJobs(timeoutSecs=timeoutSecs, pollTimeoutSecs=timeoutSecs)
            print "Filling in the parseTestResult['destination_key'] for h2o"
            parseTestResult['destination_key'] = testKey
        elapsed = (time.time() - start)
        print 'test parse end on ', testFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'test parse result:', parseTestResult['destination_key']
        execExpr = ('%s=colSwap(%s,378,(%s[378]>15 ? 1 : 0))' % (testKey, testKey, testKey))
        resultExec = h2o_cmd.runExec(expression=execExpr, timeoutSecs=60)
        response = 378
        x = range(num_cols)
        del x[response]
        ignored_cols_by_name = ','.join(map(str, random.sample(x, 300)))
        print ('Using the same response %s for train and test (which should have a output value too)' % response)
        ntrees = 10
        trial = 0
        print 'Kicking off multiple GBM jobs at once'
        for max_depth in [5, 10, 20, 40]:
            trial += 1
            params = {'learn_rate': 0.2, 'nbins': 1024, 'ntrees': ntrees, 'max_depth': max_depth, 'min_rows': 10, 'response': response, 'validation': parseTestResult['destination_key'], 'ignored_cols_by_name': ignored_cols_by_name, }
            kwargs = params.copy()
            h2o.beta_features = True
            trainStart = time.time()
            gbmTrainResult = h2o_cmd.runGBM(parseResult=parseTrainResult, noPoll=True, timeoutSecs=(timeoutSecs * 4), destination_key=((modelKey + '_') + str(trial)), **kwargs)
            trainElapsed = (time.time() - trainStart)
            print 'GBM dispatch completed in', trainElapsed, 'seconds. On dataset: ', trainFilename
        h2j.pollWaitJobs(timeoutSecs=timeoutSecs, pollTimeoutSecs=timeoutSecs)
