import unittest, random, sys, time
sys.path.extend(['.', '..', 'py'])
import h2o, h2o_browse as h2b, h2o_exec as h2e, h2o_hosts, h2o_import as h2i
print 'FIX!: need to test the && and || reduction operators'
DO_FUNCTION = False
initList = []
deepIfElse = ''
closeParen = 0
for i in range(20):
    deepIfElse += 'ifelse(1,0,'
    deepIfElse += 'ifelse(0,1,'
    closeParen += 1
deepIfElse += '0'
for i in range(closeParen):
    deepIfElse += '))'
exprListFull = [deepIfElse, 'cos(r1$C1)', 'sin(r1$C1)', 'tan(r1$C1)', 'acos(r1$C1)', 'asin(r1$C1)', 'atan(r1$C1)', 'cosh(r1$C1)', 'sinh(r1$C1)', 'tanh(r1$C1)', 'abs(r1$C1)', 'sgn(r1$C1)', 'sqrt(r1$C1)', 'ceil(r1$C1)', 'floor(r1$C1)', 'log(r1$C1)', 'exp(r1$C1)', 'is.na(r1$C1)', 'length(r1[,1])', 'length(r1[1,])', 'r1[r1$C1==1234567,]', 'length(r1[r1$C1==1234567,])', 'r1$C1&&r1$C2', 'r1$C1||r1$C2', 'ifelse(1, r1, r1)', 'cbind(r1$C1, r1$C2)', 'print(r1[1,])', 'cut(r1$C1,2)', 'findInterval(r1$C1,1,1)', 'runif(r1$C1,-1)', 'scale(r1$C1)', 'seq_len(5)', 'seq(0.1,10.1,2.3)', 'rep_len(0.1,10)', 'c(0,0,0)', 'table(r1$C1)', 'unique(r1$C1)', 'factor(r1$C1)', 'nrow(r1)', 'sd(r1$C1)', 'ncol(r1)', 'length(r1$C1)', 'is.factor(r1$C1)', 'any.factor(r1)', 'any.na(r1)', 'isTRUE(r1)', 'min.na.rm(r1)', 'max.na.rm(r1)', 'min(r1)', 'max(r1)', 'xorsum(r1)', 'r1[,c(-1,-5, -40)]', 'r1[,-c(1,5, 40)]', 'apply(r1, 2, function(x) { mean(x) })', 'apply(r1, 2, function(x) { sd(x) })', 'apply(r1, 2, function(x) { sd(x)/mean(x) })', 'ddply(r1,c(3),nrow)', 'ddply(r1,c(7),nrow)', 's1=c(1); s2=c(2); s3=c(3); s4=c(4); s5=s1+s2+s3+s4;s.hex = r1[!is.na(r1[,13]),]', 'apply(r1,2,function(x){total=sum(ifelse(is.na(x),0,x)); rcnt=nrow(x)-sum(is.na(x)); mean=total / rcnt; ifelse(is.na(x),mean,x)})', 's.hex = r1[!is.na(r1[,13]),]', 'r1=apply(r1,2,function(x){ifelse(is.na(x),0,x)})', 'cct.hex=runif(r1, -1);rTrain=r1[cct.hex<=0.9,];rTest=r1[cct.hex>0.9,]', 'r1[,1]=r1[,1]==1.0', 'r1[,1]=r1$C1==1.0', 'b.hex=runif(r1[,1], -1)', 'b.hex=runif(r1$C1, -1)', 'b.hex=runif(r1[1,], -1)', '1.23', '1.23e0<2.34e1', '+1.23e0<+2.34e1', '-1.23e0<+-2.34e1', '-1.23e000<+-2.34e100', '-1.23e-001<+-2.34e-100', '1.23<2.34', '1.23<=2.34', '1.23>2.34', '1.23>=2.34', '1.23==2.34', '1.23!=2.34', '1.23 <2.34', '1.23 <=2.34', '1.23 >2.34', '1.23 >=2.34', '1.23 ==2.34', '1.23 !=2.34', '1.23< 2.34', '1.23<= 2.34', '1.23> 2.34', '1.23>= 2.34', '1.23== 2.34', '1.23!= 2.34', 'r1', 'r1[2,3]', 'r1[2+4,-4]', 'r1[1,-1]; r1[1,-1]; r1[1,-1]', 'r1[1,]', 'r1[,1]', 'r1+1', 'r1-r1', '1.23+(r1-r1)', '1.23+(r1$C1-r1$C2)', '(1.23+r1)-r1', '(1.23+r1$C1)-r1$C2', 'min(r1,1+2)', 'min(r1$C1,1+2)', 'is.na(r1)', 'is.na(r1$C1)', 'nrow(r1)*3', 'nrow(r1$C1)*3', 'r1[nrow(r1)-1,ncol(r1)-1]', 'x=0; x+2', 'x=1', 'x<-1', 'a=r1', 'r1[nrow(r1),]', 'r1[,ncol(r1)]', 'r1[,ncol(r1$C1)]', 'c(1,3,5)', 'sum(1,2,3)', 'sum(c(1,3,5))', 'sum(4,c(1,3,5),2,6)', 'sum(1,r1,3)', 'sum(1,r1$C1,3)', 'r1[,c(1)]', 'r1[c(1),]', 'r1[c(1,3,5),]', 'r1[,c(1,3,5)]', 'a=c(11,22,33,44,55,66); a[c(2,6,1),]', 'r1[r1[,1]>4,]', 'apply(r1,2,sum)', 'apply(r1$C1,2,sum)', 'mean=function(x){apply(x,2,sum)/nrow(x)};mean(r1)', 'ifelse(0,1,2)', 'ifelse(0,r1+1,r1+2)', 'ifelse(r1>3,99,r1)', 'ifelse(0,+,*)(1,2)', 'factor(r1[,5])', 'factor(r1$C1)', 'r1[,1]', 'r1$C1', 'r1[1,]', 'r1[,1]+1', 'r1$C1+1', 'r1[1,]+1', 'r1[,1]=3.3;r1', 'r1[,1]=r1[,1]+1', 'r1[,ncol(r1)+1]=4', 'a=ncol(r1); r1[,c(a+1,a+2)]=5', 'a=0;x=0', 'a=c(1,2,3); a[a[,1]>1,1]', 'z.hex=a=c(1,2,3); a[a[,1]>1,1]']
if DO_FUNCTION:
    exprListFull += ['function(x,y,z){x[]}(r1,1,2)', 'function(x){x+1}(2)', 'function(x){y=x*2; y+1}(2)', 'function(x){y=1+2}(2)', 'a=1;a=2;function(x){x=a;a=3}', 'a=r1;function(x){x=a;a=3;nrow(x)*a}(a)', 'function(funy){function(x){funy(x)*funy(x)}}(sgn)(-2)']
if (1 == 0):
    exprList = []
    for i in range(10):
        expr = ''
        for j in range(1):
            expr += (('z.hex=' + random.choice(exprListFull)) + ';')
        exprList.append(expr)
exprList = exprListFull
if (__name__ == '__main__'):
    h2o.unit_main()
