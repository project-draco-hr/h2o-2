def test_rf_big1_nopoll(self):
    csvFilename = 'hhp_107_01.data.gz'
    csvPathname = h2o.find_file(('smalldata/' + csvFilename))
    key2 = (csvFilename + '.hex')
    print ('\n' + csvPathname)
    parseKey = h2o_cmd.parseFile(csvPathname=csvPathname, key2=key2, timeoutSecs=15)
    rfViewInitial = []
    rfView = {}
    for jobDispatch in range(25):
        start = time.time()
        kwargs = {}
        model_key = ('RF_model' + str(jobDispatch))
        randomNode = h2o.nodes[random.randint(0, (len(h2o.nodes) - 1))]
        h2o_cmd.runRFOnly(node=randomNode, parseKey=parseKey, model_key=model_key, timeoutSecs=300, noPoll=True, **kwargs)
        print 'rfView:', h2o.dump_json(rfView)
        rfView['data_key'] = key2
        rfView['model_key'] = model_key
        rfViewInitial.append(rfView)
        print 'rf job dispatch end on ', csvPathname, 'took', (time.time() - start), 'seconds'
        print '\njobDispatch #', jobDispatch
    h2o_jobs.pollWaitJobs(pattern='RF_model', timeoutSecs=180, pollTimeoutSecs=120, retryDelaySecs=5)
    for rfView in rfViewInitial:
        print 'Checking completed job, with no polling:', rfView
        print 'rfView', h2o.dump_json(rfView)
        data_key = rfView['data_key']
        model_key = rfView['model_key']
        a = h2o.nodes[0].random_forest_view(data_key, model_key, noPoll=True)
        h2o_rf.simpleCheckRFView(None, a)
