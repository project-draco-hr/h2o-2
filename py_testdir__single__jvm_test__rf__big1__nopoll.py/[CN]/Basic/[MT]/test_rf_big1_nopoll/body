def test_rf_big1_nopoll(self):
    csvFilename = 'hhp_107_01.data.gz'
    csvPathname = h2o.find_file(('smalldata/' + csvFilename))
    key2 = (csvFilename + '.hex')
    print ('\n' + csvPathname)
    parseKey = h2o_cmd.parseFile(csvPathname=csvPathname, key2=key2, timeoutSecs=15)
    rfViewInitial = []
    for jobDispatch in range(100):
        start = time.time()
        kwargs = {}
        model_key = ('RF_model' + str(jobDispatch))
        kwargs['ntree'] = 7
        kwargs['seed'] = random.randint(0, sys.maxint)
        randomNode = h2o.nodes[random.randint(0, (len(h2o.nodes) - 1))]
        h2o_cmd.runRFOnly(node=randomNode, parseKey=parseKey, model_key=model_key, timeoutSecs=300, noPoll=True, **kwargs)
        rfView = {}
        rfView['data_key'] = key2
        rfView['model_key'] = model_key
        rfView['ntree'] = kwargs['ntree']
        rfViewInitial.append(rfView)
        print 'rf job dispatch end on ', csvPathname, 'took', (time.time() - start), 'seconds'
        print '\njobDispatch #', jobDispatch
    h2o_jobs.pollWaitJobs(pattern='RF_model', timeoutSecs=300, pollTimeoutSecs=10, retryDelaySecs=5)
    first = None
    print 'rfViewInitial', rfViewInitial
    for rfView in rfViewInitial:
        print 'Checking completed job:', rfView
        print 'rfView', h2o.dump_json(rfView)
        data_key = rfView['data_key']
        model_key = rfView['model_key']
        ntree = rfView['ntree']
        print 'Temporary hack: need to do two rf views minimum, to complete a RF (confusion matrix creation)'
        rfViewResult = h2o_cmd.runRFView(None, data_key, model_key, ntree=ntree, timeoutSecs=60, noPoll=False)
        if (first is None):
            first = rfViewResult.copy()
            firstModelKey = model_key
            print 'first', h2o.dump_json(first)
        else:
            print 'Comparing', model_key, 'to', firstModelKey
            df = h2o_util.JsonDiff(rfViewResult, first, vice_versa=True, with_values=True)
            print 'df.difference:', h2o.dump_json(df.difference)
