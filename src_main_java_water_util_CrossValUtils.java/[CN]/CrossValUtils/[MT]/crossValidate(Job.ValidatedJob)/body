{
  if (job.state != Job.JobState.RUNNING)   return;
  if (job.validation != null)   throw new IllegalArgumentException("Cannot provide validation dataset and n_folds > 0 at the same time.");
  if (job.n_folds <= 1)   throw new IllegalArgumentException("n_folds must be >= 2 for cross-validation.");
  final String basename=job.destination_key.toString();
  long[] offsets=new long[job.n_folds + 1];
  Frame[] cv_preds=new Frame[job.n_folds];
  for (int i=0; i < job.n_folds; ++i) {
    if (job.state != Job.JobState.RUNNING)     break;
    Key[] destkeys=new Key[]{Key.make(basename + "_xval" + i+ "_train"),Key.make(basename + "_xval" + i+ "_holdout")};
    NFoldFrameExtractor nffe=new NFoldFrameExtractor(job.source,job.n_folds,i,destkeys,null);
    H2O.submitTask(nffe);
    Frame[] splits=nffe.getResult();
    job.crossValidate(splits,cv_preds,offsets,i);
    if (!job.keep_cross_validation_splits)     for (    Frame f : splits)     f.delete();
  }
  boolean put_back=UKV.get(job.response._key) == null;
  if (put_back)   DKV.put(job.response._key,job.response);
  ((Model)UKV.get(job.destination_key)).scoreCrossValidation(job,job.source,job.response,cv_preds,offsets);
  if (put_back)   UKV.remove(job.response._key);
}
