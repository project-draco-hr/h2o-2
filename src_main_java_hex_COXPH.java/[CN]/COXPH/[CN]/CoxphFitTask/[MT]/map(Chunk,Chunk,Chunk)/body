{
  countCensored=MemoryManager.malloc8(_n_time);
  countEvents=MemoryManager.malloc8(_n_time);
  sumXEvents=MemoryManager.malloc8d(_n_time);
  sumXBetaEvents=MemoryManager.malloc8d(_n_time);
  sumExpXBeta=MemoryManager.malloc8d(_n_time);
  sumXExpXBeta=MemoryManager.malloc8d(_n_time);
  sumXXExpXBeta=MemoryManager.malloc8d(_n_time);
  for (int i=0; i < stop._len; i++) {
    long stop_i=stop.at80(i);
    long event_i=events.at80(i);
    double x_i=xs.at0(i);
    if (!Double.isNaN(x_i)) {
      int index=(int)(stop_i - _min_time);
      double xbeta=x_i * _beta;
      if (event_i > 0) {
        countEvents[index]++;
        sumXEvents[index]+=x_i;
        sumXBetaEvents[index]+=xbeta;
      }
 else       countCensored[index]++;
      double expXBeta=Math.exp(xbeta);
      sumExpXBeta[index]+=expXBeta;
      sumXExpXBeta[index]+=x_i * expXBeta;
      sumXXExpXBeta[index]+=x_i * x_i * expXBeta;
      n++;
    }
  }
}
