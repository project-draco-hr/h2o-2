def test_GLM2_mnist(self):
    h2o.beta_features = True
    if DO_HDFS:
        importFolderPath = 'mnist'
        bucket = None
        schema = 'hdfs'
    else:
        importFolderPath = 'mnist'
        bucket = 'home-0xdiag-datasets'
        schema = 'local'
    csvFilelist = [('mnist_training.csv.gz', 'mnist_testing.csv.gz', 600)]
    trial = 0
    for (trainCsvFilename, testCsvFilename, timeoutSecs) in csvFilelist:
        trialStart = time.time()
        testKey = (((testCsvFilename + '_') + str(trial)) + '.hex')
        csvPathname = ((importFolderPath + '/') + testCsvFilename)
        start = time.time()
        parseTestResult = h2i.import_parse(bucket=bucket, path=csvPathname, schema=schema, hex_key=testKey, timeoutSecs=timeoutSecs)
        elapsed = (time.time() - start)
        print 'parse end on ', testCsvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseTestResult['destination_key']
        print "We won't use this pruning of x on test data. See if it prunes the same as the training"
        y = 0
        print 'y:'
        ignoreX = h2o_glm.goodXFromColumnInfo(y, key=parseTestResult['destination_key'], timeoutSecs=300, forRF=True)
        trainKey = (((trainCsvFilename + '_') + str(trial)) + '.hex')
        csvPathname = ((importFolderPath + '/') + testCsvFilename)
        start = time.time()
        parseTrainResult = h2i.import_parse(bucket=bucket, path=csvPathname, schema=schema, hex_key=trainKey, timeoutSecs=timeoutSecs)
        elapsed = (time.time() - start)
        print 'parse end on ', trainCsvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseTrainResult['destination_key']
        print "This is the pruned x we'll use"
        ignoreX = h2o_glm.goodXFromColumnInfo(y, key=parseTrainResult['destination_key'], timeoutSecs=300, forRF=True)
        print 'ignoreX:', ignoreX
        modelKey = 'GLM_model'
        params = {'ignored_cols': ignoreX, 'response': ('C' + str(y)), 'family': 'binomial', 'lambda': 0.5, 'alpha': 0.0001, 'max_iter': 15, 'n_folds': 1, 'beta_epsilon': 0.0001, 'destination_key': modelKey, }
        if DO_ALL_DIGITS:
            cases = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        else:
            cases = [8]
        for c in cases:
            kwargs = params.copy()
            print 'Trying binomial with case:', c
            if DO_BUG:
                execExpr = ('A.hex=%s;A.hex[,%s]=(A.hex[,%s]==%s)' % (trainKey, (y + 1), (y + 1), c))
                h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
            else:
                execExpr = ('A.hex=%s' % trainKey)
                h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
                execExpr = ('A.hex[,%s]=(A.hex[,%s]==%s)' % ((y + 1), (y + 1), c))
                h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
            if DO_BUG:
                execExpr = ('B.hex=%s;B.hex[,%s]=(B.hex[,%s]==%s)' % (testKey, (y + 1), (y + 1), c))
                h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
            else:
                execExpr = ('B.hex=%s' % testKey)
                h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
                execExpr = ('B.hex[,%s]=(B.hex[,%s]==%s)' % ((y + 1), (y + 1), c))
                h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
            timeoutSecs = 1800
            start = time.time()
            aHack = {'destination_key': 'A.hex', }
            glmFirstResult = h2o_cmd.runGLM(parseResult=aHack, timeoutSecs=timeoutSecs, pollTimeoutSecs=60, noPoll=True, **kwargs)
            h2o_jobs.pollStatsWhileBusy(timeoutSecs=timeoutSecs, pollTimeoutSecs=60, retryDelaySecs=5)
            glm = h2o.nodes[0].glm_view(_modelKey=modelKey)
            elapsed = (time.time() - start)
            print 'GLM completed in', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
            h2o_glm.simpleCheckGLM(self, glm, None, noPrint=True, **kwargs)
            modelKey = glm['glm_model']['_selfKey']
            if (1 == 0):
                cm = glm['glm_model']['submodels'][0]['validation']['_cms'][0]['_arr']
                print 'cm:', cm
                pctWrong = h2o_gbm.pp_cm_summary(cm)
                print '\nTrain\n==========\n'
                print h2o_gbm.pp_cm(cm)
            predictKey = 'Predict.hex'
            start = time.time()
            predictResult = h2o_cmd.runPredict(data_key='B.hex', model_key=modelKey, destination_key=predictKey, timeoutSecs=timeoutSecs)
            predictCMResult = h2o.nodes[0].predict_confusion_matrix(actual='B.hex', vactual=('C' + str(y)), predict=predictKey, vpredict='predict')
            cm = predictCMResult['cms'][5]
            pctWrong = h2o_gbm.pp_cm_summary(cm)
            self.assertLess(pctWrong, 9, 'Should see less than 9% error (class = 4)')
            print '\nTest\n==========\n'
            print h2o_gbm.pp_cm(cm)
