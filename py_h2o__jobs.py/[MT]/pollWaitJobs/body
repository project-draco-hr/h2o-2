def pollWaitJobs(pattern=None, timeoutSecs=30, retryDelaySecs=5):
    anyBusy = True
    waitTime = 0
    while anyBusy:
        anyBusy = False
        a = h2o.nodes[0].jobs_admin()
        jobs = a['jobs']
        patternKeys = []
        for j in jobs:
            if (pattern and (pattern in j['destination_key'])):
                patternKeys.append(j['destination_key'])
            if (j['end_time'] == ''):
                anyBusy = True
                h2o.verboseprint('waiting', waitTime, 'secs, still not done - ', 'destination_key:', j['destination_key'], 'progress:', j['progress'], 'cancelled:', j['cancelled'], 'end_time:', j['end_time'])
        if (anyBusy and (waitTime > timeoutSecs)):
            print h2o.dump_json(jobs)
            raise Exception("Some queued jobs haven't completed after", timeoutSecs, 'seconds')
        sys.stdout.write('.')
        sys.stdout.flush()
        time.sleep(retryDelaySecs)
        waitTime += retryDelaySecs
    return patternKeys
