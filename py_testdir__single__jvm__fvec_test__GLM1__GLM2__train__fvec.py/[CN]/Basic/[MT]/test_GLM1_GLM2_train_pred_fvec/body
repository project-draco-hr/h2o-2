def test_GLM1_GLM2_train_pred_fvec(self):
    h2o.beta_features = False
    SYNDATASETS_DIR = h2o.make_syn_dir()
    trees = 15
    timeoutSecs = 120
    x = None
    ignore_X = None
    if (1 == 1):
        bucket = 'smalldata'
        csvPathname = 'logreg/benign.csv'
        hexKey = 'benign.hex'
        FAMILY = 'binomial'
        x = '2,4,5,6,7,8,9,10,11,12,13'
        ignoreX = '0,1'
        y = 3
        FORCE_BINOMIAL_RESPONSE = False
    if (1 == 0):
        bucket = 'home-0xdiag-datasets'
        csvPathname = 'standard/covtype.data'
        hexKey = 'covtype.data.hex'
        FAMILY = 'binomial'
        y = 54
        FORCE_BINOMIAL_RESPONSE = True
    if (1 == 0):
        bucket = 'home-0xdiag-datasets'
        csvPathname = 'standard/covtype.shuffled.10pct.data'
        hexKey = 'covtype.shuffled.10pct.data.hex'
        FAMILY = 'binomial'
        y = 54
        FORCE_BINOMIAL_RESPONSE = True
    if (1 == 0):
        bucket = 'smalldata'
        csvPathname = 'iris/iris.csv'
        hexKey = 'iris.hex'
        FAMILY = 'binomial'
        y = 4
        FORCE_BINOMIAL_RESPONSE = True
    csvFullname = h2i.find_folder_and_filename(bucket, csvPathname, schema='put', returnFullPath=True)
    parseResult = h2i.import_parse(bucket=bucket, path=csvPathname, schema='put', hex_key=hexKey)
    h2o_cmd.runSummary(key=hexKey)
    trainKey = parseResult['destination_key']
    ignore_x = h2o_glm.goodXFromColumnInfo(y, key=parseResult['destination_key'], timeoutSecs=300)
    h2o.beta_features = False
    CLASS = 1
    kwargs = {'lsm_solver': LSM_SOLVER, 'standardize': STANDARDIZE, 'x': x, 'y': y, 'family': FAMILY, 'n_folds': 0, 'max_iter': MAX_ITER, 'beta_epsilon': BETA_EPSILON, }
    if ((FAMILY == 'binomial') and FORCE_BINOMIAL_RESPONSE):
        kwargs.update({'case': CLASS, 'case_mode': '=', })
    kwargs.update({'alpha': TRY_ALPHA, 'lambda': TRY_LAMBDA, })
    timeoutSecs = 120
    start = time.time()
    glm = h2o_cmd.runGLM(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
    glm['GLMModel']['GLMParams']['family'] = FAMILY
    print 'glm1 end on ', csvPathname, 'took', (time.time() - start), 'seconds'
    (warnings, coefficients1, intercept1) = h2o_glm.simpleCheckGLM(self, glm, None, **kwargs)
    iterations1 = glm['GLMModel']['iterations']
    err1 = glm['GLMModel']['validations'][0]['err']
    nullDev1 = glm['GLMModel']['validations'][0]['nullDev']
    resDev1 = glm['GLMModel']['validations'][0]['resDev']
    if (FAMILY == 'binomial'):
        classErr1 = glm['GLMModel']['validations'][0]['classErr']
        auc1 = glm['GLMModel']['validations'][0]['auc']
    h2o.beta_features = True
    kwargs = {'standardize': STANDARDIZE, 'ignored_cols': ignoreX, 'response': y, 'family': FAMILY, 'n_folds': 0, 'max_iter': MAX_ITER, 'beta_epsilon': BETA_EPSILON, }
    timeoutSecs = 120
    if ((FAMILY == 'binomial') and FORCE_BINOMIAL_RESPONSE):
        execExpr = ('B.hex=%s; B.hex[,%s]=(%s[,%s]==%s)' % (trainKey, (y + 1), trainKey, (y + 1), CLASS))
        h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
        bHack = {'destination_key': 'B.hex', }
    else:
        bHack = parseResult
    kwargs.update({'alpha': TRY_ALPHA, 'lambda': TRY_LAMBDA, })
    start = time.time()
    glm = h2o_cmd.runGLM(parseResult=bHack, timeoutSecs=timeoutSecs, **kwargs)
    print 'glm2 end on ', csvPathname, 'took', (time.time() - start), 'seconds'
    (warnings, coefficients, intercept) = h2o_glm.simpleCheckGLM(self, glm, None, **kwargs)
    modelKey = glm['glm_model']['_key']
    avg_err = glm['glm_model']['submodels'][0]['validation']['avg_err']
    best_threshold = glm['glm_model']['submodels'][0]['validation']['best_threshold']
    iteration = glm['glm_model']['submodels'][0]['iteration']
    resDev = glm['glm_model']['submodels'][0]['validation']['residual_deviance']
    nullDev = glm['glm_model']['submodels'][0]['validation']['null_deviance']
    if (FAMILY == 'binomial'):
        auc = glm['glm_model']['submodels'][0]['validation']['auc']
    self.assertLess(iterations1, (MAX_ITER - 1), msg=("GLM1: Too many iterations, didn't converge %s" % iterations1))
    self.assertLess(iteration, (MAX_ITER - 1), msg=("GLM2: Too many iterations, didn't converge %s" % iteration))
    nullDevExpected = nullDev1
    iterationExpected = iterations1
    coeff0 = coefficients[0]
    coeff0Expected = coefficients1[0]
    print 'coeff0 pct delta:', ('%0.3f' % ((100.0 * (abs(coeff0) - abs(coeff0Expected))) / abs(coeff0Expected)))
    coeff2 = coefficients[2]
    coeff2Expected = coefficients1[2]
    print 'coeff2 pct delta:', ('%0.3f' % ((100.0 * (abs(coeff2) - abs(coeff2Expected))) / abs(coeff2Expected)))
    if (FAMILY == 'binomial'):
        aucExpected = auc1
        self.assertAlmostEqual(auc, aucExpected, delta=10, msg=('GLM2 auc %s is too different from GLM1 %s' % (auc, aucExpected)))
    interceptExpected = intercept1
    print 'intercept pct delta:', ((100.0 * (abs(intercept) - abs(interceptExpected))) / abs(interceptExpected))
    avg_errExpected = err1
    interceptDelta = abs((abs(intercept1) - abs(intercept)))
    cDelta = [abs((abs(a) - abs(b))) for (a, b) in zip(coefficients1, coefficients)]

    def printit(s, c, d):
        pctDiff = (abs((d / c)) * 100)
        print ('GLM2: %s %-20.5e pct. diff: %5.2f' % (s, c, pctDiff))
    printit('intercept', intercept1, interceptDelta)
    print 'compare lengths coefficients1, coefficients, cDelta:', len(coefficients1), len(coefficients), len(cDelta)
    print 'GLM1:', coefficients1
    print 'GLM2:', coefficients
    print 'cDelta:', cDelta
    for (i, cValue) in enumerate(coefficients):
        printit('coefficient', cValue, cDelta[i])
