{
  RString response=new RString(html);
  response.replace("cloud_name",H2O.NAME);
  response.replace("node_name",H2O.SELF.toString());
  final H2O cloud=H2O.CLOUD;
  for (  H2ONode h2o : cloud._memary) {
    HeartBeat hb=h2o._heartbeat;
    RString row=response.restartGroup("tableRow");
    row.replace("host",h2o);
    row.replace("node",h2o);
    row.replace("num_cpus",(int)(hb._num_cpus));
    row.replace("free_mem",PrettyPrint.bytes(hb.get_free_mem()));
    row.replace("tot_mem",PrettyPrint.bytes(hb.get_tot_mem()));
    row.replace("max_mem",PrettyPrint.bytes(hb.get_max_mem()));
    row.replace("num_keys",(hb._keys));
    row.replace("val_size",PrettyPrint.bytes(hb.get_valsz()));
    row.replace("free_disk",PrettyPrint.bytes(hb.get_free_disk()));
    row.replace("max_disk",PrettyPrint.bytes(hb.get_max_disk()));
    row.replace("cpu_util",pos_neg(hb.get_cpu_util()));
    row.replace("cpu_load_1",pos_neg(hb.get_cpu_load1()));
    row.replace("cpu_load_5",pos_neg(hb.get_cpu_load5()));
    row.replace("cpu_load_15",pos_neg(hb.get_cpu_load15()));
    int fjq_hi=hb._fjqueue_hi;
    int fjt_hi=hb._fjthrds_hi;
    if (fjq_hi > HeartBeatThread.QUEUEDEPTH)     row.replace("queueStyleHi","background-color:green;");
    row.replace("fjthrds_hi",fjt_hi);
    row.replace("fjqueue_hi",fjq_hi);
    int fjq_lo=hb._fjqueue_lo;
    int fjt_lo=hb._fjthrds_lo;
    if (fjq_lo > HeartBeatThread.QUEUEDEPTH)     row.replace("queueStyleLo","background-color:green;");
    row.replace("fjthrds_lo",fjt_lo);
    row.replace("fjqueue_lo",fjq_lo);
    row.replace("rpcs",(int)hb._rpcs);
    row.replace("tcps_active",(int)hb._tcps_active);
    row.append();
  }
  response.replace("size",cloud._memary.length);
  response.replace("voting",Paxos._commonKnowledge ? "" : "Voting in progress");
  response.replace("locked",Paxos._cloudLocked ? "Cloud locked" : "");
  return response.toString();
}
