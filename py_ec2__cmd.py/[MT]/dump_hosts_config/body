def dump_hosts_config(ec2_config, reservation, filename=DEFAULT_HOSTS_FILENAME):
    if (not filename):
        filename = DEFAULT_HOSTS_FILENAME
    cfg = {}
    cfg['aws_credentials'] = find_file(ec2_config['aws_credentials'])
    cfg['username'] = ec2_config['username']
    cfg['key_filename'] = find_file(ec2_config['pem'])
    cfg['use_flatfile'] = True
    cfg['h2o_per_host'] = 1
    cfg['java_heap_GB'] = MEMORY_MAPPING[ec2_config['instance_type']]['xmx']
    cfg['java_extra_args'] = ''
    cfg['base_port'] = 54321
    cfg['ip'] = [i.private_ip_address for i in reservation.instances]
    cfg['ec2_instances'] = [{'id': i.id, 'private_ip_address': i.private_ip_address, 'public_ip_address': i.ip_address, 'public_dns_name': i.public_dns_name, } for i in reservation.instances]
    cfg['ec2_reservation_id'] = reservation.id
    cfg['ec2_region'] = ec2_config['region']
    cfg['redirect_import_folder_to_s3_path'] = True
    if ec2_config['hdfs_config']:
        cfg['hdfs_config'] = find_file(ec2_config['hdfs_config'])
    cmds = get_ssh_commands(ec2_config, reservation)
    idx = 1
    for cmd in cmds:
        cfg['ec2_comment_ssh_{0}'.format(idx)] = cmd
        idx += 1
    filename = filename.format(reservation.id)
    with open(filename, 'w+') as f:
        f.write(json.dumps(cfg, indent=4))
    log('Host config dumped into {0}'.format(filename))
    log('To terminate instances call:')
    log('\x1b[93mpython ec2_cmd.py terminate --hosts {0}\x1b[0m'.format(filename))
    log('To watch cloud in browser follow address:')
    log('   http://{0}:{1}'.format(reservation.instances[0].public_dns_name, cfg['base_port']))
