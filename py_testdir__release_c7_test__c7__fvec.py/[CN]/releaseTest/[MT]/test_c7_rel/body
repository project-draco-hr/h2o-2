def test_c7_rel(self):
    DO_INSPECT = False
    print "Since the python is not necessarily run as user=0xcust..., can't use a  schema='put' here"
    print 'Want to be able to run python as jenkins'
    print "I guess for big 0xcust files, we don't need schema='put'"
    print 'For files that we want to put (for testing put), we can get non-private files'
    print 'Running with h2o.beta_features=True for all'
    h2o.beta_features = True
    csvFilename = 'part-00000b'
    if (getpass.getuser() == 'kevin'):
        importFolderPath = '/home/hduser/data/'
    else:
        importFolderPath = '/mnt/0xcustomer-datasets/c2'
    csvPathname = ((importFolderPath + '/') + csvFilename)
    start = time.time()
    parseResult = h2i.import_parse(path=csvPathname, schema='local', timeoutSecs=500, separator=9, doSummary=False)
    print 'Parse of', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
    print "Parse result['destination_key']:", parseResult['destination_key']
    start = time.time()
    if DO_INSPECT:
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], timeoutSecs=500)
        print 'Inspect:', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
        h2o_cmd.infoFromInspect(inspect, csvPathname)
    summaryResult = h2o_cmd.runSummary(key=parseResult['destination_key'], max_ncols=2)
    keepPattern = 'oly_|mt_|b_'
    y = 'is_purchase'
    print 'y:', y
    if DO_INSPECT:
        x = h2o_glm.goodXFromColumnInfo(y, keepPattern=keepPattern, key=parseResult['destination_key'], timeoutSecs=300)
        print 'x:', x
    else:
        x = None
    kwargs = {'vresponse': y, 'family': 'binomial', 'lambda': 1e-05, 'alpha': 0.5, 'max_iter': 4, 'n_folds': 1, 'beta_epsilon': 0.0001, }
    timeoutSecs = 3600
    start = time.time()
    glm = h2o_cmd.runGLM(parseResult=parseResult, timeoutSecs=timeoutSecs, pollTimeoutSecs=60, noPoll=True, **kwargs)
    h2j.pollWaitJobs(timeoutSecs=timeoutSecs, pollTimeoutSecs=60)
    elapsed = (time.time() - start)
    print 'glm completed in', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
