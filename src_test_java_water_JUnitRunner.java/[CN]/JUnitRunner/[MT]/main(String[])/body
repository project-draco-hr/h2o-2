{
  int[] ports=new int[3];
  int port=54321;
  for (int i=0; i < ports.length; i++) {
    for (; ; ) {
      if (isOpen(port) && isOpen(port + 1)) {
        ports[i]=port;
        port+=2;
        break;
      }
      port++;
    }
  }
  String flat="";
  for (int i=0; i < ports.length; i++)   flat+="127.0.0.1:" + ports[i] + "\n";
  String[] a=new String[]{"-ip","127.0.0.1","-flatfile",Utils.writeFile(flat).getAbsolutePath()};
  H2O.OPT_ARGS.ip="127.0.0.1";
  args=(String[])ArrayUtils.addAll(a,args);
  ArrayList<Node> nodes=new ArrayList<Node>();
  for (int i=1; i < ports.length; i++)   nodes.add(new NodeVM(Utils.add(args,"-port","" + ports[i])));
  args=Utils.add(new String[]{"-mainClass",Master.class.getName()},args);
  Node master=new NodeVM(Utils.add(args,"-port","" + ports[0]));
  nodes.add(master);
  File out=null, err=null, sandbox=new File("sandbox");
  sandbox.mkdirs();
  Utils.clearFolder(sandbox);
  for (int i=0; i < nodes.size(); i++) {
    out=File.createTempFile("junit-" + i + "-out-",null,sandbox);
    err=File.createTempFile("junit-" + i + "-err-",null,sandbox);
    nodes.get(i).persistIO(out.getAbsolutePath(),err.getAbsolutePath());
    nodes.get(i).start();
  }
  int exit=master.waitFor();
  if (exit != 0) {
    Log.log(out,System.out);
    Thread.sleep(100);
    Log.log(err,System.err);
  }
  for (  Node node : nodes)   node.kill();
  if (exit == 0)   System.out.println("OK");
  System.exit(exit);
}
