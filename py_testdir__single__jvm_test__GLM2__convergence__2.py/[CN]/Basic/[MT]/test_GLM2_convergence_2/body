def test_GLM2_convergence_2(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(100, 1, 'cD', 300)]
    lenNodes = len(h2o.nodes)
    USEKNOWNFAILURE = False
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = ('syn_%s_%sx%s.csv' % (SEEDPERFILE, rowCount, colCount))
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print '\nCreating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        if USEKNOWNFAILURE:
            csvFilename = 'failtoconverge_100x50.csv'
            csvPathname = ('logreg/' + csvFilename)
        parseResult = h2i.import_parse(path=csvPathname, hex_key=hex_key, timeoutSecs=10, schema='put')
        print "Parse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvFilename)
        y = colCount
        kwargs = {'max_iter': 40, 'lambda': 0.1, 'alpha': 0.5, 'n_folds': 0, 'beta_epsilon': 0.0001, }
        if USEKNOWNFAILURE:
            kwargs['response'] = 50
        else:
            kwargs['response'] = y
        emsg = None
        for i in range(3):
            start = time.time()
            glm = h2o_cmd.runGLM(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
            print 'glm #', i, 'end on', csvPathname, 'took', (time.time() - start), 'seconds'
            (warnings, coefficients, intercept) = h2o_glm.simpleCheckGLM(self, glm, None, allowFailWarning=True, **kwargs)
            if (1 == 0):
                print '\n', '\ncoefficients in col order:'
                if USEKNOWNFAILURE:
                    showCols = 50
                else:
                    showCols = colCount
                for c in range(showCols):
                    print ('%s:\t%s' % (c, coefficients[c]))
                print 'intercept:\t', intercept
            x = re.compile('[Ff]ailed')
            if warnings:
                print 'warnings:', warnings
                for w in warnings:
                    print 'w:', w
                    if re.search(x, w):
                        if (emsg is None):
                            emsg = w
                        print w
            if emsg:
                break
        if (not h2o.browse_disable):
            h2b.browseJsonHistoryAsUrlLastMatch('Inspect')
            time.sleep(5)
            h2b.browseJsonHistoryAsUrlLastMatch('GLM')
            time.sleep(5)
        if (emsg is not None):
            raise Exception(emsg)
