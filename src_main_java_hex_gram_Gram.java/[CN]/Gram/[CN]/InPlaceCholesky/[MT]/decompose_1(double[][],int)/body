{
  boolean isspd=true;
  final int N=xx.length;
  for (int j=0; j < N; j+=STEP) {
    int tjR=Math.min(j + STEP,N);
    for (int tj=j; tj < tjR; tj++) {
      if (xx[tj][tj] <= 0) {
        xx[tj][tj]=0.0;
        isspd=false;
      }
      xx[tj][tj]=Math.sqrt(xx[tj][tj]);
      double d=1.0 / xx[tj][tj];
      for (int ti=tj + 1; ti < tjR; ti++) {
        xx[ti][tj]*=d;
      }
      for (int ui=tj + 1; ui < tjR; ui++)       for (int uj=tj + 1; uj <= ui; uj++)       xx[ui][uj]-=xx[ui][tj] * xx[uj][tj];
    }
    if (tjR == N)     break;
    new StripTask2(null,xx,j + STEP,N,j,j + STEP).invoke();
    new TriangleTask2(null,xx,j,j + STEP,j + STEP,N).invoke();
  }
  return new InPlaceCholesky(xx,isspd);
}
