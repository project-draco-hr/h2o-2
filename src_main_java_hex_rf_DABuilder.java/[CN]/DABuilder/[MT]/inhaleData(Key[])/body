{
  Timer t_inhale=new Timer();
  RFModel rfmodel=_drf._rfmodel;
  final ValueArray ary=DKV.get(rfmodel._dataKey).get();
  final int[] modelDataMap=rfmodel.columnMapping(ary.colNames());
  final DataAdapter dapt=new DataAdapter(ary,rfmodel,modelDataMap,getRowCount(keys),getChunkId(keys),_drf._params._seed,_drf._params._binLimit,_drf._params._classWt);
  checkAndLimitFeatureUsedPerSplit(dapt);
  final int ncolumns=rfmodel._va._cols.length;
  ArrayList<RecursiveAction> dataInhaleJobs=new ArrayList<RecursiveAction>();
  int start_row=0;
  for (  final Key k : keys) {
    final int S=start_row;
    if (!k.home())     continue;
    final int rows=ary.rpc(ValueArray.getChunkIndex(k));
    dataInhaleJobs.add(loadChunkAction(dapt,ary,k,modelDataMap,ncolumns,rows,S));
    start_row+=rows;
  }
  System.out.println("before invokeAll, jobs=" + dataInhaleJobs.size());
  ForkJoinTask.invokeAll(dataInhaleJobs);
  System.out.println("after invokeAll");
  if (_drf._params._useNonLocalData) {
    final float OVERHEAD_MAGIC=3 / 8.f;
    long totalmem=Runtime.getRuntime().totalMemory();
    long localChunks=keys.length * ValueArray.CHUNK_SZ;
    long availMem=(long)(OVERHEAD_MAGIC * totalmem) - localChunks;
    if (availMem > 0) {
      int numkeys=(int)(availMem / ValueArray.CHUNK_SZ);
      System.err.println("TAvailM: MB " + availMem / 1024 / 1024);
      System.err.println("Can load keys: " + numkeys);
      ArrayList<Key> allkeys=new ArrayList<Key>(numkeys);
      for (int i=0; i < ary.chunks(); i++) {
        Key k=ary.getChunkKey(i);
        if (!k.home())         allkeys.add(k);
        if (allkeys.size() == numkeys)         break;
      }
      for (      final Key k : allkeys) {
        System.err.println("-> reloading more keys: " + k + " from "+ k.home_node());
        final int S=start_row;
        final int rows=ary.rpc(ValueArray.getChunkIndex(k));
        dataInhaleJobs.add(loadChunkAction(dapt,ary,k,modelDataMap,ncolumns,rows,S));
        start_row+=rows;
      }
    }
  }
  dapt.shrink();
  Log.debug(Sys.RANDF,"Inhale done in " + t_inhale);
  return dapt;
}
