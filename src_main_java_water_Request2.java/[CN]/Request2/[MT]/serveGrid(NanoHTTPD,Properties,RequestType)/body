{
  String[][] values=new String[_arguments.size()][];
  boolean gridSearch=false;
  for (int i=0; i < _arguments.size(); i++) {
    Argument arg=_arguments.get(i);
    if (arg._gridable) {
      String value=_parms.getProperty(arg._name);
      if (value != null) {
        boolean imbricated=value.contains("(");
        if (!arg._field.getType().isArray() || imbricated) {
          values[i]=split(value);
          if (values[i] != null && values[i].length > 1)           gridSearch=true;
        }
 else         if (arg._field.getType().isArray() && !imbricated) {
          values[i]=new String[]{value};
        }
      }
    }
  }
  if (!gridSearch)   return superServeGrid(server,parms,type);
  Lockable source=null;
  if (_parms.containsKey("source"))   source=DKV.get(Key.make((String)_parms.get("source"))).get();
  _parms.remove("destination_key");
  for (int i=0; i < _arguments.size(); i++)   if (_arguments.get(i)._name.equals("destination_key"))   values[i]=null;
  int[] counters=new int[values.length];
  ArrayList<Job> jobs=new ArrayList<Job>();
  for (; ; ) {
    Job job=(Job)create(_parms);
    Properties combination=new Properties();
    for (int i=0; i < values.length; i++) {
      if (values[i] != null) {
        String value=values[i][counters[i]];
        value=value.trim();
        combination.setProperty(_arguments.get(i)._name,value);
        _arguments.get(i).reset();
        _arguments.get(i).check(job,value);
      }
    }
    job._parms=combination;
    jobs.add(job);
    if (!increment(counters,values))     break;
  }
  GridSearch grid=new GridSearch(source);
  grid.jobs=jobs.toArray(new Job[jobs.size()]);
  return grid.superServeGrid(server,parms,type);
}
