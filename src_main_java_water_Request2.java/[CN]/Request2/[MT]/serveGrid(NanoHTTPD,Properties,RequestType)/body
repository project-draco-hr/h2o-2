{
  String[][] values=new String[_arguments.size()][];
  boolean gridSearch=false;
  for (int i=0; i < _arguments.size(); i++) {
    String value=_parms.getProperty(_arguments.get(i)._name);
    if (value != null) {
      int off=0;
      int next=0;
      while ((next=value.indexOf('|',off)) >= 0) {
        if (next != off)         values[i]=Utils.add(values[i],value.substring(off,next));
        off=next + 1;
        gridSearch=true;
      }
      if (off < value.length())       values[i]=Utils.add(values[i],value.substring(off));
    }
  }
  if (!gridSearch)   return superServeGrid(server,parms,type);
  _parms.remove("destination_key");
  for (int i=0; i < _arguments.size(); i++)   if (_arguments.get(i)._name.equals("destination_key"))   values[i]=null;
  int[] counters=new int[values.length];
  ArrayList<Job> jobs=new ArrayList<Job>();
  for (; ; ) {
    Job job=(Job)create(_parms);
    Properties combination=new Properties();
    for (int i=0; i < values.length; i++) {
      if (values[i] != null) {
        String value=values[i][counters[i]];
        combination.setProperty(_arguments.get(i)._name,value);
        _arguments.get(i).reset();
        _arguments.get(i).check(job,value);
      }
    }
    job._parms=combination;
    jobs.add(job);
    if (!increment(counters,values))     break;
  }
  GridSearch grid=new GridSearch();
  grid.jobs=jobs.toArray(new Job[jobs.size()]);
  return grid.superServeGrid(server,parms,type);
}
