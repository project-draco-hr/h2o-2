{
  if (arg._field.getType() != Key.class && value instanceof Key)   value=UKV.get((Key)value);
  try {
    if (arg._field.getType() == Key.class && value instanceof ValueArray)     value=((ValueArray)value)._key;
 else     if (arg._field.getType() == int.class && value instanceof Long)     value=((Long)value).intValue();
 else     if (arg._field.getType() == float.class && value instanceof Double)     value=((Double)value).floatValue();
 else     if (arg._field.getType() == Frame.class && value instanceof ValueArray)     value=((ValueArray)value).asFrame(input);
 else     if (value instanceof NumberSequence) {
      double[] ds=((NumberSequence)value)._arr;
      if (arg._field.getType() == int[].class) {
        int[] is=new int[ds.length];
        for (int i=0; i < is.length; i++)         is[i]=(int)ds[i];
        value=is;
      }
 else       value=ds;
    }
 else     if (value instanceof NumberSequenceFloat) {
      float[] fs=((NumberSequenceFloat)value)._arr;
      if (arg._field.getType() == int[].class) {
        int[] is=new int[fs.length];
        for (int i=0; i < is.length; i++)         is[i]=(int)fs[i];
        value=is;
      }
 else       value=fs;
    }
    arg._field.set(this,value);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
