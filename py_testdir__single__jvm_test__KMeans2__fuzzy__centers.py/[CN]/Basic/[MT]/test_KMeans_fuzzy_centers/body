def test_KMeans_fuzzy_centers(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    if DO_TWO_CLUSTER:
        genCenters = [[100, 100, 100, 100, 100, 100], [200, 200, 200, 200, 200, 200]]
        genCenters = [[100, 100], [200, 200]]
    else:
        genCenters = [[100, 100, 100, 100, 100, 100], [110, 110, 110, 110, 110, 110], [120, 120, 120, 120, 120, 120], [130, 130, 130, 130, 130, 130]]
    lenNodes = len(h2o.nodes)
    rowCount = 10000
    expected = [(g, rowCount, None) for g in genCenters]
    allowedDelta = (0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
    allowedDelta = (0.2, 0.2)
    worstError = None
    bestError = None
    timeoutSecs = 60
    hex_key = 'cA'
    print 'Generate synthetic dataset with first column constant = 0 and see what KMeans does'
    csvFilename = (((('syn_' + str(SEED)) + '_') + str(rowCount)) + '.csv')
    csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
    print 'Creating random', csvPathname
    dataset = write_syn_dataset(csvPathname, rowCount, genCenters, SEED)
    parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=(csvFilename + '.hex'))
    print "Parse result['destination_key']:", parseResult['destination_key']
    allErrors = []
    for trial in range(10):
        seed = random.randint(0, sys.maxint)
        kwargs = {'k': len(genCenters), 'initialization': 'PlusPlus', 'destination_key': 'k.hex', 'max_iter': 1000, }
        kmeans = h2o_cmd.runKMeans(parseResult=parseResult, timeoutSecs=5, **kwargs)
        (centers, tupleResultList) = h2o_kmeans.bigCheckResults(self, kmeans, csvPathname, parseResult, 'd', **kwargs)
        h2o.nodes[0].csv_download(src_key='d', csvPathname='kmeans_predict.csv')
        self.assertEqual(len(genCenters[0]), len(centers[0]), ("kmeans first center doesn't have same # of values as dataset row %s %s" % (len(genCenters[0]), len(centers[0]))))
        h2o_kmeans.compareResultsToExpected(self, tupleResultList, expected, allowedDelta, trial=trial)
        if h2o.beta_features:
            error = kmeans['model']['error']
            cluster_variances = kmeans['model']['cluster_variances']
            print 'trial:', trial, 'cluster_variances:', cluster_variances
        else:
            model_key = kmeans['destination_key']
            kmeansResult = h2o_cmd.runInspect(key=model_key)
            error = kmeansResult['KMeansModel']['error']
        genDistances = calc_best_distance(centers, dataset)
        print 'trial:', trial, 'genDistances:', genDistances
        print 'trial:', trial, 'centers:', centers
        print 'trial:', trial, 'error:', error
        if (abs((genDistances - error)) > (0.001 * genDistances)):
            raise Exception(('genDistances: %s error: %s are too different' % (genDistances, error)))
        if ((not bestError) or (error < bestError)):
            print 'Found smaller error:', error
            bestError = error
            bestCenters = centers
            bestSeed = seed
            bestTrial = trial
        if ((not worstError) or (error > worstError)):
            print 'Found larger error:', error
            worstError = error
        allErrors.append(error)
    print 'bestTrial:', bestTrial
    print 'bestError:', bestError
    print 'worstError:', worstError
    print 'bestCenters:', bestCenters
    print 'bestSeed:', bestSeed
    print 'allErrors:', allErrors
