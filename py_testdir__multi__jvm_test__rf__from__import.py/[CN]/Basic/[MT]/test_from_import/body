def test_from_import(self):
    importFolderPath = '/home/0xdiag/datasets'
    csvFilenameAll = [('manyfiles-nflx-gz/file_*.dat.gz', 'file_10.dat.gz')]
    csvFilenameList = csvFilenameAll
    trialMax = 2
    for (csvFilepattern, csvFilename) in csvFilenameList:
        for trial in range(trialMax):
            importFolderResult = h2i.setupImportFolder(None, importFolderPath)
            importFullList = importFolderResult['succeeded']
            importFailList = importFolderResult['failed']
            print '\n Problem if this is not empty: importFailList:', h2o.dump_json(importFailList)
            timeoutSecs = 500
            start = time.time()
            parseKey = h2i.parseImportFolderFile(None, csvFilepattern, importFolderPath, key2=(csvFilename + '.hex'), timeoutSecs=500)
            elapsed = (time.time() - start)
            print 'Parse #', trial, 'completed in', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
            print csvFilepattern, 'parse time:', parseKey['response']['time']
            print "Parse result['destination_key']:", parseKey['destination_key']
            inspect = h2o_cmd.runInspect(key=parseKey['destination_key'])
            origKey = parseKey['destination_key']
            execExpr = (('a = slice(' + origKey) + ',1,200)')
            h2e.exec_expr(h2o.nodes[0], execExpr, 'a', timeoutSecs=30)
            newParseKey = {'destination_key': 'a', }
            print ('\n' + csvFilepattern)
            start = time.time()
            print 'Temporarily hacking to do nothing instead of RF on the parsed file'
            for k in importFullList:
                deleteKey = k['key']
                if ((csvFilename in deleteKey) and (not ('.hex' in deleteKey))):
                    print '\nRemoving', deleteKey
                    removeKeyResult = h2o.nodes[0].remove_key(key=deleteKey)
            sys.stdout.write('.')
            sys.stdout.flush()
