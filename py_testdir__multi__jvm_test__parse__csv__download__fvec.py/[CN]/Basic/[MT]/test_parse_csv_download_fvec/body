def test_parse_csv_download_fvec(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    csvFilename = 'syn_prostate.csv'
    csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
    headerData = 'ID,CAPSULE,AGE,RACE,DPROS,DCAPS,PSA,VOL,GLEASON'
    rowData = rand_rowData()
    totalRows = 1000000
    write_syn_dataset(csvPathname, totalRows, headerData, rowData)
    print 'This is the same format/data file used by test_same_parse, but the non-gzed version'
    print '\nSchmoo the # of rows'
    for trial in range(5):
        rowData = rand_rowData()
        num = random.randint(4096, 10096)
        append_syn_dataset(csvPathname, rowData, num)
        totalRows += num
        src_key = ((csvFilename + '_') + str(trial))
        hex_key = (((csvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        parseResultA = h2i.import_parse(path=csvPathname, schema='put', src_key=src_key, hex_key=hex_key)
        print '\nA trial #', trial, 'totalRows:', totalRows, 'parse end on ', csvFilename, 'took', (time.time() - start), 'seconds'
        inspect = h2o_cmd.runInspect(key=hex_key)
        missingValuesListA = h2o_cmd.infoFromInspect(inspect, csvPathname)
        numColsA = inspect['numCols']
        numRowsA = inspect['numRows']
        byteSizeA = inspect['byteSize']
        csvDownloadPathname = (SYNDATASETS_DIR + '/csvDownload.csv')
        h2o.nodes[0].csv_download(src_key=hex_key, csvPathname=csvDownloadPathname)
        h2o.nodes[0].remove_key(hex_key)
        start = time.time()
        parseResultB = h2i.import_parse(path=csvDownloadPathname, schema='put', src_key=src_key, hex_key=hex_key)
        print 'B trial #', trial, 'totalRows:', totalRows, 'parse end on ', csvFilename, 'took', (time.time() - start), 'seconds'
        inspect = h2o_cmd.runInspect(key=hex_key)
        missingValuesListB = h2o_cmd.infoFromInspect(inspect, csvPathname)
        numColsB = inspect['numCols']
        numRowsB = inspect['numRows']
        byteSizeB = inspect['byteSize']
        self.assertEqual(missingValuesListA, missingValuesListB, 'missingValuesList mismatches after re-parse of downloadCsv result')
        self.assertEqual(numColsA, numColsB, 'numCols mismatches after re-parse of downloadCsv result')
        self.assertEqual(numRowsA, numRowsB, 'numRows mismatches after re-parse of downloadCsv result')
        h2o.check_sandbox_for_errors()
