def test_B_kmeans_benign(self):
    h2o.beta_features = True
    importFolderPath = 'logreg'
    csvFilename = 'benign.csv'
    hex_key = 'benign.hex'
    csvPathname = ((importFolderPath + '/') + csvFilename)
    print '\nStarting', csvFilename
    parseResult = h2i.import_parse(bucket='smalldata', path=csvPathname, hex_key=hex_key, header=1, timeoutSecs=180, noPoll=(not DO_POLL), doSummary=False)
    if (not DO_POLL):
        h2o_jobs.pollWaitJobs(timeoutSecs=300, pollTimeoutSecs=300, retryDelaySecs=5)
        parseResult['destination_key'] = hex_key
    inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
    print '\nStarting', csvFilename
    expected = [([10.5, 2.8, 40.3, 0.0, 12.0, 0.8, 1.6, 21.1, 11.4, 0.7, 2.9, 206.2, 36.7, 1.5], 15, 0), ([23.72897196261682, 2.3271028037383177, 44.81308411214953, 0.34579439252336447, 13.093457943925234, 1.4579439252336448, 1.3177570093457944, 24.16129367150993, 13.317757009345794, 0.5071931108136043, 2.6604011393039024, 121.6822429906542, 40.13084112149533, 1.691588785046729], 110, 0), ([29.2625, 2.7, 48.5125, 0.1625, 12.0625, 1.0375, 1.4875, 23.023665714263917, 12.6875, 0.5073033705353737, 3.090870788693428, 160.95, 43.3, 1.65], 71, 0), ([38.333333333333336, 2.3333333333333335, 52.666666666666664, 0.0, 14.333333333333334, 2.3333333333333335, 1.6666666666666667, 25.85955047607422, 12.0, 0.5056179761886597, 3.2846442063649497, 261.6666666666667, 43.0, 1.0], 4, 0)]
    allowedDelta = (0.01, 0.01, 0.01, 0.01)
    if DO_IGNORE:
        kwargs = {'k': 4, 'ignored_cols': 'STR', 'destination_key': 'benign_k.hex', 'seed': 265211114317615310, 'max_iter': 50, }
    else:
        kwargs = {'k': 4, 'ignored_cols': None, 'destination_key': 'benign_k.hex', 'seed': 265211114317615310, 'max_iter': 50, }
    kmeans = h2o_cmd.runKMeans(parseResult=parseResult, timeoutSecs=5, noPoll=(not DO_POLL), **kwargs)
    if (not DO_POLL):
        h2o_jobs.pollWaitJobs(timeoutSecs=300, pollTimeoutSecs=300, retryDelaySecs=5)
        kmeans['destination_key'] = 'benign_k.hex'
    modelView = h2o.nodes[0].kmeans_model_view(model='benign_k.hex')
    h2o.verboseprint('KMeans2ModelView:', h2o.dump_json(modelView))
    model = modelView['model']
    clusters = model['clusters']
    cluster_variances = model['cluster_variances']
    error = model['error']
    print 'cluster_variances:', cluster_variances
    print 'error:', error
    (centers, tupleResultList) = h2o_kmeans.bigCheckResults(self, kmeans, csvPathname, parseResult, 'd', **kwargs)
    h2o_kmeans.compareResultsToExpected(self, tupleResultList, expected, allowedDelta, trial=0)
