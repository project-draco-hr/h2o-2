{
  JsonObject result=new JsonObject();
  final int offset=_offset.value();
  final int view=_view.value();
  String filter=_filter.value();
  ArrayList<Key> akeys=new ArrayList<Key>();
  for (  Key key : H2O.globalKeySet(null))   if (key.user_allowed() && (filter == null || key.toString().contains(filter)) && H2O.get(key) != null)   akeys.add(key);
  Key[] keys=akeys.toArray(new Key[akeys.size()]);
  Arrays.sort(keys);
  if (keys.length < offset)   return Response.error("Not enough keys - request offset is " + offset + " but K/V contains "+ keys.length+ " keys.");
  if (keys.length > offset + view)   result.addProperty(Constants.MORE,true);
  final H2O cloud=H2O.CLOUD;
  JsonArray ary=new JsonArray();
  int len=Math.min(keys.length,offset + view);
  for (int i=offset; i < len; i++) {
    Value val=DKV.get(keys[i]);
    if (val != null)     ary.add(formatKeyRow(cloud,keys[i],val));
  }
  result.add(KEYS,ary);
  result.addProperty(NUM_KEYS,len - offset);
  result.addProperty(CLOUD_NAME,H2O.NAME);
  result.addProperty(NODE_NAME,H2O.SELF.toString());
  Response r=Response.done(result);
  r.addHeader("<form class='well form-inline' action='StoreView.html'>" + " <input type='text' class='input-small span10' placeholder='filter' " + "    name='filter' id='filter' value='" + _filter.value() + "' maxlength='512'>"+ " <button type='submit' class='btn btn-primary'>Filter keys!</button>"+ "</form>");
  r.setBuilder(KEYS,new PaginatedTable(argumentsToJson(),offset,view,keys.length,false));
  r.setBuilder(KEYS + "." + KEY,new KeyCellBuilder());
  r.setBuilder(KEYS + ".col_0",new KeyMinAvgMaxBuilder());
  r.setBuilder(KEYS + ".col_1",new KeyMinAvgMaxBuilder());
  r.setBuilder(KEYS + ".col_2",new KeyMinAvgMaxBuilder());
  r.setBuilder(KEYS + ".col_3",new KeyMinAvgMaxBuilder());
  r.setBuilder(KEYS + ".col_4",new KeyMinAvgMaxBuilder());
  r.setBuilder(MORE,new HideBuilder());
  return r;
}
