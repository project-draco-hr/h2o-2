{
  JsonObject result=new JsonObject();
  final int offset=_offset.value();
  final int view=_view.value();
  final String filter=_filter.value();
  H2O.KeySnapshot ks=H2O.KeySnapshot.globalSnapshot();
  if (filter != null)   ks=ks.filter(new H2O.KVFilter(){
    @Override public boolean filter(    H2O.KeyInfo k){
      return k._key.toString().indexOf(filter) != -1;
    }
  }
);
  final H2O.KeyInfo[] kinfos=ks._keyInfos;
  if (ks._keyInfos.length > offset + view)   result.addProperty(Constants.MORE,true);
  final H2O cloud=H2O.CLOUD;
  JsonArray ary=new JsonArray();
  int len=Math.min(kinfos.length,offset + view);
  for (int i=offset; i < len; i++) {
    Value val=DKV.get(kinfos[i]._key);
    if (val != null)     ary.add(formatKeyRow(cloud,kinfos[i]._key,val));
  }
  result.add(KEYS,ary);
  result.addProperty(NUM_KEYS,len - offset);
  result.addProperty(CLOUD_NAME,H2O.NAME);
  result.addProperty(NODE_NAME,H2O.SELF.toString());
  Response r=Response.done(result);
  r.addHeader("<form class='well form-inline' action='StoreView.html'>" + " <input type='text' class='input-small span10' placeholder='filter' " + "    name='filter' id='filter' value='" + _filter.value() + "' maxlength='512'>"+ " <button type='submit' class='btn btn-primary'>Filter keys!</button>"+ "</form>");
  r.setBuilder(KEYS,new PaginatedTable(argumentsToJson(),offset,view,kinfos.length,false));
  r.setBuilder(KEYS + "." + KEY,new KeyCellBuilder());
  r.setBuilder(KEYS + ".col_0",new KeyMinAvgMaxBuilder());
  r.setBuilder(KEYS + ".col_1",new KeyMinAvgMaxBuilder());
  r.setBuilder(KEYS + ".col_2",new KeyMinAvgMaxBuilder());
  r.setBuilder(KEYS + ".col_3",new KeyMinAvgMaxBuilder());
  r.setBuilder(KEYS + ".col_4",new KeyMinAvgMaxBuilder());
  r.setBuilder(MORE,new HideBuilder());
  return r;
}
