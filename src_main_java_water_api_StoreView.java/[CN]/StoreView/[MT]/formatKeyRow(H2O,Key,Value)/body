{
  JsonObject result=new JsonObject();
  result.addProperty(KEY,key.toString());
  result.addProperty(VALUE_SIZE,val.length());
  JsonObject mt=new JsonObject();
  JsonObject jcols[]=new JsonObject[]{mt,mt,mt,mt,mt};
  long rows=-1;
  int cols=-1;
  String str="";
  if (val.isFrame()) {
    Frame fr=val.get();
    rows=fr.numRows();
    cols=fr.numCols();
    result.addProperty(ROWS,rows);
    result.addProperty(COLS,cols);
    for (int i=0; i < jcols.length; ++i) {
      JsonObject col=new JsonObject();
      if (i < cols) {
        Vec v=fr.vecs()[i];
        col.addProperty(HEADER,fr._names[i]);
        if (!v.isEnum()) {
          col.addProperty(MIN,noNaN(v.min()));
          col.addProperty(MEAN,noNaN(v.mean()));
          col.addProperty(MAX,noNaN(v.max()));
        }
 else         if (v.domain().length > 0) {
          int max=v.domain().length;
          col.addProperty(MIN,v.domain()[0]);
          col.addProperty(MEAN,v.domain()[max / 2]);
          col.addProperty(MAX,v.domain()[max - 1]);
        }
      }
      jcols[i]=col;
    }
  }
  result.addProperty(ROWS,"");
  result.addProperty(COLS,"");
  for (int i=0; i < jcols.length; i++)   result.add("col_" + i,jcols[i]);
  result.addProperty(VALUE,str);
  return result;
}
