def get_ticks(self):
    '\n        Get process_total_ticks, system_total_ticks, sys_idle_ticks.\n        '
    max_retries = 30
    m = 0
    got_url_sys = False
    got_url_proc = False
    while (m < max_retries):
        print ((('Performing try : ' + str(m)) + ' out of total tries = ') + str(max_retries))
        url_sys = 'http://{}:{}/stat'.format(self.ip, 8000)
        url_proc = 'http://{}:{}/{}/stat'.format(self.ip, 8000, self.pid)
        r_sys = requests.get(url_sys).text.split('\n')[0]
        r_proc = requests.get(url_proc).text.strip().split()
        if (not got_url_sys):
            if (not (('404' and 'not' and 'found') in r_sys)):
                got_url_sys = True
        if (not got_url_proc):
            if (not (('404' and 'not' and 'found') in r_proc)):
                got_url_proc = True
        if (got_url_proc and got_url_sys):
            break
        m += 1
        time.sleep(1)
    if (not (got_url_proc and got_url_sys)):
        raise Exception('Max retries on /proc scrape exceeded! Did the JVM properly start?')
    url_sys = 'http://{}:{}/stat'.format(self.ip, 8000)
    url_proc = 'http://{}:{}/{}/stat'.format(self.ip, 8000, self.pid)
    r_sys = requests.get(url_sys).text.split('\n')[0]
    r_proc = requests.get(url_proc).text.strip().split()
    sys_user = int(r_sys.split()[1])
    sys_nice = int(r_sys.split()[2])
    sys_syst = int(r_sys.split()[3])
    sys_idle = int(r_sys.split()[4])
    sys_total_ticks = (((sys_user + sys_nice) + sys_syst) + sys_idle)
    try:
        print 'DEBUGGING /proc scraped values served up: '
        print r_proc
        print ' End of try 1.'
        proc_utime = int(r_proc[13])
        proc_stime = int(r_proc[14])
        process_total_ticks = (proc_utime + proc_stime)
    except:
        print 'DEBUGGING /proc/<pid>/'
        print 'This is try 2... Try 1 failed!'
        print 'Did H2O shutdown first before this scrape occured?'
        print r_proc
        print 'End of try 2....'
        r_proc = requests.get(url_proc).text.strip().split()
        proc_utime = int(r_proc[13])
        proc_stime = int(r_proc[14])
        process_total_ticks = (proc_utime + proc_stime)
    return {'process_total_ticks': process_total_ticks, 'system_total_ticks': sys_total_ticks, 'system_idle_ticks': sys_idle, }
