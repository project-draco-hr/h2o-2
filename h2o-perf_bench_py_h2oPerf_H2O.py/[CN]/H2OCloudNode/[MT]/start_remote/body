def start_remote(self):
    '\n        Start one node of H2O.\n        (Stash away the self.child and self.pid internally here.)\n\n        @return: none\n        '
    cmd = ['java', ('-Xmx' + self.xmx), '-jar', self.uploaded[self.h2o_jar], '-name', self.cloud_name, '-baseport', str(self.my_base_port)]
    ec2_hdfs_config_file_name = os.path.expanduser('~/.ec2/core-site.xml')
    if os.path.exists(ec2_hdfs_config_file_name):
        cmd.append('-hdfs_config')
        cmd.append(ec2_hdfs_config_file_name)
    self.output_file_name = ((('java_' + str(self.cloud_num)) + '_') + str(self.node_num))
    self.error_file_name = ((('java_' + str(self.cloud_num)) + '_') + str(self.node_num))
    cmd = ' '.join(cmd)
    self.channel = self.open_channel()
    self.stdouterr = ''
    (outfd, self.output_file_name) = PerfUtils.tmp_file(prefix=('remoteH2O-' + self.output_file_name), suffix='.out', directory=self.output_dir)
    (errfd, self.error_file_name) = PerfUtils.tmp_file(prefix=('remoteH2O-' + self.error_file_name), suffix='.err', directory=self.output_dir)
    PerfUtils.drain(self.channel.makefile(), outfd)
    PerfUtils.drain(self.channel.makefile_stderr(), errfd)
    self.channel.exec_command(cmd)

    @atexit.register
    def kill_process():
        try:
            try:
                self.stop_remote()
                self.channel.exec_command('exit')
                self.ssh.close()
            except:
                pass
            try:
                self.stop_local()
            except:
                pass
        except OSError:
            pass
    print ('+ CMD: ' + cmd)
