def __init__(self, cloud_num, nodes_per_cloud, node_num, cloud_name, h2o_jar, ip, base_port, xmx, output_dir, isEC2):
    "\n        Create a node in a cloud.\n\n        @param cloud_num: Dense 0-based cloud index number.\n        @param nodes_per_cloud: How many H2O java instances are in a cloud.  Clouds are symmetric.\n        @param node_num: This node's dense 0-based node index number.\n        @param cloud_name: The H2O -name command-line argument.\n        @param h2o_jar: Path to H2O jar file.\n        @param base_port: The starting port number we are trying to get our nodes to listen on.\n        @param xmx: Java memory parameter.\n        @param output_dir: The directory where we can create an output file for this process.\n        @param isEC2: Whether or not this node is an EC2 node.\n        @return: The node object.\n        "
    self.cloud_num = cloud_num
    self.nodes_per_cloud = nodes_per_cloud
    self.node_num = node_num
    self.cloud_name = cloud_name
    self.h2o_jar = h2o_jar
    self.ip = ip
    self.base_port = base_port
    self.xmx = xmx
    self.output_dir = output_dir
    self.isEC2 = isEC2
    self.addr = self.ip
    self.http_addr = self.ip
    self.username = getpass.getuser()
    self.password = getpass.getuser()
    if self.isEC2:
        self.username = 'ubuntu'
        self.password = None
    self.ssh = paramiko.SSHClient()
    policy = paramiko.AutoAddPolicy()
    self.ssh.set_missing_host_key_policy(policy)
    self.ssh.load_system_host_keys()
    if (self.password is None):
        self.ssh.connect(self.addr, username=self.username)
    else:
        self.ssh.connect(self.addr, username=self.username, password=self.password)
    self.ssh.get_transport().set_keepalive(300)
    self.uploaded = {}
    self.port = (-1)
    self.output_file_name = ''
    self.error_file_name = ''
    self.terminated = False
    ports_per_node = 2
    self.my_base_port = ((int(self.base_port) + int(((self.cloud_num * self.nodes_per_cloud) * ports_per_node))) + int((self.node_num * ports_per_node)))
