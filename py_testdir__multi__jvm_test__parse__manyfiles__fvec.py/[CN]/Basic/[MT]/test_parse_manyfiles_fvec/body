def test_parse_manyfiles_fvec(self):
    avgMichalSizeUncompressed = 237270000
    avgMichalSize = 116561140
    avgSynSize = 4020000
    covtype200xSize = 15033863400
    synSize = 183
    if (1 == 1):
        importFolderPath = 'manyfiles-nflx-gz'
        print "Using .gz'ed files in", importFolderPath
        csvFilenameAll = [('file_1.dat.gz', 'file_1_A.dat.gz', (1 * avgMichalSize), 3600), ('file_[1-2].dat.gz', 'file_2_A.dat.gz', (2 * avgMichalSize), 3600), ('file_[1-4].dat.gz', 'file_4_A.dat.gz', (4 * avgMichalSize), 3600)]
    csvFilenameList = csvFilenameAll
    trialMax = 1
    DO_GLM = False
    noPoll = False
    benchmarkLogging = ['cpu', 'disk', 'network', 'iostats', 'jstack']
    benchmarkLogging = ['cpu', 'disk', 'network', 'iostats']
    benchmarkLogging = ['cpu', 'disknetwork']
    pollTimeoutSecs = 180
    retryDelaySecs = 10
    localhost = h2o.decide_if_localhost()
    if localhost:
        tryHeap = 4
        h2o.build_cloud(2, java_heap_GB=tryHeap, enable_benchmark_log=True)
    else:
        tryHeap = 28
        h2o_hosts.build_cloud_with_hosts(1, java_heap_GB=tryHeap, enable_benchmark_log=True)
    for (i, (csvFilepattern, csvFilename, totalBytes, timeoutSecs)) in enumerate(csvFilenameList):
        h2o.beta_features = True
        for trial in range(trialMax):
            if DO_IMPORT_CHECK:
                for i in range(2):
                    csvPathname = ((importFolderPath + '/') + csvFilepattern)
                    (importResult, importPattern) = h2i.import_only(bucket='home-0xdiag-datasets', path=csvPathname, schema='local', timeoutSecs=timeoutSecs)
                    importFullList = importResult['files']
                    importFailList = importResult['fails']
                    print '\n Problem if this is not empty: importFailList:', h2o.dump_json(importFailList)
            h2o.cloudPerfH2O.change_logfile(csvFilename)
            h2o.cloudPerfH2O.message('')
            h2o.cloudPerfH2O.message((('Parse ' + csvFilename) + ' Start--------------------------------'))
            csvPathname = ((importFolderPath + '/') + csvFilepattern)
            start = time.time()
            parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, schema='local', hex_key=(csvFilename + '.hex'), timeoutSecs=timeoutSecs, retryDelaySecs=retryDelaySecs, pollTimeoutSecs=pollTimeoutSecs, noPoll=noPoll, benchmarkLogging=benchmarkLogging)
            elapsed = (time.time() - start)
            print 'Parse#', trial, parseResult['destination_key'], 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
            inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], timeoutSecs=360)
            h2o_cmd.infoFromInspect(inspect, csvPathname)
            if noPoll:
                if ((i + 1) < len(csvFilenameList)):
                    h2o.check_sandbox_for_errors()
                    (csvFilepattern, csvFilename, totalBytes2, timeoutSecs) = csvFilenameList[(i + 1)]
                    csvPathname = ((importFolderPathFull + '/') + csvFilepattern)
                    start = time.time()
                    parseResult = h2i.import_parse(path=csvPathname, hex_key=(csvFilename + '.hex'), timeoutSecs=timeoutSecs, retryDelaySecs=retryDelaySecs, pollTimeoutSecs=pollTimeoutSecs, noPoll=noPoll, benchmarkLogging=benchmarkLogging)
                    elapsed = (time.time() - start)
                    print 'Parse#', trial, parseResult['destination_key'], 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
                    inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], timeoutSecs=360)
                    h2o_cmd.infoFromInspect(inspect, csvPathname)
                if ((i + 2) < len(csvFilenameList)):
                    h2o.check_sandbox_for_errors()
                    (csvFilepattern, csvFilename, totalBytes3, timeoutSecs) = csvFilenameList[(i + 2)]
                    csvPathname = ((importFolderPathFull + '/') + csvFilepattern)
                    parseResult = h2i.import_parse(path=csvPathname, hex_key=(csvFilename + '.hex'), timeoutSecs=timeoutSecs, retryDelaySecs=retryDelaySecs, pollTimeoutSecs=pollTimeoutSecs, noPoll=noPoll, benchmarkLogging=benchmarkLogging)
                    elapsed = (time.time() - start)
                    print 'Parse#', trial, parseResult['destination_key'], 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
                    inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], timeoutSecs=360)
                    h2o_cmd.infoFromInspect(inspect, csvPathname)
            if noPoll:
                time.sleep(2)
                h2o_jobs.pollWaitJobs(pattern=csvFilename, timeoutSecs=timeoutSecs, benchmarkLogging=benchmarkLogging)
                totalBytes += (totalBytes2 + totalBytes3)
                elapsed = (time.time() - start)
                h2o.check_sandbox_for_errors()
            if (totalBytes is not None):
                fileMBS = ((totalBytes / 1000000.0) / elapsed)
                l = '{!s} jvms, {!s}GB heap, {:s} {:s} {:6.2f} MB/sec for {:.2f} secs'.format(len(h2o.nodes), tryHeap, csvFilepattern, csvFilename, fileMBS, elapsed)
                print l
                h2o.cloudPerfH2O.message(l)
            print "Parse result['destination_key']:", parseResult['destination_key']
            if (not noPoll):
                pass
            origKey = parseResult['destination_key']
            execExpr = (('a = slice(' + origKey) + ',1,200)')
            newParseKey = {'destination_key': 'a', }
            print ('\n' + csvFilepattern)
            print 'Temporarily hacking to do nothing instead of RF on the parsed file'
            if DO_GLM:
                x = range(542)
                for i in [3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 424, 425, 426, 540, 541, 378]:
                    x.remove(i)
                x = ','.join(map(str, x))
                GLMkwargs = {'x': x, 'y': 378, 'case': 15, 'case_mode': '>', 'max_iter': 10, 'n_folds': 1, 'alpha': 0.2, 'lambda': 1e-05, }
                start = time.time()
                glm = h2o_cmd.runGLM(parseResult=parseResult, timeoutSecs=timeoutSecs, **GLMkwargs)
                h2o_glm.simpleCheckGLM(self, glm, None, **GLMkwargs)
                elapsed = (time.time() - start)
                h2o.check_sandbox_for_errors()
                l = '{:d} jvms, {:d}GB heap, {:s} {:s} GLM: {:6.2f} secs'.format(len(h2o.nodes), tryHeap, csvFilepattern, csvFilename, elapsed)
                print l
                h2o.cloudPerfH2O.message(l)
            h2o_cmd.checkKeyDistribution()
            h2i.delete_keys_from_import_result(pattern=csvFilename, importResult=importResult)
            h2o.nodes[0].remove_all_keys()
            if (not localhost):
                print 'Waiting 30 secs before building cloud again (sticky ports?)'
            sys.stdout.write('.')
            sys.stdout.flush()
