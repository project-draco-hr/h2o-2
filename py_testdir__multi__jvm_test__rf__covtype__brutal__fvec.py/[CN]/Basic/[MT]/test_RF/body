def test_RF(self):
    h2o.beta_features = True
    paramsTrainRF = {'seed': '1234567890', 'sample_rate': 1.0, 'ntrees': 3, 'max_depth': 300, 'nbins': 200, 'timeoutSecs': 600, 'response': 'C55', }
    paramsScoreRF = {'vactual': 'C55', 'timeoutSecs': 600, }
    trainKey1 = self.loadData(trainDS1)
    scoreKey1 = self.loadData(scoreDS1)
    kwargs = paramsTrainRF.copy()
    trainResult1 = h2o_rf.trainRF(trainKey1, scoreKey1, **kwargs)
    (classification_error1, classErrorPctList1, totalScores1) = h2o_rf.simpleCheckRFView(rfv=trainResult1)
    self.assertEqual(4.4, classification_error1)
    self.assertEqual([3.71, 3.56, 4.32, 18.55, 21.22, 13.51, 5.82], classErrorPctList1)
    self.assertEqual(58101, totalScores1)
    kwargs = paramsScoreRF.copy()
    scoreResult1 = h2o_rf.scoreRF(scoreKey1, trainResult1, **kwargs)
    trainKey2 = self.loadData(trainDS2)
    scoreKey2 = self.loadData(scoreDS2)
    kwargs = paramsTrainRF.copy()
    trainResult2 = h2o_rf.trainRF(trainKey2, scoreKey2, **kwargs)
    (classification_error2, classErrorPctList2, totalScores2) = h2o_rf.simpleCheckRFView(rfv=trainResult2)
    self.assertEqual(4.4, classification_error1)
    self.assertEqual([3.71, 3.56, 4.32, 18.55, 21.22, 13.51, 5.82], classErrorPctList1)
    self.assertEqual(58101, totalScores2)
    kwargs = paramsScoreRF.copy()
    scoreResult2 = h2o_rf.scoreRF(scoreKey2, trainResult2, **kwargs)
    print '\nTraining: JsonDiff sorted data results, to non-sorted results (json responses)'
    df = h2o_util.JsonDiff(trainResult1, trainResult2, with_values=True)
    print 'df.difference:', h2o.dump_json(df.difference)
    print '\nScoring: JsonDiff sorted data results, to non-sorted results (json responses)'
    df = h2o_util.JsonDiff(scoreResult1, scoreResult2, with_values=True)
    print 'df.difference:', h2o.dump_json(df.difference)
    if (len(df.difference) > 2):
        raise Exception(('Too many diffs in JsonDiff sorted vs non-sorted %s' % len(df.difference)))
