{
  int num_threads=threads > 0 ? threads : Runtime.getRuntime().availableProcessors();
  _trainers=new Base[num_threads];
  _threads=new Thread[num_threads];
  _stepsPerThread=(long)(epochs * ((Input)ls[0])._len / num_threads);
  Log.info("Starting " + num_threads + " threads.");
  for (int t=0; t < num_threads; t++) {
    Layer[] clones=new Layer[ls.length];
    for (int y=0; y < clones.length; y++)     clones[y]=ls[y].clone();
    for (int y=0; y < clones.length; y++) {
      clones[y].init(clones,y,false);
      clones[y]._training=new Training(){
        @Override long processed(){
          return _processed.get();
        }
      }
;
    }
    final Input input=(Input)clones[0];
    input._pos=input._len * t / num_threads;
    _trainers[t]=new Base(clones);
    final Base trainer=_trainers[t];
    _threads[t]=new Thread("H2O Trainer " + t){
      @Override public void run(){
        for (long i=0; _stepsPerThread == 0 || i < _stepsPerThread; i++) {
          if (job != null && Job.cancelled(job))           break;
          try {
            trainer.step();
            input.move();
            _processed.incrementAndGet();
          }
 catch (          Exception e) {
            e.getStackTrace();
          }
        }
      }
    }
;
  }
}
