{
  CLContext context=CLContext.create();
  Log.debug("Created " + context);
  try {
    CLDevice device=context.getMaxFlopsDevice();
    Log.debug("Using " + device);
    CLCommandQueue queue=device.createCommandQueue();
    CLProgram program=context.createProgram(Boot._init.getResource2("/kernels.cl")).build();
    CLKernel[] fprops=new CLKernel[_ls.length];
    CLKernel[] bprops=new CLKernel[_ls.length];
    CLKernel[] resets=new CLKernel[_ls.length];
    CLBuffer<FloatBuffer>[] w=new CLBuffer[_ls.length];
    CLBuffer<FloatBuffer>[] b=new CLBuffer[_ls.length];
    CLBuffer<FloatBuffer>[] a=new CLBuffer[_ls.length];
    CLBuffer<FloatBuffer>[] e=new CLBuffer[_ls.length];
    for (int y=0; y < _ls.length; y++) {
      a[y]=context.createFloatBuffer(_ls[y]._a.length,Mem.READ_WRITE);
      if (y > 0) {
        w[y]=context.createFloatBuffer(_ls[y]._w.length,Mem.READ_ONLY);
        b[y]=context.createFloatBuffer(_ls[y]._b.length,Mem.READ_ONLY);
        e[y]=context.createFloatBuffer(_ls[y]._e.length,Mem.READ_ONLY);
        queue.putWriteBuffer(w[y],false);
        queue.putWriteBuffer(b[y],false);
        fprops[y]=program.createCLKernel(_ls.getClass().getSimpleName() + "_fprop");
        fprops[y].putArg(_ls[y - 1]._a.length);
        fprops[y].putArgs(a[y - 1],w[y],b[y],a[y]);
        bprops[y]=program.createCLKernel(_ls.getClass().getSimpleName() + "_bprop");
        bprops[y].putArg(_ls[y - 1]._a.length);
        bprops[y].putArgs(a[y - 1],w[y],b[y],a[y],e[y]);
        if (e[y - 1] != null)         bprops[y].putArg(e[y - 1]);
        resets[y]=program.createCLKernel("reset_error");
        resets[y].putArg(e[y]);
      }
    }
    int group=device.getMaxWorkGroupSize();
    Input input=(Input)_ls[0];
    while (true) {
      input.fprop(new Random().nextLong(),true);
      for (int i=0; i < input._a.length; i++)       a[0].getBuffer().put(i,input._a[i]);
      queue.putWriteBuffer(a[0],false);
      for (int y=1; y < fprops.length; y++)       queue.put1DRangeKernel(fprops[y],0,_ls[y]._a.length,group);
      queue.putReadBuffer(a[_ls.length - 1],true);
      for (int y=1; y < fprops.length - 1; y++)       queue.put1DRangeKernel(resets[y],0,_ls[y]._a.length,group);
      queue.putWriteBuffer(a[_ls.length - 1],false);
      queue.putWriteBuffer(e[_ls.length - 1],false);
      for (int y=_ls.length - 1; y > 0; y--)       queue.put1DRangeKernel(bprops[y],0,_ls[y]._a.length,group);
      input.move();
    }
  }
 catch (  IOException ex) {
    throw new RuntimeException(ex);
  }
 finally {
    context.release();
  }
}
