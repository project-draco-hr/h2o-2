{
  final int loops=1000000;
  final long seed=new Random().nextLong();
  final float eps=1e-20f;
  Random rng=new Random(seed);
  Log.info("Seed: " + seed);
  for (  float maxVal : new float[]{1,Float.MAX_VALUE}) {
    Log.info("Testing " + loops + " numbers in interval [0, "+ maxVal+ "].");
{
      float err=0;
      for (int i=0; i < loops; ++i) {
        final float x=eps + rng.nextFloat() * maxVal;
        err=Math.max(Math.abs(err),Math.abs((float)Math.sqrt(x) - approxSqrt(x)) / (float)Math.sqrt(x));
      }
      Log.info("rel. error for approxSqrt(float): " + err);
      Assert.assertTrue("rel. error for approxSqrt(float): " + err,Math.abs(err) < 5e-2);
    }
{
      double err=0;
      for (int i=0; i < loops; ++i) {
        final double x=eps + rng.nextFloat() * maxVal;
        err=Math.max(Math.abs(err),Math.abs(Math.sqrt(x) - approxSqrt(x)) / Math.sqrt(x));
      }
      Log.info("rel. error for approxSqrt(double): " + err);
      Assert.assertTrue("rel. error for approxSqrt(double): " + err,Math.abs(err) < 5e-2);
    }
{
      float err=0;
      for (int i=0; i < loops; ++i) {
        final float x=eps + rng.nextFloat() * maxVal;
        err=Math.max(Math.abs(err),Math.abs((float)(1. / Math.sqrt(x)) - approxInvSqrt(x)) * (float)Math.sqrt(x));
      }
      Log.info("rel. error for approxInvSqrt(float): " + err);
      Assert.assertTrue("rel. error for approxInvSqrt(float): " + err,Math.abs(err) < 2e-2);
    }
{
      double err=0;
      for (int i=0; i < loops; ++i) {
        final double x=eps + rng.nextFloat() * maxVal;
        err=Math.max(Math.abs(err),Math.abs((1. / Math.sqrt(x)) - approxInvSqrt(x)) * Math.sqrt(x));
      }
      Log.info("rel. error for approxInvSqrt(double): " + err);
      Assert.assertTrue("rel. error for approxInvSqrt(double): " + err,Math.abs(err) < 2e-2);
    }
{
      double err=0;
      for (int i=0; i < loops; ++i) {
        final double x=30 - rng.nextDouble() * 60;
        err=Math.max(Math.abs(err),Math.abs(Math.exp(x) - approxExp(x)) / Math.exp(x));
      }
      Log.info("rel. error for approxExp(double): " + err);
      Assert.assertTrue("rel. error for approxExp(double): " + err,Math.abs(err) < 5e-2);
    }
{
      double err=0;
      for (int i=0; i < loops; ++i) {
        final double x=eps + rng.nextFloat() * maxVal;
        err=Math.abs(Math.log(x) - approxLog(x)) / Math.abs(Math.log(x));
        if (!Double.isInfinite(err) && !Double.isNaN(err))         err=Math.max(err,Math.abs(Math.log(x) - approxLog(x)) / Math.abs(Math.log(x)));
      }
      Log.info("rel. error for approxLog(double): " + err);
      Assert.assertTrue("rel. error for approxLog(double): " + err,Math.abs(err) < 1e-3);
    }
  }
}
