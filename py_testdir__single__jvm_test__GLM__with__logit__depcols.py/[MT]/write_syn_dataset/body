def write_syn_dataset(csvPathname, rowCount, colCount, coefficients, intercept, SEED, noise=0.05):
    r1 = random.Random(SEED)
    dsf = open(csvPathname, 'w+')
    yMin = None
    yMax = None
    BINS = 100
    print ("gen'ed y will be a probability! generate 1/0 data rows to reflect that probability, binned to %d bins" % BINS)
    print '100 implies 2 places of accuracy in getting the probability.'
    print 'this means we should get 1 place of accuracy in the result coefficients/intercept????'
    if (COL_DATA_DISTS == 'UNIQUE'):
        colModes = [(((random.randint(0, 1) * (-1)) * j) / colCount) for j in range(colCount)]
    elif (COL_DATA_DISTS == 'SAME'):
        colDataMean = ((abs((DATA_VALUE_MAX - DATA_VALUE_MIN)) / 2) + DATA_VALUE_MIN)
        colModes = [colDataMean for j in range(colCount)]
    else:
        colModes = [r1.uniform(DATA_VALUE_MIN, DATA_VALUE_MAX) for j in range(colCount)]
    for i in range(rowCount):
        rowData = []
        for j in range(colCount):
            ri = r1.triangular(DATA_VALUE_MIN, DATA_VALUE_MAX, colModes[j])
            rowData.append(ri)
        if ((noise is not None) and (r1.random() <= noise)):
            flip = True
        else:
            flip = False
        y = yFromEqnAndData(coefficients, intercept, rowData)
        if ((yMin is None) or (y < yMin)):
            yMin = y
        if ((yMax is None) or (y > yMax)):
            yMax = y
        for i in range(1, (BINS + 1)):
            if (y > ((i + 0.0) / BINS)):
                binomial = 1
            else:
                binomial = 0
            rowDataCsv = ','.join(map(str, (rowData + [binomial])))
            dsf.write((rowDataCsv + '\n'))
    dsf.close()
    print 'yMin:', yMin, ' yMax:', yMax
