{
  Key k1=Key.make(input);
  Value v1=DKV.get(k1);
  Pattern incl=makePattern(input);
  Pattern excl=null;
  if (exclude.specified())   excl=makePattern(exclude.value());
  ArrayList<Key> keys=new ArrayList();
  for (  Key key : H2O.keySet()) {
    if (!key.user_allowed())     continue;
    String ks=key.toString();
    if (!incl.matcher(ks).matches())     continue;
    if (excl != null && excl.matcher(ks).matches())     continue;
    Value v2=DKV.get(key);
    if (v2.isHex())     continue;
    Object o=v2.type() != TypeMap.PRIM_B ? v2.get() : null;
    if (o instanceof Frame && ((Frame)o)._vecs[0] instanceof ByteVec)     keys.add(key);
  }
  if (keys.size() == 0)   throw new IllegalArgumentException(errors()[0]);
  Collections.sort(keys);
  Key hKey=keys.get(0);
  Value v=DKV.get(hKey);
  v=((Frame)v.get())._vecs[0].chunkIdx(0);
  byte sep=separator.specified() ? separator.value() : CsvParser.AUTO_SEP;
  CustomParser.ParserSetup setup=ParseDataset2.guessSetup(hKey,new ParserSetup(ParserType.AUTO,sep,header.value()));
  if (setup._data == null || setup._data[0].length == 0)   throw new IllegalArgumentException(errors()[1] + hKey);
  return new PSetup(keys,setup);
}
