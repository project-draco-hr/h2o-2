{
  _hcs=new DHistogram[_trees.length][][];
  for (int t=0; t < _trees.length; t++) {
    final DTree tree=_trees[t];
    final int leaf=_leafs[t];
    final DHistogram hcs[][]=_hcs[t]=new DHistogram[tree._len - leaf][];
    final Chunk nids=chk_nids(chks,_ncols,_nclass,_trees.length,t);
    for (int i=0; i < nids._len; i++) {
      int nid=(int)nids.at80(i);
      if (nid == -2)       continue;
      if (leaf > 0 && (nid=tree.decided(nid).ns(chks,i)) != -1)       nids.set0(i,nid);
      if (nid < leaf)       continue;
      DHistogram nhs[]=hcs[nid - leaf];
      if (nhs == null) {
        nhs=hcs[nid - leaf]=new DHistogram[_ncols];
        DHistogram ohs[]=tree.undecided(nid)._hs;
        int sCols[]=tree.undecided(nid)._scoreCols;
        if (sCols != null) {
          for (int j=0; j < sCols.length; j++) {
            int idx=sCols[j];
            nhs[idx]=ohs[idx].bigCopy();
          }
          for (int j=0; j < nhs.length; j++)           if (ohs[j] != null && nhs[j] == null)           nhs[j]=ohs[j].smallCopy();
        }
 else {
          for (int j=0; j < nhs.length; j++)           if (ohs[j] != null)           nhs[j]=ohs[j].bigCopy();
        }
      }
    }
    for (int i=0; i < nids._len; i++) {
      int nid=(int)nids.at80(i);
      if (nid < leaf)       continue;
      DHistogram nhs[]=hcs[nid - leaf];
      for (int j=0; j < _ncols; j++) {
        DHistogram nh=nhs[j];
        if (nh == null)         continue;
        float f=(float)chks[j].at0(i);
        nh.incr(f);
        if (nh instanceof DBinHistogram)         ((DBinHistogram)nh).incr(i,f,chks,_ncols);
      }
    }
  }
}
