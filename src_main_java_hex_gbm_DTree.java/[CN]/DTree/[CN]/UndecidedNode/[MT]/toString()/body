{
  final int nclass=_tree._nclass;
  final String colPad="  ";
  final int cntW=4, mmmW=4, menW=4, varW=4;
  final int colW=cntW + 1 + mmmW+ 1+ mmmW+ 1+ nclass * (menW + 1) + varW;
  StringBuilder sb=new StringBuilder();
  sb.append("Nid# ").append(_nid).append(", ");
  printLine(sb).append("\n");
  final int ncols=_hs.length;
  for (int j=0; j < ncols; j++)   if (_hs[j] != null)   p(sb,_hs[j]._name + String.format(", err=%5.2f %4.1f",_hs[j].score(),_hs[j]._min),colW).append(colPad);
  sb.append('\n');
  for (int j=0; j < ncols; j++) {
    if (_hs[j] == null)     continue;
    p(sb,"cnt",cntW).append('/');
    p(sb,"min",mmmW).append('/');
    p(sb,"max",mmmW).append('/');
    for (int c=0; c < nclass; c++)     p(sb,Integer.toString(c),menW).append('/');
    p(sb,"var",varW).append(colPad);
  }
  sb.append('\n');
  int nbins=0;
  for (int j=0; j < ncols; j++)   if (_hs[j] != null && _hs[j].nbins() > nbins)   nbins=_hs[j].nbins();
  for (int i=0; i < nbins; i++) {
    for (int j=0; j < ncols; j++) {
      DHistogram h=_hs[j];
      if (h == null)       continue;
      if (i < h.nbins()) {
        p(sb,h.bins(i),cntW).append('/');
        p(sb,h.mins(i),mmmW).append('/');
        p(sb,h.maxs(i),mmmW).append('/');
        for (int c=0; c < nclass; c++)         p(sb,h.mean(i,c),menW).append('/');
        p(sb,h.var(i),varW).append(colPad);
      }
 else {
        p(sb,"",colW).append(colPad);
      }
    }
    sb.append('\n');
  }
  sb.append("Nid# ").append(_nid);
  return sb.toString();
}
