def test_GLM_score_same(self):
    bucket = 'home-0xdiag-datasets'
    csvFilename = '1mx10_hastie_10_2.data.gz'
    csvPathname = (('standard' + '/') + csvFilename)
    y = '10'
    x = ''
    kwargs = {'x': x, 'y': y, 'case': (-1), 'thresholds': 0.5, }
    (modelKey, validations1, parseResult) = glm_doit(self, csvFilename, bucket, csvPathname, timeoutSecs=60, pollTimeoutSecs=60, **kwargs)
    print 'Use', modelKey, 'model on 2x and 4x replications and compare results to 1x'
    filename1x = 'hastie_1x.data'
    pathname1x = ((SYNDATASETS_DIR + '/') + filename1x)
    fullPathname = h2i.find_folder_and_filename(bucket, csvPathname, returnFullPath=True)
    h2o_util.file_gunzip(fullPathname, pathname1x)
    filename2x = 'hastie_2x.data'
    pathname2x = ((SYNDATASETS_DIR + '/') + filename2x)
    bucket = None
    h2o_util.file_cat(pathname1x, pathname1x, pathname2x)
    glm_score(self, filename2x, bucket, pathname2x, modelKey, thresholds='0.5', timeoutSecs=60, pollTimeoutSecs=60)
    filename4x = 'hastie_4x.data'
    pathname4x = ((SYNDATASETS_DIR + '/') + filename4x)
    h2o_util.file_cat(pathname2x, pathname2x, pathname4x)
    print 'Iterating 3 times on this last one'
    for i in range(3):
        print '\nTrial #', i, 'of', filename4x
        glm_score(self, filename4x, bucket, pathname4x, modelKey, thresholds='0.5', timeoutSecs=60, pollTimeoutSecs=60)
