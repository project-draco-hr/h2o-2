def test_RF_many_cols_enum(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    translateList = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u']
    tryList = [(10000, 100, 'cA', 300), (10000, 300, 'cB', 500)]
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + 'binary') + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print 'Creating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE, translateList)
        start = time.time()
        xList = []
        eList = []
        fList = []
        modelKey = 'RFModelKey'
        start = time.time()
        parseTrainResult = h2i.import_parse(bucket=None, path=csvPathname, schema='put', header=0, hex_key=hex_key, timeoutSecs=timeoutSecs, doSummary=False)
        elapsed = (time.time() - start)
        print 'train parse end on ', csvPathname, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'train parse result:', parseTrainResult['destination_key']
        algo = 'Parse'
        l = '{:d} jvms, {:d}GB heap, {:s} {:s} {:6.2f} secs'.format(len(h2o.nodes), h2o.nodes[0].java_heap_GB, algo, csvFilename, elapsed)
        print l
        h2o.cloudPerfH2O.message(l)
        inspect = h2o_cmd.runInspect(key=parseTrainResult['destination_key'])
        print ('\n' + csvPathname), '    numRows:', '{:,}'.format(inspect['numRows']), '    numCols:', '{:,}'.format(inspect['numCols'])
        numRows = inspect['numRows']
        numCols = inspect['numCols']
        ntrees = 10
        for max_depth in [5, 10, 20, 40]:
            params = {'nbins': 1024, 'classification': 1, 'ntrees': ntrees, 'max_depth': max_depth, 'min_rows': 10, 'response': ('C' + str((numCols - 1))), 'ignored_cols_by_name': None, }
            print 'Using these parameters for RF: ', params
            kwargs = params.copy()
            trainStart = time.time()
            rfResult = h2o_cmd.runRF(parseResult=parseTrainResult, timeoutSecs=timeoutSecs, destination_key=modelKey, **kwargs)
            trainElapsed = (time.time() - trainStart)
            print 'RF training completed in', trainElapsed, 'seconds. On dataset: ', csvPathname
            algo = (((('RF ' + ' ntrees=') + str(ntrees)) + ' max_depth=') + str(max_depth))
            l = '{:d} jvms, {:d}GB heap, {:s} {:s} {:6.2f} secs'.format(len(h2o.nodes), h2o.nodes[0].java_heap_GB, algo, csvFilename, trainElapsed)
            print l
            h2o.cloudPerfH2O.message(l)
            errsLast = rfResult['drf_model']['errs'][(-1)]
            print "RF 'errsLast'", errsLast
            cm = rfResult['drf_model']['cms'][(-1)]['_arr']
            pctWrongTrain = h2o_gbm.pp_cm_summary(cm)
            print '\nTrain\n==========\n'
            print h2o_gbm.pp_cm(cm)
            xList.append(max_depth)
            eList.append(pctWrongTrain)
            fList.append(trainElapsed)
    if (1 == 1):
        xLabel = 'max_depth'
        eLabel = 'pctWrong'
        fLabel = 'trainElapsed'
        eListTitle = ''
        fListTitle = ''
        h2o_gbm.plotLists(xList, xLabel, eListTitle, eList, eLabel, fListTitle, fList, fLabel)
