{
  if (_matrix == null)   return "no trees";
  int N=_matrix.length;
  final int K=N + 1;
  double[] e2c=new double[N];
  for (int i=0; i < N; i++) {
    long err=-_matrix[i][i];
    for (int j=0; j < N; j++)     err+=_matrix[i][j];
    e2c[i]=Math.round((err / (double)(err + _matrix[i][i])) * 100) / (double)100;
  }
  String[][] cms=new String[K][K + 1];
  cms[0][0]="";
  for (int i=1; i < K; i++)   cms[0][i]="" + (i - 1);
  cms[0][K]="err/class";
  for (int j=1; j < K; j++)   cms[j][0]="" + (j - 1);
  for (int j=1; j < K; j++)   cms[j][K]="" + e2c[j - 1];
  for (int i=1; i < K; i++)   for (int j=1; j < K; j++)   cms[j][i]="" + _matrix[j - 1][i - 1];
  int maxlen=0;
  for (int i=0; i < K; i++)   for (int j=0; j < K + 1; j++)   maxlen=Math.max(maxlen,cms[i][j].length());
  for (int i=0; i < K; i++)   for (int j=0; j < K + 1; j++)   cms[i][j]=pad(cms[i][j],maxlen);
  String s="";
  for (int i=0; i < K; i++) {
    for (int j=0; j < K + 1; j++)     s+=cms[i][j];
    s+="\n";
  }
  return s;
}
