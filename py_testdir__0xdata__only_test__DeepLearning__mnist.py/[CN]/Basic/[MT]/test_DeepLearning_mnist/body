def test_DeepLearning_mnist(self):
    csvPathname_train = 'mnist/train.csv.gz'
    csvPathname_test = 'mnist/test.csv.gz'
    hex_key = 'mnist_train.hex'
    validation_key = 'mnist_test.hex'
    timeoutSecs = 300
    parseResult = h2i.import_parse(bucket='smalldata', path=csvPathname_train, schema='put', hex_key=hex_key, timeoutSecs=timeoutSecs)
    parseResultV = h2i.import_parse(bucket='smalldata', path=csvPathname_test, schema='put', hex_key=validation_key, timeoutSecs=timeoutSecs)
    inspect = h2o_cmd.runInspect(None, hex_key)
    print ('\n' + csvPathname_train), '    numRows:', '{:,}'.format(inspect['numRows']), '    numCols:', '{:,}'.format(inspect['numCols'])
    response = (inspect['numCols'] - 1)
    identifier = ''.join(random.sample((string.ascii_lowercase + string.digits), 10))
    model_key = (('deeplearning_' + identifier) + '.hex')
    kwargs = {'ignored_cols': None, 'response': response, 'classification': 1, 'activation': 'RectifierWithDropout', 'input_dropout_ratio': 0.2, 'hidden': '1024,1024,2048', 'adaptive_rate': 1, 'rho': 0.99, 'epsilon': 1e-08, 'train_samples_per_iteration': (-1), 'l1': 1e-05, 'l2': 0.0, 'seed': 98037452452, 'loss': 'CrossEntropy', 'max_w2': 15, 'initial_weight_distribution': 'UniformAdaptive', 'epochs': 128, 'destination_key': model_key, 'validation': validation_key, 'score_interval': 10000, }
    timeoutSecs = 7200
    start = time.time()
    deeplearning = h2o_cmd.runDeepLearning(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
    print 'neural net end on ', csvPathname_train, ' and ', csvPathname_test, 'took', (time.time() - start), 'seconds'
    predict_key = (('score_' + identifier) + '.hex')
    kwargs = {'data_key': validation_key, 'destination_key': predict_key, 'model_key': model_key, }
    predictResult = h2o_cmd.runPredict(timeoutSecs=timeoutSecs, **kwargs)
    h2o_cmd.runInspect(key=predict_key, verbose=True)
    kwargs = {}
    predictCMResult = h2o.nodes[0].predict_confusion_matrix(actual=validation_key, vactual=response, predict=predict_key, vpredict='predict', timeoutSecs=timeoutSecs, **kwargs)
    cm = predictCMResult['cm']
    print h2o_gbm.pp_cm(cm)
    actualErr = (h2o_gbm.pp_cm_summary(cm) / 100.0)
    print ('actual   classification error:' + format(actualErr))
