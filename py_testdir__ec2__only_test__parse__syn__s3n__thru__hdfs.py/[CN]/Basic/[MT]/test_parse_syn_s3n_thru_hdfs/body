def test_parse_syn_s3n_thru_hdfs(self):
    csvFilename = '*_10000x200*'
    trialMax = 1
    timeoutSecs = 500
    URI = 's3n://home-0xdiag-datasets/syn_datasets'
    s3nKey = ((URI + '/') + csvFilename)
    for trial in range(trialMax):
        importHDFSResult = h2o.nodes[0].import_hdfs(URI)
        s3nFullList = importHDFSResult['files']
        self.assertGreater(len(s3nFullList), 8, "Didn't see more than 8 files in s3n?")
        key2 = (('syn_datasets_' + str(trial)) + '.hex')
        print 'Loading s3n key: ', s3nKey, 'thru HDFS'
        start = time.time()
        parseKey = h2o.nodes[0].parse(s3nKey, key2, timeoutSecs=500, retryDelaySecs=10, pollTimeoutSecs=60)
        elapsed = (time.time() - start)
        print s3nKey, 'parse time:', parseKey['response']['time']
        print 'parse result:', parseKey['destination_key']
        print 'Trial #', trial, 'completed in', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        inspect = h2o_cmd.runInspect(None, parseKey['destination_key'])
        print (('\n' + key2) + '    num_rows:'), '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
        print 'Deleting key in H2O so we get it from s3n (if ec2) or nfs again.', 'Otherwise it would just parse the cached key.'
        storeView = h2o.nodes[0].store_view()
        print "BROKE: we can't delete keys with a pattern match yet..this fails"
        print "So we only do 1 trial and don't delete"
