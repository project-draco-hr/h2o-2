def test_parse_time_rand_fvec(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    csvFilename = 'syn_time.csv'
    csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
    colCount = 6
    rowCount = 10
    headerData = rand_header(colCount)
    write_syn_dataset(csvPathname, rowCount, colCount, headerData)
    for trial in range(1):
        rowData = rand_rowData()
        src_key = ((csvFilename + '_') + str(trial))
        hex_key = (((csvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        parseResultA = h2i.import_parse(path=csvPathname, schema='put', src_key=src_key, hex_key=hex_key)
        print '\nA trial #', trial, 'parse end on ', csvFilename, 'took', (time.time() - start), 'seconds'
        inspect = h2o_cmd.runInspect(key=hex_key)
        numRowsA = inspect['numRows']
        numColsA = inspect['numCols']
        summaryResult = h2o_cmd.runSummary(key=hex_key, timeoutSecs=100, numCols=numColsA, numRows=numRowsA, noPrint=True)
        print summaryResult
        h2o_cmd.infoFromSummary(summaryResult)
        (missingValuesDictA, constantValuesDictA, enumSizeDictA, colTypeDictA, colNameDictA) = h2o_cmd.columnInfoFromInspect(hex_key, exceptionOnMissingValues=False)
        if (constantValuesDictA or enumSizeDictA):
            raise Exception(('Should be empty?  constantValuesDictA %s enumSizeDictA %s' % (constantValuesDictA, enumSizeDictA)))
        print 'missingValuesListA', missingValuesListA
        self.assertEqual(numColsA, colCount)
        self.assertEqual(numRowsA, rowCount)
        csvDownloadPathname = (SYNDATASETS_DIR + '/csvDownload.csv')
        h2o.nodes[0].csv_download(src_key=hex_key, csvPathname=csvDownloadPathname)
        h2o.nodes[0].remove_key(hex_key)
        start = time.time()
        parseResultB = h2i.import_parse(path=csvDownloadPathname, schema='put', src_key=src_key, hex_key=hex_key)
        print 'B trial #', trial, 'parse end on ', csvFilename, 'took', (time.time() - start), 'seconds'
        inspect = h2o_cmd.runInspect(key=hex_key)
        numRowsB = inspect['numRows']
        numColsB = inspect['numCols']
        print 'missingValuesListB', missingValuesListB
        summaryResult = h2o_cmd.runSummary(key=hex_key, timeoutSecs=100, numCols=numColsB, numRows=numRowsB, noPrint=True)
        (missingValuesDictB, constantValuesDictB, enumSizeDictB, colTypeDictB, colNameDictB) = h2o_cmd.columnInfoFromInspect(hex_key, exceptionOnMissingValues=False)
        if (constantValuesDictB or enumSizeDictB):
            raise Exception(('Should be empty?  constantValuesDictB %s enumSizeDictB %s' % (constantValuesDictB, enumSizeDictB)))
        self.assertEqual(missingValuesListA, missingValuesListB, 'missingValuesList mismatches after re-parse of downloadCsv result')
        self.assertEqual(numColsA, numColsB, 'numCols mismatches after re-parse of downloadCsv result')
        self.assertEqual(numRowsA, numRowsB, ('numRowsA: %s numRowsB: %s mismatch after re-parse of downloadCsv result' % (numRowsA, numRowsB)))
        h2o.check_sandbox_for_errors()
