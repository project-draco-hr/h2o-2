def test_NN_mnist_multi(self):
    h2o.beta_features = True
    csvPathname_train = 'mnist/train.csv.gz'
    csvPathname_test = 'mnist/test.csv.gz'
    hex_key = 'mnist_train.hex'
    validation_key = 'mnist_test.hex'
    timeoutSecs = 60
    parseResult = h2i.import_parse(bucket='smalldata', path=csvPathname_train, schema='put', hex_key=hex_key, timeoutSecs=timeoutSecs)
    parseResultV = h2i.import_parse(bucket='smalldata', path=csvPathname_test, schema='put', hex_key=validation_key, timeoutSecs=timeoutSecs)
    inspect = h2o_cmd.runInspect(None, hex_key)
    print ('\n' + csvPathname_train), '    numRows:', '{:,}'.format(inspect['numRows']), '    numCols:', '{:,}'.format(inspect['numCols'])
    response = (inspect['numCols'] - 1)
    modes = ['SingleNode']
    for mode in modes:
        identifier = ''.join(random.sample((string.ascii_lowercase + string.digits), 10))
        model_key = (('nn_' + identifier) + '.hex')
        kwargs = {'ignored_cols': None, 'response': response, 'classification': 1, 'mode': mode, 'activation': 'RectifierWithDropout', 'input_dropout_ratio': 0.2, 'hidden': '117,131,129', 'rate': 0.005, 'rate_annealing': 1e-06, 'momentum_start': 0.5, 'momentum_ramp': 100000, 'momentum_stable': 0.9, 'l1': 1e-05, 'l2': 1e-07, 'seed': 98037452452, 'loss': 'CrossEntropy', 'max_w2': 15, 'warmup_samples': 0, 'initial_weight_distribution': 'UniformAdaptive', 'epochs': 20.0, 'destination_key': model_key, 'validation': validation_key, }
        expectedErr = 0.03
        timeoutSecs = 600
        start = time.time()
        nn = h2o_cmd.runNNet(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
        print 'neural net end on ', csvPathname_train, ' and ', csvPathname_test, 'took', (time.time() - start), 'seconds'
        relTol = (0.02 if (mode == 'SingleThread') else 0.1)
        h2o_nn.checkLastValidationError(self, nn['neuralnet_model'], inspect['numRows'], expectedErr, relTol, **kwargs)
        kwargs = {'source': validation_key, 'max_rows': 0, 'response': response, 'ignored_cols': None, 'classification': 1, 'destination_key': (('score_' + identifier) + '.hex'), 'model': model_key, }
        nnScoreResult = h2o_cmd.runNNetScore(key=parseResult['destination_key'], timeoutSecs=timeoutSecs, **kwargs)
        h2o_nn.checkScoreResult(self, nnScoreResult, expectedErr, relTol, **kwargs)
        if (mode != 'MapReduce'):
            print 'WARNING: Running in non-MapReduce mode on multiple nodes! Only one node contributes to results.'
    h2o.beta_features = False
