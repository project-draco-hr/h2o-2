{
  HashMap<String,Integer> classNames=new HashMap();
  String[] names=determineColumnClassNames(1024);
  for (int i=0; i < names.length; ++i)   classNames.put(names[i],i);
  int[] result=new int[names.length];
  for (int i=0; i < result.length; ++i)   result[i]=_defaultValue;
  int start=0;
  byte[] bsource=input.getBytes();
  while (start < bsource.length) {
    while (start < bsource.length && bsource[start] == ' ')     ++start;
    String className;
    int classWeight;
    int end=0;
    if (bsource[start] == ',') {
      ++start;
      end=input.indexOf(',',start);
      className=input.substring(start,end);
      ++end;
    }
 else {
      end=input.indexOf(JS_SEP,start);
      className=input.substring(start,end);
    }
    start=end;
    while (start < bsource.length && bsource[start] == ' ')     ++start;
    if (bsource[start] != JS_SEP)     throw new H2OIllegalArgumentException(this,"Expected = after the class name.");
    ++start;
    end=input.indexOf(',',start);
    try {
      if (end == -1) {
        classWeight=Integer.parseInt(input.substring(start));
        start=bsource.length;
      }
 else {
        classWeight=Integer.parseInt(input.substring(start,end));
        start=end + 1;
      }
    }
 catch (    NumberFormatException e) {
      throw new H2OIllegalArgumentException(this,"Invalid integer format for strata value");
    }
    if (!classNames.containsKey(className))     throw new H2OIllegalArgumentException(this,"Category " + className + " not found!");
    result[classNames.get(className)]=classWeight;
  }
  return result;
}
