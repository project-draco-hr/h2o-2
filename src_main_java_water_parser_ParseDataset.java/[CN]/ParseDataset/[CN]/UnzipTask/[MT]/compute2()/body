{
  setPendingCount(_keys.length);
  for (  Key k : _keys) {
    final Key key=k;
    H2OCountedCompleter subtask=new H2OCountedCompleter(){
      @Override public void compute2(){
        InputStream is=null;
        Key okey=Key.make(new String(key._kb) + "_UNZIPPED");
        try {
switch (_comp) {
case ZIP:
            is=new ZipInputStream(DKV.get(key).openStream());
          break;
case GZIP:
        is=new GZIPInputStream(DKV.get(key).openStream());
      break;
default :
    throw H2O.unimpl();
}
ValueArray.readPut(okey,is,_job);
}
 catch (Throwable t) {
System.err.println("failed decompressing data " + key.toString() + " with compression "+ _comp);
UKV.remove(okey);
throw new RuntimeException(t);
}
 finally {
Closeables.closeQuietly(is);
tryComplete();
}
}
}
;
subtask.setCompleter(this);
H2O.submitTask(subtask);
}
tryComplete();
}
