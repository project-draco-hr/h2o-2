{
  RString response=new RString(HTML_TEMPLATE);
  response.replace("cloud_name",H2O.NAME);
  response.replace("node_name",H2O.SELF.toString());
  final H2O cloud=H2O.CLOUD;
  for (  H2ONode h2o : cloud._memary) {
    HeartBeat hb=h2o._heartbeat;
    RString row=response.restartGroup("tableRow");
    row.replace("node",h2o);
    row.replace("total_in_conn",toPosNumber(hb._total_in_conn));
    row.replace("total_out_conn",toPosNumber(hb._total_out_conn));
    row.replace("tcp_in_conn",toPosNumber(hb._tcp_in_conn));
    row.replace("tcp_out_conn",toPosNumber(hb._tcp_out_conn));
    row.replace("udp_in_conn",toPosNumber(hb._udp_in_conn));
    row.replace("udp_out_conn",toPosNumber(hb._udp_out_conn));
    row.replace("total_packets_recv",toPosNumber(hb._total_packets_recv));
    row.replace("total_bytes_recv",PrettyPrint.bytes(hb._total_bytes_recv));
    row.replace("total_bytes_recv_rate",PrettyPrint.bytesPerSecond(hb._total_bytes_recv_rate));
    row.replace("total_packets_sent",toPosNumber(hb._total_packets_sent));
    row.replace("total_bytes_sent",PrettyPrint.bytes(hb._total_bytes_sent));
    row.replace("total_bytes_sent_rate",PrettyPrint.bytesPerSecond(hb._total_bytes_sent_rate));
    row.replace("tcp_packets_recv",toPosNumber(hb._tcp_packets_recv));
    row.replace("tcp_bytes_recv",PrettyPrint.bytes(hb._tcp_bytes_recv));
    row.replace("tcp_packets_sent",toPosNumber(hb._tcp_packets_sent));
    row.replace("tcp_bytes_sent",PrettyPrint.bytes(hb._tcp_bytes_sent));
    row.replace("udp_packets_recv",toPosNumber(hb._udp_packets_recv));
    row.replace("udp_bytes_recv",PrettyPrint.bytes(hb._udp_bytes_recv));
    row.replace("udp_packets_sent",toPosNumber(hb._udp_packets_sent));
    row.replace("udp_bytes_sent",PrettyPrint.bytes(hb._udp_bytes_sent));
    row.append();
  }
  return response.toString();
}
