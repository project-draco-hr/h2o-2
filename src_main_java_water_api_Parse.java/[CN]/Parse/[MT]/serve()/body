{
  PSetup p=_source.value();
  CsvParser.Setup q=p._setup;
  Key dest=Key.make(_dest.value());
  try {
    CsvParser.Setup new_setup=_header.originalValue() == null ? q : new CsvParser.Setup(q._separator,_header.value(),q._data,q._numlines,q._bits);
    Key[] keys=p._keys.toArray(new Key[p._keys.size()]);
    Job job=ParseDataset.forkParseDataset(dest,keys,new_setup);
    JsonObject response=new JsonObject();
    response.addProperty(RequestStatics.DEST_KEY,dest.toString());
    Response r=Progress.redirect(response,job.self(),dest);
    r.setBuilder(RequestStatics.DEST_KEY,new KeyElementBuilder());
    return r;
  }
 catch (  IllegalArgumentException e) {
    Log.err(e);
    return Response.error(e.getMessage());
  }
catch (  Error e) {
    Log.err(e);
    return Response.error(e.getMessage());
  }
}
