{
  PSetup p=_source.value();
  CustomParser.ParserSetup setup=p._setup;
  Key dest=Key.make(_dest.value());
  try {
    if ((p._setup != null && p._setup._pType == CustomParser.ParserType.CSV) && _header.value() != null)     setup=CustomParser.ParserSetup.makeCSVSetup(setup._separator,_header.value(),setup._data,setup._bits,setup._ncols);
    Key[] keys=p._keys.toArray(new Key[p._keys.size()]);
    Job job=ParseDataset.forkParseDataset(dest,keys,setup);
    JsonObject response=new JsonObject();
    response.addProperty(RequestStatics.JOB,job.self().toString());
    response.addProperty(RequestStatics.DEST_KEY,dest.toString());
    Response r=Progress.redirect(response,job.self(),dest);
    r.setBuilder(RequestStatics.DEST_KEY,new KeyElementBuilder());
    return r;
  }
 catch (  IllegalArgumentException e) {
    return Response.error(e.getMessage());
  }
catch (  Error e) {
    return Response.error(e.getMessage());
  }
}
