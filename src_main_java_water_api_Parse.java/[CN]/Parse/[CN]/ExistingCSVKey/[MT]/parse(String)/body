{
  Pattern p=makePattern(input);
  Pattern exclude=null;
  if (_excludeExpression.specified())   exclude=makePattern(_excludeExpression.value());
  ArrayList<Key> keys=new ArrayList();
  for (  Key key : H2O.keySet()) {
    if (!key.user_allowed())     continue;
    String ks=key.toString();
    if (!p.matcher(ks).matches())     continue;
    if (exclude != null && exclude.matcher(ks).matches())     continue;
    Value v2=DKV.get(key);
    if (v2.isHex())     continue;
    keys.add(key);
  }
  if (keys.size() == 0)   throw new IllegalArgumentException("I did not find any keys matching this pattern!");
  Collections.sort(keys);
  Key hKey=null;
  if (_hdrFrom.specified())   hKey=_hdrFrom.value()._key;
  boolean checkHeader=!_header.specified();
  boolean hasHeader=_header.value();
  CustomParser.PSetupGuess setup=guessSetup(keys,hKey,new CustomParser.ParserSetup(_parserType.value(),_separator.value(),hasHeader),checkHeader);
  if (setup == null)   throw new IllegalArgumentException("I do not recognize the file " + keys.get(0) + "; Please select the parse setup manually.");
  if (!_header.specified())   _header.setValue(setup._setup._header);
 else   setup._setup._header=_header.value();
  if (!_header.value())   _hdrFrom.disable("Header is disabled.");
  PSetup res=new PSetup(keys,setup);
  _parserType.setValue(setup._setup._pType);
  _separator.setValue(setup._setup._separator);
  _hdrFrom._hideInQuery=_header._hideInQuery=_separator._hideInQuery=setup._setup._pType != CustomParser.ParserType.CSV;
  return res;
}
