{
  Key k1=Key.make(input);
  Value v1=DKV.get(k1);
  if (v1 != null && (input.endsWith(".xlsx") || input.endsWith(".xls")))   return new PSetup(k1,new Setup((byte)0,false,null,0,null));
  Pattern p=makePattern(input);
  Pattern exclude=null;
  if (_excludeExpression.specified())   exclude=makePattern(_excludeExpression.value());
  ArrayList<Key> keys=new ArrayList();
  for (  Key key : H2O.keySet()) {
    if (!key.user_allowed())     continue;
    String ks=key.toString();
    if (!p.matcher(ks).matches())     continue;
    if (exclude != null && exclude.matcher(ks).matches())     continue;
    Value v2=DKV.get(key);
    if (v2 == null || input.endsWith(".xlsx") || input.endsWith(".xls") || v2.length() == 0)     continue;
    if (v2.isHex())     continue;
    keys.add(key);
  }
  if (keys.size() == 0)   throw new IllegalArgumentException("I did not find any keys matching this pattern!");
  Collections.sort(keys);
  Key hKey=keys.get(0);
  Value v=DKV.get(hKey);
  byte separator=_separator.specified() ? _separator.value() : CsvParser.NO_SEPARATOR;
  CsvParser.Setup setup=Inspect.csvGuessValue(v,separator);
  if (setup._data == null || setup._data[0].length == 0)   throw new IllegalArgumentException("I cannot figure out this file; I only handle common CSV formats: " + hKey);
  return new PSetup(keys,setup);
}
