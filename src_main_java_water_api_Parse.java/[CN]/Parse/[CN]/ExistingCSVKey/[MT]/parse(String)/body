{
  Key k1=Key.make(input);
  Value v1=DKV.get(k1);
  Pattern p=makePattern(input);
  Pattern exclude=null;
  if (_excludeExpression.specified())   exclude=makePattern(_excludeExpression.value());
  ArrayList<Key> keys=new ArrayList();
  for (  Key key : H2O.keySet()) {
    if (!key.user_allowed())     continue;
    String ks=key.toString();
    if (!p.matcher(ks).matches())     continue;
    if (exclude != null && exclude.matcher(ks).matches())     continue;
    Value v2=DKV.get(key);
    if (v2.isHex())     continue;
    keys.add(key);
  }
  if (keys.size() == 0)   throw new IllegalArgumentException("I did not find any keys matching this pattern!");
  Collections.sort(keys);
  Key hKey=keys.get(0);
  Value v=DKV.get(hKey);
  byte[] bits=Inspect.getFirstBytes(v);
  System.out.println("header value = " + _header.value());
  CustomParser.ParserSetup setup=ParseDataset.guessSetup(bits,new CustomParser.ParserSetup(_parserType.value(),_separator.value(),_header.specified() ? _header.value() : false),_header.specified());
  if (setup == null)   throw new IllegalArgumentException("I cannot figure out this file; Please select the parse setup manually.");
  PSetup res=new PSetup(keys,setup);
  _parserType.setValue(res._setup._pType);
  _separator.setValue(res._setup._separator);
  _header.setValue(res._setup._header);
  System.out.println("header value(2) = " + _header.value());
  _header._hideInQuery=_separator._hideInQuery=res._setup._pType != CustomParser.ParserType.CSV;
  return res;
}
