{
  long t1=System.currentTimeMillis();
  Column ycol=data._ary._cols[data._modelDataMap[data._modelDataMap.length - 1]];
  params.checkResponseCol(ycol);
  GramMatrixFunc gramF=new GramMatrixFunc(data,params,oldBeta);
  double[] newBeta=MemoryManager.malloc8d(data.expandedSz());
  ArrayList<String> warns=new ArrayList<String>();
  boolean converged=true;
  Gram gram=gramF.apply(data);
  int iter=1;
  try {
    lsm.solve(gram.getXX(),gram.getXY(),gram.getYY(),newBeta);
  }
 catch (  NonSPDMatrixException e) {
    if (!(lsm instanceof GeneralizedGradientSolver)) {
      lsm=new GeneralizedGradientSolver(lsm._lambda,lsm._alpha);
      warns.add("Switched to generalized gradient solver due to Non SPD matrix.");
      lsm.solve(gram.getXX(),gram.getXY(),gram.getYY(),newBeta);
    }
  }
  if (params._family != Family.gaussian) {
    if (oldBeta == null)     oldBeta=MemoryManager.malloc8d(data.expandedSz());
    do {
      double[] b=oldBeta;
      oldBeta=(gramF._beta=newBeta);
      newBeta=b;
      gram=gramF.apply(data);
      if (gram.hasNaNsOrInfs())       break;
      try {
        lsm.solve(gram.getXX(),gram.getXY(),gram.getYY(),newBeta);
      }
 catch (      NonSPDMatrixException e) {
        if (!(lsm instanceof GeneralizedGradientSolver)) {
          lsm=new GeneralizedGradientSolver(lsm._lambda,lsm._alpha);
          warns.add("Switched to generalized gradient solver due to Non SPD matrix.");
          lsm.solve(gram.getXX(),gram.getXY(),gram.getYY(),newBeta);
        }
      }
    }
 while (++iter < params._maxIter && betaDiff(newBeta,oldBeta) > params._betaEps);
    converged=converged && (betaDiff(oldBeta,newBeta) < params._betaEps);
  }
  String[] warnings=new String[warns.size()];
  warns.toArray(warnings);
  double[] standardizedBeta=newBeta;
  if (data._standardized) {
    newBeta=newBeta.clone();
    double norm=0.0;
    for (int i=0; i < newBeta.length - 1; i++) {
      double b=newBeta[i] * data._normMul[i];
      norm+=b * data._normSub[i];
      newBeta[i]=b;
    }
    newBeta[newBeta.length - 1]-=norm;
  }
  return new GLMModel(data,newBeta,standardizedBeta,params,lsm,converged,iter,System.currentTimeMillis() - t1,warnings);
}
