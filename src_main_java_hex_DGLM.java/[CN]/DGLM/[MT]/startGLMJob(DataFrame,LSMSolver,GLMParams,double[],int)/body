{
  final GLMJob job=new GLMJob(data._ary,GLMModel.makeKey(true),xval,params);
  final double[] beta;
  final double[] denormalizedBeta;
  if (betaStart != null) {
    beta=betaStart.clone();
    denormalizedBeta=data.denormalizeBeta(beta);
  }
 else {
    beta=denormalizedBeta=null;
  }
  UKV.put(job.dest(),new GLMModel(Status.ComputingModel,0.0f,job.dest(),data,denormalizedBeta,beta,params,lsm,false,0,0,null));
  job.start();
  H2O.submitTask(new H2OCountedCompleter(){
    @Override public void compute2(){
      try {
        buildModel(job,job.dest(),data,lsm,params,beta,xval);
        job.remove();
      }
 catch (      JobCancelledException e) {
        UKV.remove(job.dest());
      }
      tryComplete();
    }
    @Override public boolean onExceptionalCompletion(    Throwable ex,    CountedCompleter caller){
      if (job != null)       job.onException(ex);
      return super.onExceptionalCompletion(ex,caller);
    }
  }
);
  return job;
}
