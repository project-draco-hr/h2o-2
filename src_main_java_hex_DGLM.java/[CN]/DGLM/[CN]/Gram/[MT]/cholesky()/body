{
  _cholesky=true;
  final int sparseN=_diag.length;
  final int denseN=_xy.length - sparseN;
  final int N=_xy.length;
  if (_diag != null)   for (int i=0; i < sparseN; ++i) {
    _diag[i]=Math.sqrt(_diag[i]);
    double d=1.0 / _diag[i];
    for (int j=0; j < denseN; ++j)     _xx[j][i]*=d;
  }
  for (int i=0; i < denseN; ++i)   for (int j=0; j <= i; ++j)   for (int k=0; k < sparseN; ++k)   _xx[i][j + sparseN]-=_xx[i][k] * _xx[j][k];
  double[][] arr=new double[denseN][];
  for (int i=0; i < arr.length; ++i)   arr[i]=Arrays.copyOfRange(_xx[i],sparseN,sparseN + denseN);
  for (int i=0; i < arr.length; ++i)   for (int j=0; j < i; ++j)   arr[j][i]=arr[i][j];
  CholeskyDecomposition chol=new Matrix(arr).chol();
  if (!chol.isSPD())   throw new NonSPDMatrixException();
  arr=chol.getL().getArray();
  for (int i=0; i < arr.length; ++i)   System.arraycopy(arr[i],0,_xx[i],sparseN,i + 1);
}
