{
  for (  Key k : H2O.localKeySet())   if (k.toString().startsWith(_root)) {
    dels.add(k.toString());
    Lockable.delete(k);
  }
  Futures fs=new Futures();
  Key k=null;
  for (int i=0; i < _files.length; ++i) {
    if (_ok[i] < H2O.CLOUD.size()) {
      if (fails != null)       fails.add(_files[i]);
    }
 else {
      File f=new File(_files[i]);
      k=PersistNFS.decodeFile(f);
      if (files != null)       files.add(_files[i]);
      if (keys != null)       keys.add(k.toString());
      if (_newApi) {
        new Frame(k).delete_and_lock(null);
        NFSFileVec nfs=DKV.get(NFSFileVec.make(f,fs)).get();
        Frame fr=new Frame(k,new String[]{"0"},new Vec[]{nfs});
        fr.update(null);
        fr.unlock(null);
      }
 else {
        long size=f.length();
        Value val;
        if (size < 2 * ValueArray.CHUNK_SZ) {
          val=new Value(k,(int)size,Value.NFS);
          val.setdsk();
        }
 else         val=new Value(k,new ValueArray(k,size),Value.NFS);
        DKV.put(k,val,fs);
      }
    }
  }
  fs.blockForPending();
  return k;
}
