{
  Futures fs=new Futures();
  Key k=null;
  for (int i=0; i < _files.length; ++i) {
    boolean failed=false;
    for (int j=0; j < H2O.CLOUD.size(); ++j) {
      if (_ok[i][j] == 0) {
        failed=true;
        fails.add("missing file " + _files[i] + " at node "+ H2O.CLOUD._memary[j]);
      }
    }
    if (!failed) {
      File f=new File(_files[i]);
      k=PersistNFS.decodeFile(f);
      if (files != null)       files.add(_files[i]);
      if (keys != null)       keys.add(k.toString());
      if (DKV.get(k) != null)       dels.add(k.toString());
      new Frame(k).delete_and_lock(null);
      NFSFileVec nfs=DKV.get(NFSFileVec.make(f,fs)).get();
      Frame fr=new Frame(k,new String[]{"0"},new Vec[]{nfs});
      fr.update(null);
      fr.unlock(null);
    }
  }
  fs.blockForPending();
  return k;
}
