def test_GLM2grid_covtype_many(self):
    h2o.beta_features = True
    csvFilename = 'covtype.data'
    csvPathname = ('standard/' + csvFilename)
    parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, schema='put', timeoutSecs=10)
    inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
    print ('\n' + csvPathname), '    numRows:', '{:,}'.format(inspect['numRows']), '    numCols:', '{:,}'.format(inspect['numCols'])
    print 'WARNING: max_iter set to 8 for benchmark comparisons'
    max_iter = 8
    y = '54'
    kwargs = {'response': y, 'family': 'gaussian', 'n_folds': 2, 'max_iter': max_iter, 'beta_epsilon': 0.001, 'lambda': '0,0.5,0.8', 'alpha': '0,1e-8,1e-4', }
    start = time.time()
    jobs = []
    totalGLMGridJobs = 0
    for i in range(3):
        glmResult = h2o_cmd.runGLM(parseResult=parseResult, timeoutSecs=300, noPoll=True, **kwargs)
        job_key = glmResult['job_key']
        model_key = glmResult['destination_key']
        jobs.append((job_key, model_key))
        totalGLMGridJobs += 1
    for i in range(10):
        time.sleep(3)
        hex_key = (str(i) + '.hex')
        src_key = (str(i) + '.src')
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, schema='put', src_key=src_key, hex_key=hex_key, timeoutSecs=10, noPoll=True, doSummary=False)
    h2o_jobs.pollWaitJobs(timeoutSecs=300)
    elapsed = (time.time() - start)
    for (job_key, model_key) in jobs:
        glmResult = h2o.nodes[0].glm_view(_modelKey=model_key)
        print 'GLM Grid result', h2o.dump_json(glmResult)
    print 'All GLMGrid jobs completed in', elapsed, 'seconds.'
    print 'totalGLMGridJobs:', totalGLMGridJobs
