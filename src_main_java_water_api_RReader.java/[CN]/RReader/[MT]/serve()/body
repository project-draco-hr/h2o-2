{
  Value source=_source.value();
  Key dest=_dest.value();
  if (dest == null) {
    String n=source._key.toString();
    int dot=n.lastIndexOf('.');
    if (dot > 0)     n=n.substring(0,dot);
    dest=Key.make(RFModel.KEY_PREFIX + n);
  }
  try {
    final Value source_=source;
    final Key dest_=dest;
    H2O.submitTask(new H2OCountedCompleter(){
      @Override public void compute2(){
        try {
          water.RReader.run(dest_,source_.openStream());
        }
 catch (        IOException e) {
          Log.err(e);
        }
      }
    }
);
    JsonObject response=new JsonObject();
    response.addProperty(RequestStatics.DEST_KEY,dest.toString());
    Response r=RReaderProgress.redirect(response,dest);
    r.setBuilder(RequestStatics.DEST_KEY,new KeyElementBuilder());
    return r;
  }
 catch (  IllegalArgumentException e) {
    Log.err(e);
    return Response.error(e.getMessage());
  }
catch (  Error e) {
    Log.err(e);
    return Response.error(e.getMessage());
  }
}
