{
  AutoBuffer bits=_ary.getChunk(_k);
  Column cl=_ary._cols[_modelDataMap[_modelDataMap.length - 1]];
  int rows=bits.remaining() / _ary.rowSize();
  int[] indexes=new int[_nclasses];
  ROWS:   for (int i=0; i < rows; ++i) {
    int c=(int)(_ary.data(bits,i,cl) - cl._min);
    int outputRow=indexes[c] + _startRows[c];
    if ((_iclasses != null) && _iclasses[c])     continue ROWS;
    for (    int col : _binColIds) {
      int dcol=_modelDataMap[col];
      if (_ary.isNA(bits,i,dcol)) {
        continue ROWS;
      }
      float f=(float)_ary.datad(bits,i,dcol);
      if (!_dapt.isValid(col,f)) {
        continue ROWS;
      }
    }
    for (    int col : _rawColIds) {
      int dcol=_modelDataMap[col];
      if (_ary.isNA(bits,i,dcol)) {
        continue ROWS;
      }
      float f=(float)_ary.datad(bits,i,dcol);
      if (!_dapt.isValid(col,f)) {
        continue ROWS;
      }
    }
    ++indexes[c];
    if (_bin) {
      for (      int col : _binColIds)       ;
    }
 else {
      for (      int col : _binColIds)       ;
      for (int col=0; col < _rawColIds.length; ++col) {
        ;
      }
    }
  }
  _bin=false;
}
