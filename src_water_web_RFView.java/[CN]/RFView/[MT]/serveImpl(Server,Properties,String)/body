{
  JsonObject json=serverJson(s,p,sessionID);
  if (json.has("error"))   return H2OPage.error(json.get("error").toString());
  ValueArray ary=ServletUtil.check_array(p,DATA_KEY);
  final int classcol=json.get(CLASS_COL).getAsInt();
  final Key modelKey=ServletUtil.check_key(p,MODEL_KEY);
  RFModel model=UKV.get(modelKey,new RFModel());
  int atree=json.get(REQ_TREE).getAsInt();
  int ntree=json.get(NUM_TREE).getAsInt();
  if (model.size() == ntree)   atree=ntree;
  boolean oobee=getBoolean(p,OOBEE);
  double[] classWt=RandomForestPage.determineClassWeights(p.getProperty("classWt",""),ary,classcol,MAX_CLASSES);
  if (p.getProperty("clearCM","0").equals("1"))   Confusion.remove(model,ary._key,classcol,oobee);
  RString response=new RString(html());
  Confusion confusion=Confusion.make(model,ary._key,classcol,classWt,oobee);
  if (confusion.isValid()) {
    confusion.report();
    final int N=model.classes();
    int cmin=(int)ary._cols[classcol]._min;
    StringBuilder sb=new StringBuilder();
    sb.append("<th>Actual \\ Predicted");
    for (int i=0; i < N; i++)     sb.append("<th>").append("class " + (i + cmin));
    sb.append("<th>Error");
    response.replace("chead",sb.toString());
    response.replace("flavor",confusion._computeOOB ? "OOB error estimate" : "full scoring");
    long ctots[]=new long[N];
    long terrs=0;
    for (int i=0; i < N; i++) {
      RString row=response.restartGroup("CtableRow");
      sb=new StringBuilder();
      sb.append("<td>").append("class " + (i + cmin));
      long tot=0;
      long err=0;
      for (int j=0; j < N; j++) {
        long v=confusion._matrix == null ? 0 : confusion._matrix[i][j];
        tot+=v;
        ctots[j]+=v;
        if (i == j)         sb.append("<td style='background-color:LightGreen'>");
 else {
          sb.append("<td>");
          err+=v;
        }
        sb.append(v);
      }
      terrs+=err;
      sb.append("<td>");
      if (tot != 0)       sb.append(String.format("%5.3f = %d / %d",(double)err / tot,err,tot));
      row.replace("crow",sb.toString());
      row.append();
    }
    RString row=response.restartGroup("CtableRow");
    sb=new StringBuilder();
    sb.append("<td>").append("Totals");
    long ttots=0;
    for (int i=0; i < N; i++) {
      ttots+=ctots[i];
      sb.append("<td>").append(ctots[i]);
    }
    sb.append("<td>");
    if (ttots != 0)     sb.append(String.format("%5.3f = %d / %d",(double)terrs / ttots,terrs,ttots));
    row.replace("crow",sb.toString());
    row.append();
  }
 else {
    response.replace("ctableStyle","display:none");
    response.replace("ctableMessage","<div class='alert alert-info'><b>Please wait!</b> The confusion matrix is already being calculated. The page will automatically refresh..</div>");
  }
  if (atree < model.size()) {
    RString button=new RString(htmlButton);
    button.replace(json);
    response.replace("validateMore",button.toString());
  }
 else {
    response.replace("validateMore","");
  }
  response.replace(json);
  _refresh=model.size() < ntree ? 5 : 0;
  response.replace("depth",model.depth());
  response.replace("leaves",model.leaves());
  response.replace("weights",classWt == null ? "default" : Arrays.toString(classWt));
  int limkeys=Math.min(model.size(),1000);
  for (int i=0; i < limkeys; i++) {
    RString trow=response.restartGroup("trees");
    trow.replace(MODEL_KEY,modelKey);
    trow.replace("n",i);
    trow.replace(DATA_KEY,ary._key);
    trow.replace(CLASS_COL,classcol);
    trow.append();
  }
  RString url=new RString("RFViewQuery?modelKey=%$key&class=%class&dataKey=%$data");
  url.replace("key",modelKey);
  url.replace(CLASS_COL,classcol);
  url.replace("data",ary._key);
  response.replace("validateOther",url.toString());
  return response.toString();
}
