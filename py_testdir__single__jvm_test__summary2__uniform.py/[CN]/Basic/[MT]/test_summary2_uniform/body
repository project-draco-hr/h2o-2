def test_summary2_uniform(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(500000, 2, 'cD', 300, 0, 9), (500000, 2, 'cE', 300, 1, 10), (500000, 2, 'cF', 300, 2, 11)]
    timeoutSecs = 10
    trial = 1
    n = h2o.nodes[0]
    lenNodes = len(h2o.nodes)
    x = 0
    for (rowCount, colCount, hex_key, timeoutSecs, expectedMin, expectedMax) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        x += 1
        csvFilename = (((((('syn_' + 'binary') + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print 'Creating random', csvPathname
        legalValues = {}
        for x in range(expectedMin, expectedMax):
            legalValues[x] = x
        write_syn_dataset(csvPathname, rowCount, colCount, expectedMin, expectedMax, SEEDPERFILE)
        h2o.beta_features = False
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=10, doSummary=False)
        print csvFilename, 'parse time:', parseResult['response']['time']
        print "Parse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvFilename)
        h2o.beta_features = True
        summaryResult = h2o_cmd.runSummary(key=hex_key, cols=0, max_ncols=1)
        if h2o.verbose:
            print 'summaryResult:', h2o.dump_json(summaryResult)
        summaries = summaryResult['summaries']
        for column in summaries:
            colname = column['colname']
            coltype = column['type']
            nacnt = column['nacnt']
            stats = column['stats']
            stattype = stats['type']
            mean = stats['mean']
            sd = stats['sd']
            zeros = stats['zeros']
            mins = stats['mins']
            maxs = stats['maxs']
            pct = stats['pct']
            pctile = stats['pctile']
            hstart = column['hstart']
            hstep = column['hstep']
            hbrk = column['hbrk']
            hcnt = column['hcnt']
            for b in hcnt:
                e = (0.1 * rowCount)
            print 'pctile:', pctile
            print 'maxs:', maxs
            self.assertAlmostEqual(maxs[0], (expectedMax + 1), delta=0.1)
            print 'mins:', mins
            self.assertAlmostEqual(mins[0], expectedMin, delta=0.1)
            for v in pctile:
                self.assertTrue((v >= expectedMin), ('Percentile value %s should all be >= the min dataset value %s' % (v, expectedMin)))
                self.assertTrue((v <= (expectedMax + 1)), ('Percentile value %s should all be <= the max dataset value %s' % (v, (expectedMax + 1))))
            eV1 = [1.0, 1.0, 1.0, 3.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 10.0]
            if (expectedMin == 1):
                eV = eV1
            elif (expectedMin == 0):
                eV = [(e - 1) for e in eV1]
            elif (expectedMin == 2):
                eV = [(e + 1) for e in eV1]
            else:
                raise Exception(("Test doesn't have the expected percentileValues for expectedMin: %s" % expectedMin))
        trial += 1
        if DO_SCIPY_COMPARE:
            generate_scipy_comparison(csvPathname)
