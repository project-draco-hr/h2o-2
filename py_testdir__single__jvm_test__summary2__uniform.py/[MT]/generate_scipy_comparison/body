def generate_scipy_comparison(csvPathname, col=0, h2oMedian=None, h2oMedian2=None):
    import numpy as np
    import scipy as sp
    dataset = np.genfromtxt(open(csvPathname, 'r'), delimiter=',', dtype=None)
    print 'csv read for training, done'
    NUMCLASSES = 10
    print 'csv read for training, done'
    print dataset.shape
    target = dataset
    targetFP = np.array(target, np.float)
    if (1 == 0):
        n_features = (len(dataset[0]) - 1)
        print 'n_features:', n_features
        print 'histogram of target'
        print target
        print sp.histogram(target, bins=NUMCLASSES)
        print target[0]
        print target[1]
    thresholds = [0.001, 0.01, 0.1, 0.25, 0.33, 0.5, 0.66, 0.75, 0.9, 0.99, 0.999]
    p = np.percentile(targetFP, (50 if DO_MEDIAN else 99.9))
    h2p.red_print('numpy.percentile', p)
    from scipy import stats
    a = stats.scoreatpercentile(targetFP, per=(50 if DO_MEDIAN else 99.9))
    h2p.red_print('scipy stats.scoreatpercentile', a)
    alphap = 0
    betap = 0
    alphap = 0.5
    betap = 0.5
    alphap = (1 / 3.0)
    betap = (1 / 3.0)
    alphap = 0.4
    betap = 0.4
    alphap = 1
    betap = 1
    per = [(1 * t) for t in thresholds]
    print 'scipy per', per
    a = stats.mstats.mquantiles(targetFP, prob=per, alphap=alphap, betap=betap)
    a2 = [v for v in a]
    h2p.red_print("scipy stats.mstats.mquantiles type 8 (don't have type 2):", a2)
    targetFP.sort()
    b = h2o_summ.percentileOnSortedList(targetFP, (0.5 if DO_MEDIAN else 0.999), interpolate='linear')
    label = ('50%' if DO_MEDIAN else '99.9%')
    h2p.blue_print(label, 'from sort:', b)
    s = a[(5 if DO_MEDIAN else 10)]
    h2p.blue_print(label, 'from scipy:', s)
    h2p.blue_print(label, 'from numpy:', p)
    h2p.blue_print(label, 'from h2o summary:', h2oMedian)
    h2p.blue_print(label, 'from h2o multipass:', h2oMedian2)
    h2o_util.assertApproxEqual(h2oMedian2, b, tol=2e-07, msg='h2o quantile multipass is not approx. same as sort algo')
    h2o_util.assertApproxEqual(h2oMedian2, p, rel=0.01, msg='h2o quantile multipass is not approx. same as numpy algo')
    h2o_util.assertApproxEqual(h2oMedian2, s, rel=0.01, msg='h2o quantile multipass is not approx. same as scipy algo')
    if (1 == 0):
        a = stats.mstats.mquantiles(targetFP, prob=per, alphap=alphap, betap=betap)
        a2 = [v for v in a]
        h2p.red_print('after sort')
        h2p.red_print('scipy stats.mstats.mquantiles:', a2)
