{
  try {
    final int cyl_idx=fr.find("cylinders");
    final int year_idx=fr.find("year");
    SumCol sumcols=fr.with(new SumCol(year_idx)).doit();
    System.out.println(sumcols._sum + "/" + sumcols._n+ " = "+ (sumcols._sum / sumcols._n));
    System.out.println();
    SumCol sumCol=new SumCol(year_idx);
    Flow.FlowPerRow<SumCol> flowPerRow=fr.with(sumCol);
    SumCol result=flowPerRow.doit();
    System.out.println("TOM: " + result._sum + " "+ result._n);
    SumCol sumcols1=fr.with(new Flow.Filter(){
      public boolean filter(      double ds[]){
        return ds[cyl_idx] != 5;
      }
    }
).with(new SumCol(year_idx)).doit();
    System.out.println(sumcols1._sum + "/" + sumcols1._n+ " = "+ (sumcols1._sum / sumcols1._n));
    System.out.println();
    Futures fs=new Futures();
    for (int i=0; i < fr.numCols(); i++)     fr.vecs()[i].rollupStats(fs);
    fs.blockForPending();
    IcedHashMap<IcedLong,SumCol> sumcols2=fr.with(new Flow.GroupBy(){
      public long groupId(      double ds[]){
        return (long)ds[cyl_idx];
      }
    }
).with(new SumCol(year_idx)).doit();
    for (    IcedLong gid : sumcols2.keySet()) {
      SumCol sumcol=sumcols2.get(gid);
      System.out.println("Cyl=" + gid._val + ", "+ sumcol._sum+ "/"+ sumcol._n+ " = "+ (sumcol._sum / sumcol._n));
    }
    System.out.println();
{
      System.out.println("TOM ----- START");
class MyGroupBy extends Flow.GroupBy {
        public long groupId(        double ds[]){
          return (long)ds[cyl_idx];
        }
      }
      SumCol sumCol10=new SumCol(year_idx);
      Flow.FlowGroupBy flowGroupBy=fr.with(new MyGroupBy());
      Flow.FlowGroupPerRow flowGroupPerRow=flowGroupBy.with(sumCol10);
      IcedHashMap<IcedLong,SumCol> hashMap=flowGroupPerRow.doit();
      for (      IcedLong gid : hashMap.keySet()) {
        SumCol sumcol=sumcols2.get(gid);
        System.out.println("Cyl=" + gid._val + ", "+ sumcol._sum+ "/"+ sumcol._n+ " = "+ (sumcol._sum / sumcol._n));
      }
      System.out.println("TOM ----- END");
      System.out.println();
    }
    IcedHashMap<IcedLong,SumCol> sumcols3=fr.with(new Flow.Filter(){
      public boolean filter(      double ds[]){
        return ds[cyl_idx] != 5;
      }
    }
).with(new Flow.GroupBy(){
      public long groupId(      double ds[]){
        return (long)ds[cyl_idx];
      }
    }
).with(new SumCol(year_idx)).doit();
    for (    IcedLong gid : sumcols3.keySet()) {
      SumCol sumcol=sumcols3.get(gid);
      System.out.println("Cyl=" + gid._val + ", "+ sumcol._sum+ "/"+ sumcol._n+ " = "+ (sumcol._sum / sumcol._n));
    }
    System.out.println();
    IcedHashMap<IcedLong,SumCol> sumcols4=fr.with(new Flow.GroupBy(){
      public long groupId(      double ds[]){
        return (long)ds[cyl_idx];
      }
    }
).with(new Flow.Filter(){
      public boolean filter(      double ds[]){
        return ds[cyl_idx] != 5;
      }
    }
).with(new SumCol(year_idx)).doit();
    for (    IcedLong gid : sumcols4.keySet()) {
      SumCol sumcol=sumcols4.get(gid);
      System.out.println("Cyl=" + gid._val + ", "+ sumcol._sum+ "/"+ sumcol._n+ " = "+ (sumcol._sum / sumcol._n));
    }
    System.out.println();
    SummaryPerRow spr=fr.with(new SummaryPerRow(fr)).doit();
    spr.finishUp();
    System.out.println(spr);
    System.out.println();
    IcedHashMap<IcedLong,SummaryPerRow> sprs=fr.with(new Flow.GroupBy(){
      public long groupId(      double ds[]){
        return (long)ds[cyl_idx];
      }
    }
).with(new SummaryPerRow(fr)).doit();
    for (    IcedLong gid : sprs.keySet()) {
      SummaryPerRow spr2=sprs.get(gid);
      spr2.finishUp();
      System.out.println("Group ID=" + gid._val);
      System.out.println(spr2);
      System.out.println();
    }
    System.out.println();
  }
  finally {
    UKV.remove(k);
  }
}
