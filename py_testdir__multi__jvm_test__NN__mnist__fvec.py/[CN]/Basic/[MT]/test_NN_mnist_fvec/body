def test_NN_mnist_fvec(self):
    h2o.beta_features = True
    csvFilelist = [('mnist_training.csv.gz', 'mnist_testing.csv.gz', 600), ('mnist_training.csv.gz', 'mnist_testing.csv.gz', 600), ('mnist_training.csv.gz', 'mnist_testing.csv.gz', 600), ('mnist_training.csv.gz', 'mnist_testing.csv.gz', 600)]
    trial = 0
    for (trainCsvFilename, testCsvFilename, timeoutSecs) in csvFilelist:
        trialStart = time.time()
        testKey2 = (((testCsvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=('mnist/' + testCsvFilename), schema='put', hex_key=testKey2, timeoutSecs=timeoutSecs, noise=('StoreView', None))
        elapsed = (time.time() - start)
        print 'parse end on ', testCsvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseResult['destination_key']
        trainKey2 = (((trainCsvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=('mnist/' + trainCsvFilename), schema='put', hex_key=trainKey2, timeoutSecs=timeoutSecs, noise=('StoreView', None))
        elapsed = (time.time() - start)
        print 'parse end on ', trainCsvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + trainCsvFilename), '    numRows:', '{:,}'.format(inspect['numRows']), '    numCols:', '{:,}'.format(inspect['numCols'])
        response = (inspect['numCols'] - 1)
        x = ','.join(map(str, range(response)))
        modelKey = 'a.hex'
        kwargs = {'response': 'C0', 'ignored_cols': None, 'classification': 1, 'validation': trainKey2, 'activation': 'Tanh', 'hidden': 500, 'rate': 0.01, 'l2': 0.0001, 'epochs': 2, 'destination_key': modelKey, }
        timeoutSecs = 600
        start = time.time()
        nnResult = h2o_cmd.runNNet(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
        print 'nnResult:', h2o.dump_json(nnResult)
        print 'neural net end on ', trainCsvFilename, 'took', (time.time() - start), 'seconds'
        job_key = nnResult['job_key']
        params = {'job_key': job_key, 'destination_key': modelKey, }
        a = h2o.nodes[0].completion_redirect(jsonRequest='2/NeuralNetProgress.json', params=params)
        print 'NeuralNetProgress:', h2o.dump_json(a)
        if DO_SCORE:
            kwargs = {'max_rows': 0, 'response': 'C0', 'ignored_cols': None, 'cols': None, 'classification': 1, 'destination_key': 'b.hex', 'model': modelKey, }
            nnScoreResult = h2o_cmd.runNNetScore(key=parseResult['destination_key'], timeoutSecs=timeoutSecs, **kwargs)
            print 'neural net score end on ', trainCsvFilename, 'took', (time.time() - start), 'seconds'
            print 'nnScoreResult:', h2o.dump_json(nnScoreResult)
