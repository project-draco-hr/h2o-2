{
  Frame fr;
  KMeans2Model model=null;
  try {
    logStart();
    source.read_lock(self());
    fr=FrameTask.DataInfo.prepareFrame(source,ignored_cols,false,drop_na_cols);
    Vec vecs[]=fr.vecs();
    final int N=vecs.length;
    int ncats=0, len=N;
    while (ncats != len) {
      while (vecs[ncats].isEnum())       ncats++;
      while (len > 0 && !vecs[len - 1].isEnum())       len--;
      if (ncats < len - 1)       fr.swap(ncats,len - 1);
    }
    _ncats=ncats;
    model=new KMeans2Model(this,dest(),fr._key,fr.names(),fr.domains());
    model.delete_and_lock(self());
    double[] means=new double[N];
    for (int i=0; i < N; i++)     means[i]=vecs[i].mean();
    double[] mults=null;
    if (normalize) {
      mults=new double[N];
      for (int i=0; i < N; i++) {
        double sigma=vecs[i].sigma();
        mults[i]=normalize(sigma) ? 1.0 / sigma : 1.0;
      }
    }
    Random rand=Utils.getRNG(seed - 1);
    double clusters[][];
    if (initialization == Initialization.None) {
      clusters=model.centers=new double[k][fr.numCols()];
      for (      double[] cluster : clusters)       randomRow(vecs,rand,cluster,means,mults);
    }
 else {
      clusters=new double[1][vecs.length];
      randomRow(vecs,rand,clusters[0],means,mults);
      while (model.iterations < 5) {
        SumSqr sqr=new SumSqr(clusters,means,mults,_ncats).doAll(vecs);
        Sampler sampler=new Sampler(clusters,means,mults,_ncats,sqr._sqr,k * 3,seed).doAll(vecs);
        clusters=Utils.append(clusters,sampler._sampled);
        if (!isRunning())         return;
        model.centers=denormalize(clusters,ncats,means,mults);
        model.total_within_SS=sqr._sqr / fr.numRows();
        model.iterations++;
        model.update(self());
      }
      clusters=recluster(clusters,rand);
    }
    model.iterations=0;
    boolean done=false;
    LOOP:     for (; model.iterations < max_iter; model.iterations++) {
      if (!isRunning())       return;
      Lloyds task=new Lloyds(clusters,means,mults,_ncats,k).doAll(vecs);
      max_cats(task._cMeans,task._cats);
      boolean badrow=false;
      for (int clu=0; clu < k; clu++)       if (task._rows[clu] == 0) {
        if (badrow) {
          Log.warn("KMeans: Re-running Lloyds to re-init another cluster");
          model.iterations--;
          continue LOOP;
        }
        long row=task._worse_row;
        Log.warn("KMeans: Re-initing cluster " + clu + " to row "+ row);
        data(clusters[clu]=task._cMeans[clu],vecs,row,means,mults);
        task._rows[clu]=1;
        badrow=true;
      }
      model.centers=denormalize(task._cMeans,ncats,means,mults);
      model.size=task._rows;
      model.within_cluster_variances=task._cSqr;
      double ssq=0;
      for (int i=0; i < k; i++) {
        ssq+=model.within_cluster_variances[i];
        model.within_cluster_variances[i]/=task._rows[i];
      }
      model.total_within_SS=ssq / fr.numRows();
      model.update(self());
      double sum=0;
      for (int clu=0; clu < k; clu++)       sum+=distance(clusters[clu],task._cMeans[clu],ncats);
      sum/=N;
      Log.info("KMeans: Change in cluster centers=" + sum);
      done=(sum < 1e-6 || model.iterations == max_iter - 1);
      if (done) {
        Log.info("Writing clusters to key " + model._clustersKey);
        Clusters cc=new Clusters();
        cc._clusters=clusters;
        cc._means=means;
        cc._mults=mults;
        cc.doAll(1,vecs);
        Frame fr2=cc.outputFrame(model._clustersKey,new String[]{"Cluster ID"},new String[][]{Utils.toStringMap(0,cc._clusters.length - 1)});
        fr2.delete_and_lock(self()).unlock(self());
        break;
      }
      clusters=task._cMeans;
      StringBuilder sb=new StringBuilder();
      sb.append("KMeans: iter: ").append(model.iterations).append(", MSE=").append(model.total_within_SS);
      for (int i=0; i < k; i++)       sb.append(", ").append(task._cSqr[i]).append("/").append(task._rows[i]);
      Log.info(sb);
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    cancel(t);
  }
 finally {
    if (model != null)     model.unlock(self());
    source.unlock(self());
    state=UKV.<Job>get(self()).state;
    new TAtomic<KMeans2Model>(){
      @Override public KMeans2Model atomic(      KMeans2Model m){
        if (m != null)         m.get_params().state=state;
        return m;
      }
    }
.invoke(dest());
  }
}
