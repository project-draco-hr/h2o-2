def test_from_import_fvec(self):
    print 'Sets h2o.beat_features like -bf at command line'
    print 'this will redirect import and parse to the 2 variants'
    h2o.beta_features = True
    importFolderPath = 'standard'
    timeoutSecs = 500
    csvFilenameAll = [('manyfiles-nflx-gz', 'file_1.dat.gz'), ('standard', 'covtype.data'), ('standard', 'covtype20x.data')]
    csvFilenameList = csvFilenameAll
    for (importFolderPath, csvFilename) in csvFilenameList:
        csvPathname = ((importFolderPath + '/') + csvFilename)
        (importResult, importPattern) = h2i.import_only(bucket='home-0xdiag-datasets', path=csvPathname, schema='local', timeoutSecs=50)
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, schema='local', hex_key='c.hex', timeoutSecs=500, noPoll=True, doSummary=False)
        h2o.check_sandbox_for_errors()
        print '\nparseResult', h2o.dump_json(parseResult)
        if (not h2o.beta_features):
            print csvFilename, 'parse time:', parseResult['response']['time']
            print "Parse result['destination_key']:", parseResult['destination_key']
            inspect = h2o_cmd.runInspect(key=parseResult['destination_key'], timeoutSecs=30)
        h2o_jobs.pollWaitJobs(pattern='RF_model', timeoutSecs=300, pollTimeoutSecs=10, retryDelaySecs=5)
        inspect = h2o_cmd.runInspect(key='c.hex', timeoutSecs=30)
        h2o.check_sandbox_for_errors()
        parseResult = {'destination_key': 'c.hex', }
        if (not h2o.beta_features):
            RFview = h2o_cmd.runRF(trees=1, depth=25, parseResult=parseResult, timeoutSecs=timeoutSecs)
        h2o.check_sandbox_for_errors()
        if (1 == 0):
            h2i.delete_keys_from_import_result(pattern=csvFilename, importResult=importResult)
        sys.stdout.write('.')
        sys.stdout.flush()
