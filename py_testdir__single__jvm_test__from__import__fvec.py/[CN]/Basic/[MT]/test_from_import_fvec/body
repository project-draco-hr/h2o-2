def test_from_import_fvec(self):
    print 'Sets h2o.beat_features like -bf at command line'
    print 'this will redirect import and parse to the 2 variants'
    h2o.beta_features = True
    importFolderPath = 'standard'
    timeoutSecs = 500
    csvFilenameAll = [('manyfiles-nflx-gz', 'file_[1-9].dat.gz', 378), ('standard', 'covtype.data', 54), ('standard', 'covtype20x.data', 54)]
    csvFilenameList = csvFilenameAll
    for (importFolderPath, csvFilename, vresponse) in csvFilenameList:
        csvPathname = ((importFolderPath + '/') + csvFilename)
        h2o.beta_features = False
        (importResult, importPattern) = h2i.import_only(bucket='home-0xdiag-datasets', path=csvPathname, schema='local', timeoutSecs=50)
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, schema='local', hex_key='c.hex', timeoutSecs=500, noPoll=True, doSummary=False)
        h2o.check_sandbox_for_errors()
        print '\nparseResult', h2o.dump_json(parseResult)
        time.sleep(2)
        h2o_jobs.pollWaitJobs(pattern=None, timeoutSecs=300, pollTimeoutSecs=10, retryDelaySecs=5)
        if h2o.beta_features:
            parseResult = {'destination_key': 'c.hex', }
        else:
            print csvFilename, 'parse time:', parseResult['response']['time']
            print "Parse result['destination_key']:", parseResult['destination_key']
            inspect = h2o_cmd.runInspect(key=parseResult['destination_key'], timeoutSecs=30)
        h2o.beta_features = True
        inspect = h2o_cmd.runInspect(key='c.hex', timeoutSecs=30)
        h2o.check_sandbox_for_errors()
        if (importFolderPath == 'manyfiles-nflx-gz'):
            execExpr = 'c.hex=colSwap(c.hex,378,(c.hex[378]>15 ? 1 : 0))'
            resultExec = h2o_cmd.runExec(expression=execExpr)
            x = range(542)
            xIgnore = []
            for i in [4, 3, 5, 6, 7, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 424, 425, 426, 540, 541, 378]:
                x.remove(i)
                xIgnore.append(i)
            x = ','.join(map(str, x))
            xIgnore = ','.join(map(str, xIgnore))
        else:
            xIgnore = 0
        params = {'destination_key': 'GBMKEY', 'ignored_cols': xIgnore, 'learn_rate': 0.1, 'ntrees': 2, 'max_depth': 8, 'min_rows': 1, 'vresponse': vresponse, }
        kwargs = params.copy()
        h2o.beta_features = True
        timeoutSecs = 1800
        start = time.time()
        GBMResult = h2o_cmd.runGBM(parseResult=parseResult, noPoll=True, **kwargs)
        time.sleep(2)
        h2o_jobs.pollWaitJobs(pattern=None, timeoutSecs=300, pollTimeoutSecs=10, retryDelaySecs=5)
        elapsed = (time.time() - start)
        print 'GBM training completed in', elapsed, 'seconds.', ('%f pct. of timeout' % GBMResult['python_%timeout'])
        print '\nGBMResult:', GBMResult
        h2o.check_sandbox_for_errors()
        if DELETE_KEYS:
            h2i.delete_keys_from_import_result(pattern=csvFilename, importResult=importResult)
        sys.stdout.write('.')
        sys.stdout.flush()
