def __do_json_request(self, jsonRequest=None, fullUrl=None, timeout=10, params=None, returnFast=False, cmd='get', extraComment=None, ignoreH2oError=False, noExtraErrorCheck=False, **kwargs):
    if fullUrl:
        url = fullUrl
    else:
        url = self.__url(jsonRequest)
    if (params is not None):
        params2 = params.copy()
        for k in params2:
            if (params2[k] is None):
                del params[k]
        paramsStr = ('?' + '&'.join([('%s=%s' % (k, v)) for (k, v) in params.items()]))
    else:
        paramsStr = ''
    if extraComment:
        log((('Start ' + url) + paramsStr), comment=extraComment)
    else:
        log((('Start ' + url) + paramsStr))
    log_rest('')
    log_rest('----------------------------------------------------------------------\n')
    if extraComment:
        log_rest(('# Extra comment info about this request: ' + extraComment))
    if (cmd == 'get'):
        log_rest('GET')
    else:
        log_rest('POST')
    log_rest((url + paramsStr))
    try:
        if (cmd == 'post'):
            r = requests.post(url, timeout=timeout, params=params, **kwargs)
        else:
            r = requests.get(url, timeout=timeout, params=params, **kwargs)
    except Exception as e:
        exc_info = sys.exc_info()
        if (not noExtraErrorCheck):
            h2p.red_print(('ERROR: got exception on %s to h2o. \nGoing to check sandbox, then rethrow..' % (url + paramsStr)))
            time.sleep(2)
            check_sandbox_for_errors(python_test_name=python_test_name)
        log_rest('')
        log_rest(('EXCEPTION CAUGHT DOING REQUEST: ' + str(e.message)))
        raise exc_info[1], None, exc_info[2]
    log_rest('')
    log_rest(('HTTP status code: ' + str(r.status_code)))
    log_rest(r.text)
    if ((not beta_features) and (not r)):
        raise Exception(('Maybe bad url? no r in __do_json_request in %s:' % inspect.stack()[1][3]))
    json_url_history.append(r.url)
    if ((not beta_features) and (not r.json())):
        raise Exception(('Maybe bad url? no r.json in __do_json_request in %s:' % inspect.stack()[1][3]))
    rjson = None
    if returnFast:
        return
    try:
        rjson = r.json()
    except:
        print dump_json(r.text)
        if (not isinstance(r, (list, dict))):
            raise Exception('h2o json responses should always be lists or dicts, see previous for text')
        raise Exception('Could not decode any json from the request. Do you have beta features turned on? beta_features: ', beta_features)
    for e in ['error', 'Error', 'errors', 'Errors']:
        if ((e in rjson) and rjson[e]):
            verboseprint(dump_json(rjson))
            emsg = ('rjson %s in %s: %s' % (e, inspect.stack()[1][3], rjson[e]))
            if ignoreH2oError:
                print emsg
            else:
                raise Exception(emsg)
    for w in ['warning', 'Warning', 'warnings', 'Warnings']:
        if ((w in rjson) and rjson[w]):
            verboseprint(dump_json(rjson))
            print ('rjson %s in %s: %s' % (w, inspect.stack()[1][3], rjson[w]))
    return rjson
