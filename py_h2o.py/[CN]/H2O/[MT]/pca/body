def pca(self, data_key, timeoutSecs=600, retryDelaySecs=1, initialDelaySecs=5, pollTimeoutSecs=30, noPoll=False, print_params=True, benchmarkLogging=None, returnFast=False, **kwargs):
    params_dict = {'destination_key': None, 'source': data_key, 'ignored_cols': None, 'tolerance': None, 'max_pc': None, 'standardize': None, }
    check_params_update_kwargs(params_dict, kwargs, 'pca', print_params)
    start = time.time()
    a = self.__do_json_request('2/PCA.json', timeout=timeoutSecs, params=params_dict, returnFast=returnFast)
    if noPoll:
        return a
    a = self.poll_url(a, timeoutSecs=timeoutSecs, retryDelaySecs=retryDelaySecs, benchmarkLogging=benchmarkLogging, initialDelaySecs=initialDelaySecs, pollTimeoutSecs=pollTimeoutSecs)
    verboseprint('\nPCA result:', dump_json(a))
    a['python_elapsed'] = (time.time() - start)
    a['python_%timeout'] = ((a['python_elapsed'] * 100) / timeoutSecs)
    return a
