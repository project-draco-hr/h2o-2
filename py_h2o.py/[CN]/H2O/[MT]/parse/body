def parse(self, key, key2=None, timeoutSecs=300, retryDelaySecs=0.2, initialDelaySecs=None, pollTimeoutSecs=180, noise=None, benchmarkLogging=None, noPoll=False, **kwargs):
    browseAlso = kwargs.pop('browseAlso', False)
    algo = ('Parse2' if beta_features else 'Parse')
    verboseprint(('\n %s key: %s to key2: %s (if None, means default)' % (algo, key, key2)))
    params_dict = {'source_key': key, 'destination_key': key2, }
    params_dict.update(kwargs)
    print ('\n%s params list:' % algo), params_dict
    if kwargs.get('header_from_file'):
        kwargs['header'] = 1
    if benchmarkLogging:
        cloudPerfH2O.get_log_save(initOnly=True)
    a = self.__do_json_request((algo + '.json'), timeout=timeoutSecs, params=params_dict)
    verboseprint((algo + ' result:'), dump_json(a))
    if ((not beta_features) and (a['response']['redirect_request'] != 'Progress')):
        raise Exception(('H2O %s redirect is not Progress. %s json response precedes.' % (algo, algo)))
    if noPoll:
        return a
    verboseprint((algo + ' noise:'), noise)
    a = self.poll_url(a['response'], timeoutSecs=timeoutSecs, retryDelaySecs=retryDelaySecs, initialDelaySecs=initialDelaySecs, pollTimeoutSecs=pollTimeoutSecs, noise=noise, benchmarkLogging=benchmarkLogging)
    verboseprint((('\n' + algo) + ' result:'), dump_json(a))
    return a
