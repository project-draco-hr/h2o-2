def random_forest_view(self, data_key=None, model_key=None, timeoutSecs=300, retryDelaySecs=0.2, initialDelaySecs=None, pollTimeoutSecs=180, noise=None, benchmarkLogging=None, print_params=False, noPoll=False, useRFScore=False, **kwargs):
    if beta_features:
        print 'random_forest_view not supported in H2O fvec yet. hacking done response'
        r = {'response': {'status': 'done', }, 'trees': {'number_built': 0, }, }
    algo = ('2/DRFModelView' if beta_features else 'RFView')
    algoScore = ('2/DRFScore2' if beta_features else 'RFScore')
    if beta_features:
        params_dict = {'_modelKey': model_key, }
    else:
        params_dict = {'data_key': data_key, 'model_key': model_key, 'out_of_bag_error_estimate': 1, 'iterative_cm': 0, 'ntree': None, 'class_weights': None, 'response_variable': None, }
    browseAlso = kwargs.pop('browseAlso', False)
    for k in kwargs:
        if (k in params_dict):
            params_dict[k] = kwargs[k]
    if beta_features:
        ntree = 0
    else:
        if (params_dict['ntree'] is None):
            raise Exception(('%s got no %s param: %s . Why? h2o needs?' % (algo, 'ntree', params_dict['ntree'])))
        ntree = params_dict['ntree']
    if print_params:
        print ('\n%s parameters:' % algo), params_dict
        sys.stdout.flush()
    if useRFScore:
        whichUsed = algoScore
    else:
        whichUsed = algo
    a = self.__do_json_request((whichUsed + '.json'), timeout=timeoutSecs, params=params_dict)
    verboseprint(('\n%s result:' % whichUsed), dump_json(a))
    if noPoll:
        return a
    if beta_features:
        rfView = a
    else:
        fake_a = {}
        fake_a['response'] = a['response']
        fake_a['response']['redirect_request'] = (whichUsed + '.json')
        fake_a['response']['redirect_request_args'] = params_dict
        rfView = self.poll_url(fake_a, timeoutSecs=timeoutSecs, retryDelaySecs=retryDelaySecs, initialDelaySecs=initialDelaySecs, pollTimeoutSecs=pollTimeoutSecs, noise=noise, benchmarkLogging=benchmarkLogging, reuseFirstPollUrl=True)
        verboseprint(('%s done:' % whichUsed), dump_json(rfView))
        status = rfView['response']['status']
        if (status != 'done'):
            raise Exception(('Unexpected status: ' + status))
    if beta_features:
        drf_model = rfView['drf_model']
        numberBuilt = drf_model['N']
    else:
        numberBuilt = rfView['trees']['number_built']
        if (numberBuilt != ntree):
            raise Exception(('%s done but number_built!=ntree: %s %s' % (whichUsed, numberBuilt, ntree)))
    errorInResponse = False
    if errorInResponse:
        raise Exception((('\nBad values in %s.json\n' % whichUsed) + ('progress: %s, progressTotal: %s, ntree: %s, numberBuilt: %s, status: %s' % (progress, progressTotal, ntree, numberBuilt, status))))
    if (browseAlso | browse_json):
        h2b.browseJsonHistoryAsUrlLastMatch(whichUsed)
    return rfView
