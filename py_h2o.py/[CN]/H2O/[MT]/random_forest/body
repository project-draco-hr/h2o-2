def random_forest(self, data_key, trees=None, timeoutSecs=300, retryDelaySecs=1.0, initialDelaySecs=None, pollTimeoutSecs=180, noise=None, benchmarkLogging=None, noPoll=False, rfView=True, print_params=True, noPrint=False, **kwargs):
    print 'at top of random_forest, timeoutSec: ', timeoutSecs
    algo = '2/DRF'
    algoView = '2/DRFView'
    params_dict = {'destination_key': None, 'source': data_key, 'response': None, 'balance_classes': 1, 'classification': 1, 'cols': None, 'ignored_cols': None, 'ignored_cols_by_name': None, 'importance': 1, 'max_after_balance_size': 7, 'max_depth': None, 'min_rows': None, 'mtries': None, 'nbins': None, 'ntrees': trees, 'sample_rate': None, 'score_each_iteration': None, 'seed': None, 'validation': None, }
    if ('model_key' in kwargs):
        kwargs['destination_key'] = kwargs['model_key']
    browseAlso = kwargs.pop('browseAlso', False)
    check_params_update_kwargs(params_dict, kwargs, 'random_forest', print_params)
    inspect = h2o_cmd.runInspect(key=data_key)
    params_dict['response'] = str(inspect['cols'][(-1)]['name'])
    if print_params:
        print ('\n%s parameters:' % algo), params_dict
        sys.stdout.flush()
    rf = self.__do_json_request((algo + '.json'), timeout=timeoutSecs, params=params_dict)
    print ('\n%s result:' % algo), dump_json(rf)
    if (noPoll or (not rfView)):
        print 'no rfView:', rfView, 'noPoll', noPoll
        return rf
    time.sleep(5)
    rfView = self.poll_url(rf, timeoutSecs=timeoutSecs, retryDelaySecs=retryDelaySecs, initialDelaySecs=initialDelaySecs, pollTimeoutSecs=pollTimeoutSecs, noise=noise, benchmarkLogging=benchmarkLogging, noPrint=noPrint)
    return rfView
