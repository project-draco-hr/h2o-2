def random_forest(self, data_key, trees, timeoutSecs=300, print_params=True, **kwargs):
    params_dict = {'data_key': data_key, 'ntree': trees, 'model_key': None, 'out_of_bag_error_estimate': 1, 'response_variable': None, 'sample': None, }
    if beta_features:
        params_dict['class_vec'] = kwargs['response_variable']
        if (kwargs['sample'] is None):
            params_dict['sample_rate'] = None
        else:
            params_dict['sample_rate'] = ((kwargs['sample'] + 0.0) / 100)
    browseAlso = kwargs.pop('browseAlso', False)
    params_dict.update(kwargs)
    if print_params:
        print '\nrandom_forest parameters:', params_dict
        sys.stdout.flush()
    a = self.__do_json_request(('DRF2.json' if beta_features else 'RF.json'), timeout=timeoutSecs, params=params_dict)
    verboseprint('\nrandom_forest result:', dump_json(a))
    return a
