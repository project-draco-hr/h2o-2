def poll_url(self, response, timeoutSecs=10, retryDelaySecs=0.5, initialDelaySecs=None):
    url = self.__url(response['redirect_request'])
    args = response['redirect_request_args']
    status = 'poll'
    start = time.time()
    count = 0
    if initialDelaySecs:
        time.sleep(initialDelaySecs)
    while (status == 'poll'):
        time.sleep(retryDelaySecs)
        r = self.__check_request(requests.get(url=url, timeout=15, params=args))
        if ((count % 15) == 0):
            verboseprint('Polling with', url, 'Response:', dump_json(r['response']))
        if ((count % 100) == 0):
            check_sandbox_for_errors()
        status = r['response']['status']
        if ((time.time() - start) > timeoutSecs):
            argsStr = '&'.join([('%s=%s' % (k, v)) for (k, v) in args.items()])
            emsg = ('Timeout: %d secs while polling. status: %s, url: %s?%s' % (timeoutSecs, status, url, argsStr))
            raise Exception(emsg)
        count += 1
    return r
