def check_sandbox_for_errors(sandbox_ignore_errors=False):
    if nodes:
        if nodes[0].fake_cloud:
            print "fake_cloud. So check_sandbox_for_errors didn't check any stdout/stderr from h2o"
            return
    if (not os.path.exists(LOG_DIR)):
        return
    if (nodes and nodes[0].sandbox_error_report()):
        return
    errLines = []
    for filename in os.listdir(LOG_DIR):
        if re.search('stdout|stderr', filename):
            sandFile = open(((LOG_DIR + '/') + filename), 'r')
            regex1 = re.compile('found multiple|exception|error|ERRR|assert|killing|killed|required ports', re.IGNORECASE)
            regex2 = re.compile('Caused', re.IGNORECASE)
            regex3 = re.compile('warn|info|TCP', re.IGNORECASE)
            printing = 0
            lines = 0
            for line in sandFile:
                printSingleWarning = False
                foundBad = False
                if (not (' bytes)' in line)):
                    printSingleWarning = (regex3.search(line) and (not ('[Loaded ' in line)) and (not ('RestS3Service' in line)))
                    printSingleWarning = False
                    foundBad = (regex1.search(line) and (not (('Training Error' in line) or (('Error' in line) and ('Actual' in line)) or ('prediction error' in line) or ('errors on' in line) or ('class.error' in line) or ('error rate' in line) or ('[Loaded ' in line) or ('[WARN]' in line) or ('CalcSquareErrorsTasks' in line))))
                if ((printing == 0) and foundBad):
                    printing = 1
                    lines = 1
                elif (printing == 1):
                    lines += 1
                    foundCaused = regex2.search(line)
                    foundAt = re.match('[\\t ]+at ', line)
                    if (foundBad and (lines > 10) and (not (foundCaused or foundAt))):
                        printing = 2
                if (printing == 1):
                    errLines.append(line)
                    sys.stdout.write(line)
                if printSingleWarning:
                    if (not re.search('Unable to load native-hadoop library for your platform', line)):
                        sys.stdout.write(line)
            sandFile.close()
    sys.stdout.flush()
    if (len(errLines) != 0):
        justInfo = True
        for e in errLines:
            justInfo &= (re.match('INFO:', e) or ('apache' in e))
        if (not justInfo):
            emsg1 = (' check_sandbox_for_errors: Errors in sandbox stdout or stderr (including R stdout/stderr).\n' + 'Could have occurred at any prior time\n\n')
            emsg2 = ''.join(errLines)
            if nodes:
                nodes[0].sandbox_error_report(True)
            if (sandbox_ignore_errors or (nodes and nodes[0].sandbox_ignore_errors)):
                pass
            else:
                raise Exception(((python_test_name + emsg1) + emsg2))
