def build_cloud_with_json(h2o_nodes_json='h2o-nodes.json'):
    log('#*********************************************************************')
    log((('Starting new test: ' + python_test_name) + ' at build_cloud_with_json()'))
    log('#*********************************************************************')
    print 'This only makes sense if h2o is running as defined by', h2o_nodes_json
    print "For now, assuming it's a cloud on this machine, and here's info on h2o processes running here"
    print 'No output means no h2o here! Some other info about stuff on the system is printed first though.'
    import h2o_os_util
    if (not os.path.exists(h2o_nodes_json)):
        raise Exception((("build_cloud_with_json: Can't find " + h2o_nodes_json) + ' file'))
    with open(h2o_nodes_json, 'rb') as f:
        cloneJson = json.load(f)
    if (not ('cloud_start' in cloneJson)):
        raise Exception(("Can't find 'cloud_start' in %s, wrong file? h2o-nodes.json?" % h2o_nodes_json))
    else:
        cs = cloneJson['cloud_start']
        print ("Info on the how the cloud we're cloning was apparently started (info from %s)" % h2o_nodes_json)
        valList = ['time', 'cwd', 'python_test_name', 'python_cmd_line', 'config_json', 'username', 'ip']
        for v in valList:
            if (v not in cs):
                raise Exception(("Can't find %s in %s, wrong file or version change?" % (v, h2o_nodes_json)))
            print ("cloud_start['%s']: %s" % (v, cs[v]))
        build_cloud_rerun_sh = ((LOG_DIR + '/') + 'build_cloud_rerun.sh')
        with open(build_cloud_rerun_sh, 'w') as f:
            f.write('echo << ! > ./temp_for_build_cloud_rerun.sh\n')
            f.write(("echo 'Rebuilding a cloud built with %s at %s by %s on %s in %s'\n" % (cs['python_test_name'], cs['time'], cs['username'], cs['ip'], cs['cwd'])))
            f.write(('cd %s\n' % cs['cwd']))
            if cs['config_json']:
                f.write(('%s -cj %s\n' % (cs['python_cmd_line'], cs['config_json'])))
            else:
                f.write(('%s\n' % cs['python_cmd_line']))
            f.write('!\n')
            f.write(('ssh %s@%s < ./temp_for_build_cloud_rerun.sh\n' % (cs['username'], cs['ip'])))
        t = os.stat(build_cloud_rerun_sh)
        os.chmod(build_cloud_rerun_sh, (t.st_mode | stat.S_IEXEC))
        nodeStateList = cloneJson['h2o_nodes']
    nodeList = []
    for nodeState in nodeStateList:
        print '\nCloning state for node', nodeState['node_id'], 'from', h2o_nodes_json
        newNode = ExternalH2O(nodeState)
        nodeList.append(newNode)
    print ''
    h2p.red_print('Ingested from json:', nodeList[0].java_heap_GB, 'GB java heap(s) with', len(nodeList), 'total nodes')
    print ''
    nodes[:] = nodeList
    return nodeList
