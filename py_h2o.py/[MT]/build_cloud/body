def build_cloud(node_count=2, base_port=54321, hosts=None, timeoutSecs=30, retryDelaySecs=1, cleanup=True, rand_shuffle=True, conservative=False, create_json=False, clone_cloud=None, **kwargs):
    if (not disable_time_stamp):
        sys.stdout = OutWrapper(sys.stdout)
    if (clone_cloud_json or clone_cloud):
        nodeList = build_cloud_with_json(h2o_nodes_json=(clone_cloud_json if clone_cloud_json else clone_cloud))
        return nodeList
    clean_sandbox()
    log('#*********************************************************************')
    log((('Starting new test: ' + python_test_name) + ' at build_cloud()'))
    log('#*********************************************************************')
    check_h2o_version()
    if kwargs.setdefault('enable_benchmark_log', False):
        setup_benchmark_log()
    ports_per_node = 2
    nodeList = []
    try:
        totalNodes = 0
        portList = [(base_port + (ports_per_node * i)) for i in range(node_count)]
        if (hosts is None):
            write_flatfile(node_count=node_count, base_port=base_port)
            hostCount = 1
            if rand_shuffle:
                random.shuffle(portList)
            for p in portList:
                verboseprint('psutil starting node', i)
                newNode = LocalH2O(port=p, node_id=totalNodes, **kwargs)
                nodeList.append(newNode)
                totalNodes += 1
        else:
            hostCount = len(hosts)
            hostPortList = []
            for h in hosts:
                for port in portList:
                    hostPortList.append((h, port))
            if rand_shuffle:
                random.shuffle(hostPortList)
            for (h, p) in hostPortList:
                verboseprint('ssh starting node', totalNodes, 'via', h)
                newNode = h.remote_h2o(port=p, node_id=totalNodes, **kwargs)
                nodeList.append(newNode)
                totalNodes += 1
        verboseprint('Attempting Cloud stabilize of', totalNodes, 'nodes on', hostCount, 'hosts')
        start = time.time()
        stabilize_cloud(nodeList[0], len(nodeList), timeoutSecs=timeoutSecs, retryDelaySecs=retryDelaySecs, noExtraErrorCheck=True)
        verboseprint(len(nodeList), 'Last added node stabilized in ', (time.time() - start), ' secs')
        verboseprint(('Built cloud: %d nodes on %d hosts, in %d s' % (len(nodeList), hostCount, (time.time() - start))))
        if conservative:
            for n in nodeList:
                stabilize_cloud(n, len(nodeList), timeoutSecs=timeoutSecs, noExtraErrorCheck=True)
        else:
            pass
        check_sandbox_for_errors()
    except:
        if cleanup:
            for n in nodeList:
                n.terminate()
        else:
            nodes[:] = nodeList
        check_sandbox_for_errors()
        raise
    nodes[:] = nodeList
    print len(nodeList), 'total jvms in H2O cloud'
    if config_json:
        print 'Saving the ', config_json, 'we used to', LOG_DIR
        shutil.copy(config_json, ((LOG_DIR + '/') + os.path.basename(config_json)))
    cs_time = str(datetime.datetime.now())
    cs_cwd = os.getcwd()
    cs_python_cmd_line = ('python %s %s' % (python_test_name, python_cmd_args))
    cs_python_test_name = python_test_name
    if config_json:
        cs_config_json = os.path.abspath(config_json)
    else:
        cs_config_json = None
    cs_username = python_username
    cs_ip = python_cmd_ip
    print 'Writing the test_rerun.sh in', LOG_DIR
    test_rerun_sh = ((LOG_DIR + '/') + 'test_rerun.sh')
    with open(test_rerun_sh, 'w') as f:
        f.write('echo << ! > ./temp_for_test_rerun.sh\n')
        f.write(("echo 'rerunning %s that originally ran at %s by %s on %s in %s'\n" % (cs_python_test_name, cs_time, cs_username, cs_ip, cs_cwd)))
        f.write(('cd %s\n' % cs_cwd))
        if cs_config_json:
            f.write(('%s -cj %s\n' % (cs_python_cmd_line, cs_config_json)))
        else:
            f.write(('%s\n' % cs_python_cmd_line))
        f.write('!\n')
        f.write(('ssh %s@%s < temp_for_test_rerun.sh\n' % (cs_username, cs_ip)))
    t = os.stat(test_rerun_sh)
    os.chmod(test_rerun_sh, (t.st_mode | stat.S_IEXEC))
    if create_json:
        q = {'cloud_start': {'time': cs_time, 'cwd': cs_cwd, 'python_test_name': cs_python_test_name, 'python_cmd_line': cs_python_cmd_line, 'config_json': cs_config_json, 'username': cs_username, 'ip': cs_ip, }, 'h2o_nodes': h2o_util.json_repr(nodes), }
        with open('h2o-nodes.json', 'w+') as f:
            f.write(json.dumps(q, indent=4))
    return nodeList
