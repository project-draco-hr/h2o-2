def build_cloud(node_count=2, base_port=54321, hosts=None, timeoutSecs=20, retryDelaySecs=0.5, cleanup=True, **kwargs):
    clean_sandbox()
    ports_per_node = 2
    node_list = []
    try:
        totalNodes = 0
        if (hosts is None):
            write_flatfile(node_count=node_count, base_port=base_port)
            hostCount = 1
            for i in xrange(node_count):
                verboseprint('psutil starting node', i)
                newNode = LocalH2O(port=(base_port + (i * ports_per_node)), node_id=totalNodes, **kwargs)
                node_list.append(newNode)
                totalNodes += 1
        else:
            hostCount = len(hosts)
            for h in hosts:
                for i in xrange(node_count):
                    verboseprint('ssh starting node', i, 'via', h)
                    newNode = h.remote_h2o(port=(base_port + (i * ports_per_node)), node_id=totalNodes, **kwargs)
                    node_list.append(newNode)
                    totalNodes += 1
        verboseprint('Attempting Cloud stabilize of', totalNodes, 'nodes on', hostCount, 'hosts')
        start = time.time()
        stabilize_cloud(node_list[(-1)], len(node_list), timeoutSecs=timeoutSecs, retryDelaySecs=retryDelaySecs)
        verboseprint(len(node_list), 'Last added node stabilized in ', (time.time() - start), ' secs')
        verboseprint(('Built cloud: %d node_list, %d hosts, in %d s' % (len(node_list), hostCount, (time.time() - start))))
        for n in node_list:
            stabilize_cloud(n, len(node_list), timeoutSecs=timeoutSecs)
    except:
        if cleanup:
            for n in node_list:
                n.terminate()
        else:
            nodes[:] = node_list
        check_sandbox_for_errors()
        raise
    nodes[:] = node_list
    return node_list
