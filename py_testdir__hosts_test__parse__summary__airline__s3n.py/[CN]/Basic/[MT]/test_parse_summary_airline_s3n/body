def test_parse_summary_airline_s3n(self):
    URI = 's3n://h2o-airlines-unpacked/'
    csvFilelist = [('allyears2k.csv', 300), ('year1987.csv', 600), ('allyears.csv', 900)]
    importHDFSResult = h2o.nodes[0].import_hdfs(URI)
    s3nFullList = importHDFSResult['succeeded']
    self.assertGreater(len(s3nFullList), 8, 'Should see more than 8 files in s3n?')
    if (1 == 0):
        print '\nTrying StoreView after the import hdfs'
        h2o_cmd.runStoreView(timeoutSecs=120)
    trial = 0
    for (csvFilename, timeoutSecs) in csvFilelist:
        trialStart = time.time()
        csvPathname = csvFilename
        s3nKey = (URI + csvPathname)
        key2 = (((csvFilename + '_') + str(trial)) + '.hex')
        print 'Loading s3n key: ', s3nKey, 'thru HDFS'
        start = time.time()
        parseResult = h2o.nodes[0].parse(s3nKey, key2, timeoutSecs=timeoutSecs, retryDelaySecs=10, pollTimeoutSecs=120)
        elapsed = (time.time() - start)
        print 'parse end on ', s3nKey, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseResult['destination_key']
        start = time.time()
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], timeoutSecs=360)
        print 'Inspect:', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
        h2o_cmd.infoFromInspect(inspect, csvPathname)
        goodX = h2o_glm.goodXFromColumnInfo(y='IsArrDelayed', key=parseResult['destination_key'], timeoutSecs=300)
        summaryResult = h2o_cmd.runSummary(key=key2, timeoutSecs=360)
        h2o_cmd.infoFromSummary(summaryResult)
        if (1 == 0):
            print '\nTrying StoreView after the parse'
            h2o_cmd.runStoreView(timeoutSecs=120)
        print 'Trial #', trial, 'completed in', (time.time() - trialStart), 'seconds.'
        trial += 1
