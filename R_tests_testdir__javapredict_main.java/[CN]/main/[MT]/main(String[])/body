{
  parseArgs(args);
  water.genmodel.GeneratedModel model;
  model=(water.genmodel.GeneratedModel)Class.forName(modelClassName).newInstance();
  BufferedReader input=new BufferedReader(new FileReader(inputCSVFileName));
  BufferedWriter output=new BufferedWriter(new FileWriter(outputCSVFileName));
  output.write("predict");
  for (int i=0; i < model.getNumResponseClasses(); i++) {
    output.write(",");
    output.write(model.getDomainValues(model.getResponseIdx())[i]);
  }
  output.write("\n");
  int lineno=0;
  String line=input.readLine();
  while (line != null) {
    lineno++;
    if (skipFirstLine > 0) {
      skipFirstLine=0;
      line=input.readLine();
    }
    String trimmedLine=line.trim();
    String[] inputColumnsArray=trimmedLine.split(",");
    int numInputColumns=model.getNames().length;
    if (inputColumnsArray.length != numInputColumns) {
      System.out.println("WARNING: Line " + lineno + " has "+ inputColumnsArray.length+ " columns (expected "+ numInputColumns+ ")");
    }
    double[] row=new double[inputColumnsArray.length];
    for (int i=0; i < inputColumnsArray.length; i++) {
      String[] domainValues=model.getDomainValues(i);
      if (domainValues != null) {
        System.out.println("ERROR: Unimplemented");
        System.exit(1);
      }
      double value=Double.parseDouble(inputColumnsArray[i]);
      row[i]=value;
    }
    float[] preds=new float[model.getNumResponseClasses() + 1];
    model.predict(row,preds);
    for (int i=0; i < preds.length; i++) {
      if (i == 0) {
        String[] domainValues=model.getDomainValues(model.getResponseIdx());
        if (domainValues != null) {
          double value=preds[i];
          int valueAsInt=(int)value;
          if (value != (int)valueAsInt) {
            System.out.println("ERROR: Line " + lineno + " has non-integer output for classification ("+ value+ ")");
            System.exit(1);
          }
          String predictedOutputClassLevel=domainValues[valueAsInt];
          output.write(predictedOutputClassLevel);
        }
 else {
          output.write(Double.toString(preds[i]));
        }
      }
 else {
        output.write(",");
        output.write(Double.toString(preds[i]));
      }
    }
    output.write("\n");
    line=input.readLine();
  }
  output.close();
  input.close();
  System.exit(0);
}
