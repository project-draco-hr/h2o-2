def test_summary2_percentile(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(100000, 1, 'cD', 300), (100000, 2, 'cE', 300)]
    timeoutSecs = 10
    trial = 1
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        print 'Trial:', trial
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + 'binary') + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print 'Creating random', csvPathname
        legalValues = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
        expectedMin = min(legalValues)
        expectedMax = max(legalValues)
        expectedUnique = ((expectedMax - expectedMin) + 1)
        mode = 0.5
        expectedMean = 0.5
        expectedSigma = 0.5
        write_syn_dataset(csvPathname, rowCount, colCount, low=expectedMin, high=expectedMax, mode=mode, SEED=SEEDPERFILE)
        csvPathnameFull = h2i.find_folder_and_filename('.', csvPathname, returnFullPath=True)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=10, doSummary=False)
        print "Parse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvFilename)
        summaryResult = h2o_cmd.runSummary(key=hex_key)
        if h2o.verbose:
            print 'summaryResult:', h2o.dump_json(summaryResult)
        summaries = summaryResult['summaries']
        scipyCol = 0
        for column in summaries:
            colname = column['colname']
            coltype = column['type']
            nacnt = column['nacnt']
            stats = column['stats']
            stattype = stats['type']
            mean = stats['mean']
            sd = stats['sd']
            zeros = stats['zeros']
            mins = stats['mins']
            maxs = stats['maxs']
            pct = stats['pct']
            pctile = stats['pctile']
            hstart = column['hstart']
            hstep = column['hstep']
            hbrk = column['hbrk']
            hcnt = column['hcnt']
            for b in hbrk:
                self.assertIn(int(b), legalValues)
            self.assertEqual(len(hbrk), len(legalValues))
            print 'pctile:', pctile
            print 'maxs:', maxs
            self.assertAlmostEqual(maxs[0], expectedMax, delta=0.01)
            print 'mins:', mins
            self.assertAlmostEqual(mins[0], expectedMin, delta=0.01)
            for v in pctile:
                self.assertTrue((v >= expectedMin), ('Percentile value %s should all be >= the min dataset value %s' % (v, expectedMin)))
                self.assertTrue((v <= expectedMax), ('Percentile value %s should all be <= the max dataset value %s' % (v, expectedMax)))
            eV1 = [1.0, 1.0, 1.0, 3.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 10.0]
            if (expectedMin == 1):
                eV = eV1
            elif (expectedMin == 0):
                eV = [(e - 1) for e in eV1]
            elif (expectedMin == 2):
                eV = [(e + 1) for e in eV1]
            else:
                raise Exception(("Test doesn't have the expected percentileValues for expectedMin: %s" % expectedMin))
            if (colname != ''):
                h2o_summ.quantile_comparisons(csvPathnameFull, skipHeader=True, col=scipyCol, datatype='float', quantile=(0.5 if DO_MEDIAN else 0.999), h2oSummary2=pctile[(5 if DO_MEDIAN else 10)])
            scipyCol += 1
