def test_parse_bounds_libsvm(self):
    print 'Empty rows except for the last, with all zeros for class. Single col at max'
    h2b.browseTheCloud()
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(100, 100, 'cA', 300), (100000, 100, 'cB', 300), (100, 10000, 'cC', 300)]
    for (rowCount, colCount, key2, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = ('syn_%s_%s_%s.csv' % (SEEDPERFILE, rowCount, colCount))
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print 'Creating random', csvPathname
        (colNumberMax, synColSumDict) = write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        parseResult = h2o_cmd.parseFile(None, csvPathname, key2=key2, timeoutSecs=timeoutSecs, doSummary=False)
        print "Parse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], max_column_display=(colNumberMax + 1), timeoutSecs=timeoutSecs)
        num_cols = inspect['num_cols']
        num_rows = inspect['num_rows']
        self.assertEqual((colNumberMax + 1), num_cols, msg=('generated %s cols (including output).  parsed to %s cols' % ((colNumberMax + 1), num_cols)))
        self.assertEqual(rowCount, num_rows, msg=('generated %s rows, parsed to %s rows' % (rowCount, num_rows)))
        for x in range(num_cols):
            print ('Doing summary with x=%s' % x)
            summaryResult = h2o_cmd.runSummary(key=key2, x=x, timeoutSecs=timeoutSecs)
            if (x == 0):
                colName = 'Target'
            else:
                colName = ('V' + str(x))
            print ('Doing summary with col name x=%s' % colName)
            summaryResult = h2o_cmd.runSummary(key=key2, x=x, timeoutSecs=timeoutSecs)
        print ('Doing and checking summary with no x=%s' % x)
        summaryResult = h2o_cmd.runSummary(key=key2, max_column_display=(colNumberMax + 1), timeoutSecs=timeoutSecs)
        h2o_cmd.infoFromSummary(summaryResult, noPrint=True)
        summary = summaryResult['summary']
        columnsList = summary['columns']
        self.assertEqual((colNumberMax + 1), len(columnsList), msg=('generated %s cols (including output).  summary has %s columns' % ((colNumberMax + 1), len(columnsList))))
        for columns in columnsList:
            N = columns['N']
            name = columns['name']
            stype = columns['type']
            histogram = columns['histogram']
            bin_size = histogram['bin_size']
            bin_names = histogram['bin_names']
            bins = histogram['bins']
            nbins = histogram['bins']
            zeros = columns['zeros']
            na = columns['na']
            smax = columns['max']
            smin = columns['min']
            mean = columns['mean']
            sigma = columns['sigma']
            if (name == ('V' + str(colNumberMax))):
                synMean = (1.0 / num_rows)
                synMin = [0.0, 1.0]
                synMax = [1.0, 0.0]
            else:
                synMean = 0.0
                synMin = [0.0]
                synMax = [0.0]
            self.assertEqual(float(mean), synMean, msg=('col %s mean %s is not equal to generated mean %s' % (name, mean, 0)))
            self.assertEqual(smin, synMin, msg=('col %s min %s is not equal to generated min %s' % (name, smin, synMin)))
            self.assertEqual(smax, synMax, msg=('col %s max %s is not equal to generated max %s' % (name, smax, synMax)))
            self.assertEqual(0, na, msg=('col %s num_missing_values %d should be 0' % (name, na)))
