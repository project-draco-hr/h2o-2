def test_GLM_mnist(self):
    importFolderPath = '/home/0xdiag/datasets/mnist'
    csvFilelist = [('mnist_training.csv.gz', 'mnist_testing.csv.gz', 600)]
    importFolderResult = h2i.setupImportFolder(None, importFolderPath)
    succeededList = importFolderResult['files']
    self.assertGreater(len(succeededList), 1, 'Should see more than 1 files in the import?')
    print '\nTrying StoreView after the import folder'
    h2o_cmd.runStoreView(timeoutSecs=30)
    trial = 0
    for (trainCsvFilename, testCsvFilename, timeoutSecs) in csvFilelist:
        trialStart = time.time()
        testKey2 = (((testCsvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        parseKey = h2i.parseImportFolderFile(None, testCsvFilename, importFolderPath, key2=testKey2, timeoutSecs=timeoutSecs)
        elapsed = (time.time() - start)
        print 'parse end on ', testCsvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseKey['destination_key']
        print "We won't use this pruning of x on test data. See if it prunes the same as the training"
        y = 0
        print 'y:'
        x = h2o_glm.goodXFromColumnInfo(y, key=parseKey['destination_key'], timeoutSecs=300)
        trainKey2 = (((trainCsvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        parseKey = h2i.parseImportFolderFile(None, trainCsvFilename, importFolderPath, key2=trainKey2, timeoutSecs=timeoutSecs)
        elapsed = (time.time() - start)
        print 'parse end on ', trainCsvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseKey['destination_key']
        print "This is the 'ignore=' we'll use"
        ignore_x = h2o_glm.goodXFromColumnInfo(y, key=parseKey['destination_key'], timeoutSecs=300, forRF=True)
        print 'ignore_x:', ignore_x
        params = {'ignore': ignore_x, 'response_variable': y, }
        kwargs = params.copy()
        print 'Trying rf'
        timeoutSecs = 1800
        start = time.time()
        rf = h2o_cmd.runRFOnly(parseKey=parseKey, timeoutSecs=timeoutSecs, pollTimeoutsecs=60, **kwargs)
        elapsed = (time.time() - start)
        print 'RF completed in', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        h2o_rf.simpleCheckRF(self, rf, None, noPrint=True, **kwargs)
        modelKey = rf['model_key']
        start = time.time()
        rfView = h2o_cmd.runRFView(key=testKey2, model_key=modelKey, thresholds='0.5', timeoutSecs=60, noSimpleCheck=True)
        elapsed = (time.time() - start)
        print 'RFView in', elapsed, 'secs', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        h2o_rf.simpleCheckRF(self, rfView, **kwargs)
