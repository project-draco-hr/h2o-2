def test_parse_multi_header_single(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    csvFilename = 'syn_ints.csv'
    csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
    headerData = 'ID,CAPSULE,AGE,RACE,DPROS,DCAPS,PSA,VOL,GLEASON,output'
    tryList = [(57, 300, 9, 'cA', 60, 0), (57, 300, 9, 'cB', 60, 1), (57, 300, 9, 'cC', 60, 2), (57, 300, 9, 'cD', 60, 3)]
    trial = 0
    for (fileNum, rowCount, colCount, key2, timeoutSecs, dataRowsWithHeader) in tryList:
        trial += 1
        print 'Wait while', fileNum, 'synthetic files are created in', SYNDATASETS_DIR
        rowxcol = ((str(rowCount) + 'x') + str(colCount))
        totalCols = (colCount + 1)
        totalDataRows = 0
        for fileN in range(fileNum):
            csvFilename = (((((('syn_' + str(fileN)) + '_') + str(SEED)) + '_') + rowxcol) + '.csv')
            csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
            rList = rand_rowData(colCount)
            dataRowsDone = write_syn_dataset(csvPathname, rowCount, headerData=None, rList=rList)
            totalDataRows += dataRowsDone
        if HEADER:
            csvFilename = (((('syn_header_' + str(SEED)) + '_') + rowxcol) + '.csv')
            csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
            dataRowsDone = write_syn_dataset(csvPathname, dataRowsWithHeader, headerData, rList)
            totalDataRows += dataRowsDone
        key = ('syn_' + str(trial))
        key2 = (('syn_' + str(trial)) + '.hex')
        xs = h2o.nodes[0].import_files(SYNDATASETS_DIR)['keys']
        header = [x for x in xs if ('header' in x)][0]
        print ('Header Key = ' + header)
        start = time.time()
        parseResult = h2o.nodes[0].parse((('*' + rowxcol) + '*'), key2=key2, timeoutSecs=timeoutSecs, header='1', header_from_file=header)
        print ("parseResult['destination_key']: " + parseKey['destination_key'])
        print 'parse time:', parseResult['response']['time']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        h2o_cmd.infoFromInspect(inspect, csvPathname)
        print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
        self.assertEqual(inspect['num_cols'], totalCols, ('parse created result with the wrong number of cols %s %s' % (inspect['num_cols'], totalCols)))
        self.assertEqual(inspect['num_rows'], totalDataRows, ("parse created result with the wrong number of rows (header shouldn't count) %s %s" % (inspect['num_rows'], totalDataRows)))
        if HEADER:
            kwargs = {'sample': 75, 'depth': 25, 'ntree': 1, 'ignore': 'ID,CAPSULE', }
        else:
            kwargs = {'sample': 75, 'depth': 25, 'ntree': 1, }
        start = time.time()
        rfv = h2o_cmd.runRFOnly(parseResult=parseKey, timeoutSecs=timeoutSecs, **kwargs)
        elapsed = (time.time() - start)
        print ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
        print 'trial #', trial, 'totalDataRows:', totalDataRows, 'parse end on ', csvFilename, 'took', (time.time() - start), 'seconds'
        h2o.check_sandbox_for_errors()
