def test_rf_libsvm_fvec(self):
    csvFilenameList = [('gisette_scale.svm', 'cF', 30, 1, 0), ('covtype.binary.svm', 'cC', 30, 1, 1), ('mnist_train.svm', 'cM', 30, 1, 1), ('connect4.svm', 'cB', 30, 1, 1), ('syn_0_100_1000.svm', 'cL', 30, 1, 0), ('mushrooms.svm', 'cG', 30, 1, 1)]
    lenNodes = len(h2o.nodes)
    firstDone = False
    for (csvFilename, hex_key, timeoutSecs, resultMult, classification) in csvFilenameList:
        bucket = 'home-0xdiag-datasets'
        csvPathname = ('libsvm/' + csvFilename)
        parseResult = h2i.import_parse(bucket=bucket, path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=2000)
        print "Parse result['destination_key']:", parseResult['destination_key']
        start = time.time()
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], timeoutSecs=360)
        print 'Inspect:', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
        h2o_cmd.infoFromInspect(inspect, csvFilename)
        kwargs = {'ntrees': 1, 'response': 0, 'classification': classification, 'importance': 0, }
        timeoutSecs = 600
        start = time.time()
        rf = h2o_cmd.runRF(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
        elapsed = (time.time() - start)
        print 'rf end on ', csvPathname, 'took', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
