{
  RPC.RPCCall rpc=_work.get(task);
  if (rpc == null)   return;
  DTask dt=rpc._dt;
  if (dt != null && RPC.RPCCall.CAS_DT.compareAndSet(rpc,dt,null)) {
    AckAckTimeOutThread.PENDING.remove(rpc);
    dt.onAckAck();
  }
  while (true) {
    int t=_removed_task_ids.get();
    RPC.RPCCall rpc2=_work.get(t + 1);
    if (rpc2 == null || rpc2._dt != null || !_removed_task_ids.compareAndSet(t,t + 1))     break;
    _work.remove(t + 1);
  }
}
