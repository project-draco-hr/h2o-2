def doGBM(fs, folderPath, ignored_cols, classification, testFilehex, ntrees, depth, minrows, nbins, learnRate, response, row):
    benchmarkLogging = ['cpu', 'disk', 'network', 'iostats']
    benchmarkLogging = None
    date = '-'.join([str(x) for x in list(time.localtime())][0:3])
    for f in fs['train']:
        overallWallStart = time.time()
        date = '-'.join([str(x) for x in list(time.localtime())][0:3])
        gbmbenchcsv = (((('benchmarks/' + build) + '/') + date) + '/gbmbench.csv')
        if (not os.path.exists(gbmbenchcsv)):
            output = open(gbmbenchcsv, 'w')
            output.write((','.join(csv_header) + '\n'))
        else:
            output = open(gbmbenchcsv, 'a')
        csvWrt = csv.DictWriter(output, fieldnames=csv_header, restval=None, dialect='excel', extrasaction='ignore', delimiter=',')
        try:
            java_heap_GB = h2o.nodes[0].java_heap_GB
            importFolderPath = ('bench/' + folderPath)
            if (f in ['AirlinesTrain1x', 'AllBedroomsTrain1x', 'AllBedroomsTrain10x', 'AllBedroomsTrain100x', 'CovTypeTrain1x', 'CovTypeTrain10x', 'CovTypeTrain100x']):
                csvPathname = (((importFolderPath + '/') + f) + '.csv')
            else:
                csvPathname = (((importFolderPath + '/') + f) + '/*linked*')
            hex_key = (f + '.hex')
            hK = (folderPath + 'Header.csv')
            headerPathname = ((importFolderPath + '/') + hK)
            h2i.import_only(bucket='home-0xdiag-datasets', path=headerPathname)
            headerKey = h2i.find_key(hK)
            trainParseWallStart = time.time()
            parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, schema='local', hex_key=hex_key, header=1, header_from_file=headerKey, separator=44, timeoutSecs=4800, retryDelaySecs=5, pollTimeoutSecs=4800, benchmarkLogging=benchmarkLogging)
            parseWallTime = (time.time() - trainParseWallStart)
            print 'Parsing training file took ', parseWallTime, ' seconds.'
            inspect_train = h2o.nodes[0].inspect(parseResult['destination_key'])
            inspect_test = h2o.nodes[0].inspect(testFilehex)
            nMachines = (1 if (len(h2o_hosts.hosts) is 0) else len(h2o_hosts.hosts))
            row.update({'h2o_build': build, 'nMachines': nMachines, 'nJVMs': len(h2o.nodes), 'Xmx/JVM': java_heap_GB, 'dataset': f, 'nTrainRows': inspect_train['num_rows'], 'nTestRows': inspect_test['num_rows'], 'nCols': inspect_train['num_cols'], 'trainParseWallTime': parseWallTime, 'classification': classification, })
            params = {'destination_key': (('GBM(' + f) + ')'), 'response': response, 'ignored_cols_by_name': ignored_cols, 'classification': classification, 'validation': testFilehex, 'ntrees': ntrees, 'max_depth': depth, 'min_rows': minrows, 'nbins': nbins, 'learn_rate': learnRate, }
            kwargs = params.copy()
            gbmStart = time.time()
            h2o.beta_features = True
            gbm = h2o_cmd.runGBM(parseResult=parseResult, noPoll=True, timeoutSecs=4800, **kwargs)
            h2o_jobs.pollWaitJobs(timeoutSecs=7200, pollTimeoutSecs=120, retryDelaySecs=5)
            h2o.beta_features = False
            gbmTime = (time.time() - gbmStart)
            row.update({'gbmBuildTime': gbmTime, })
        finally:
            output.close()
