def gen_binomial_from_eqn_and_data(coefficients, intercept, rowData, flip=False):
    cx = [(a * b) for (a, b) in zip(coefficients, rowData)]
    y = (1 / (1 + math.exp((- (sum(cx) + intercept)))))
    if ((y < 0) or (y > 1)):
        raise Exception(('Generated y result is should be between 0 and 1: ' + y))
    if (y >= 0.5):
        result = 1
    else:
        result = 0
    if flip:
        result = ((result + 1) % 2)
    return (result, y)
