def GLM_syn_eqns_data(self, ALGO='binomial', DATA_VALUE_MIN=(-1), DATA_VALUE_MAX=1, COEFF_VALUE_MIN=(-1), COEFF_VALUE_MAX=1, INTCPT_VALUE_MIN=(-1), INTCPT_VALUE_MAX=1, DATA_DISTS='unique_pos_neg'):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    if (ALGO == 'poisson'):
        tryList = [(50000, 5, 'cD', 300)]
    else:
        tryList = [(500, 30, 'cD', 300), (500, 30, 'cD', 300)]
    lenNodes = len(h2o.nodes)
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        modeString = ((((((((((((((('_Bins' + str(BINS)) + '_Dmin') + str(DATA_VALUE_MIN)) + '_Dmax') + str(DATA_VALUE_MAX)) + '_Cmin') + str(COEFF_VALUE_MIN)) + '_Cmax') + str(COEFF_VALUE_MAX)) + '_Imin') + str(INTCPT_VALUE_MIN)) + '_Imax') + str(INTCPT_VALUE_MAX)) + '_Ddist') + str(DATA_DISTS))
        print 'modeString:', modeString
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((((('syn_' + modeString) + '_') + str(SEEDPERFILE)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print 'Creating random', csvPathname, 'using random coefficients and intercept and logit eqn. for output'
        (coefficientsGen, interceptGen) = gen_rand_equation(colCount, INTCPT_VALUE_MIN, INTCPT_VALUE_MAX, COEFF_VALUE_MIN, COEFF_VALUE_MAX, SEEDPERFILE)
        print coefficientsGen, interceptGen
        write_syn_dataset(csvPathname, rowCount, colCount, coefficientsGen, interceptGen, DATA_VALUE_MIN, DATA_VALUE_MAX, DATA_DISTS, ALGO, SEED)
        parseResult = h2i.import_parse(path=csvPathname, hex_key=hex_key, schema='put', timeoutSecs=60)
        print "Parse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvFilename)
        y = colCount
        print "GLM is ignoring the thresholds I give it? deciding what's best?"
        kwargs = {'family': ALGO, 'response': y, 'max_iter': 10, 'lambda': 0, 'alpha': 0, 'n_folds': 0, 'beta_epsilon': 0.0001, }
        start = time.time()
        glm = h2o_cmd.runGLM(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
        (warnings, coefficients, intercept) = h2o_glm.simpleCheckGLM(self, glm, 'C1', **kwargs)
        print 'glm end on ', csvPathname, 'took', (time.time() - start), 'seconds'
        if (ALGO == 'binomial'):
            deltaCoeff = 0.1
            deltaIntcpt = 0.2
        else:
            deltaCoeff = 0.4
            deltaIntcpt = 1.0
        for (i, c) in enumerate(coefficients):
            g = coefficientsGen[i]
            print ('coefficient[%d]: %8.4f,    generated: %8.4f,    delta: %8.4f' % (i, c, g, abs((g - c))))
            self.assertAlmostEqual(c, g, delta=deltaCoeff, msg=('not close enough. coefficient[%d]: %s,    generated %s' % (i, c, g)))
        c = intercept
        g = interceptGen
        print ('intercept: %8.4f,    generated: %8.4f,    delta: %8.4f' % (c, g, abs((g - c))))
        print 'need a larger delta compare for intercept?'
        self.assertAlmostEqual(c, g, delta=deltaIntcpt, msg=('not close enough. intercept: %s,    generated %s' % (c, g)))
