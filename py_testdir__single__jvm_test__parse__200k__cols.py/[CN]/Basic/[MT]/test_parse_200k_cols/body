def test_parse_200k_cols(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(10, 100000, 'cA', 200, 200), (10, 200000, 'cB', 200, 200), (10, 300000, 'cB', 200, 200), (10, 1000000, 'cD', 200, 360)]
    for (rowCount, colCount, hex_key, timeoutSecs, timeoutSecs2) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + str(SEEDPERFILE)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print '\nCreating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        start = time.time()
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=timeoutSecs, doSummary=False)
        print csvFilename, 'parse time:', parseResult['response']['time']
        print 'Parse:', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
        start = time.time()
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], timeoutSecs=timeoutSecs2)
        print 'Inspect:', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
        h2o_cmd.infoFromInspect(inspect, csvPathname)
        print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
        self.assertEqual(inspect['num_cols'], colCount, ('parse created result with the wrong number of cols %s %s' % (inspect['num_cols'], colCount)))
        self.assertEqual(inspect['num_rows'], rowCount, ("parse created result with the wrong number of rows (header shouldn't count) %s %s" % (inspect['num_rows'], rowCount)))
