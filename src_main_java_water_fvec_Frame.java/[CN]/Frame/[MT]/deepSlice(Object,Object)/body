{
  if (ocols != null && !(ocols instanceof long[]))   throw H2O.unimpl();
  long[] cols=(long[])ocols;
  int c2[]=null;
  if (cols == null) {
    c2=new int[numCols()];
    for (int i=0; i < c2.length; i++)     c2[i]=i;
  }
 else   if (cols.length == 0) {
    c2=new int[0];
  }
 else   if (cols[0] > 0) {
    c2=new int[cols.length];
    for (int i=0; i < cols.length; i++)     c2[i]=(int)cols[i] - 1;
  }
 else {
    c2=new int[numCols() - cols.length];
    int j=0;
    for (int i=0; i < numCols(); i++) {
      if (j >= cols.length || i < (-cols[j] - 1))       c2[i - j]=i;
 else       j++;
    }
  }
  if (orows == null || orows instanceof long[]) {
    long rows[]=(long[])orows;
    return new DeepSlice(rows,c2).doAll(c2.length,this).outputFrame(names(c2),domains(c2));
  }
  Vec vrows=(Vec)orows;
  Vec[] vecs=new Vec[c2.length + 1];
  String[] names=new String[c2.length + 1];
  for (int i=0; i < c2.length; ++i) {
    vecs[i]=_vecs[c2[i]];
    names[i]=_names[c2[i]];
  }
  vecs[c2.length]=vrows;
  names[c2.length]="predicate";
  return new DeepSelect().doAll(c2.length,new Frame(names,vecs)).outputFrame(names(c2),domains(c2));
}
