{
  if (_vecs != null)   return _vecs;
  final Vec[] vecs=new Vec[_keys.length];
  Futures fs=new Futures();
  for (int i=0; i < _keys.length; i++) {
    final int ii=i;
    final Key k=_keys[i];
    H2OCountedCompleter t;
    H2O.submitTask(t=new H2OCountedCompleter(){
      @Override public void compute2(){
        vecs[ii]=DKV.get(k).get();
        tryComplete();
      }
    }
);
    fs.add(t);
  }
  fs.blockForPending();
  return _vecs=vecs;
}
