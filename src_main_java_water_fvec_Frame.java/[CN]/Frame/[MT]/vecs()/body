{
  Vec[] tvecs=_vecs;
  if (tvecs != null)   return tvecs;
  final Vec[] vecs=new Vec[_keys.length];
  Futures fs=new Futures();
  for (int i=0; i < _keys.length; i++) {
    final int ii=i;
    final Key k=_keys[i];
    H2OCountedCompleter t=new H2OCountedCompleter(){
      @Override public byte priority(){
        return H2O.MIN_HI_PRIORITY;
      }
      @Override public void compute2(){
        Value v=DKV.get(k);
        if (v == null)         System.err.println("Missing vector during Frame fetch: " + k);
        vecs[ii]=v.get();
        tryComplete();
      }
    }
;
    H2O.submitTask(t);
    fs.add(t);
  }
  fs.blockForPending();
  return _vecs=vecs;
}
