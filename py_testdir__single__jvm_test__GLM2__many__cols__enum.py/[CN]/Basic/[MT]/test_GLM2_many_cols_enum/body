def test_GLM2_many_cols_enum(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    translateList = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u']
    if (getpass.getuser() == 'kevin'):
        tryList = [(10000, 100, 'cA', 100), (10000, 300, 'cB', 300), (10000, 500, 'cC', 700), (10000, 700, 'cD', 3600), (10000, 900, 'cE', 3600), (10000, 1000, 'cF', 3600), (10000, 1300, 'cG', 3600), (10000, 1700, 'cH', 3600), (10000, 2000, 'cI', 3600), (10000, 2500, 'cJ', 3600), (10000, 3000, 'cK', 3600)]
    else:
        tryList = [(10000, 100, 'cA', 100), (10000, 300, 'cC', 300)]
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + str(SEEDPERFILE)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print '\nCreating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE, translateList)
        start = time.time()
        parseResult = h2i.import_parse(path=csvPathname, hex_key=hex_key, schema='put', timeoutSecs=30)
        elapsed = (time.time() - start)
        print "Parse result['destination_key']:", parseResult['destination_key']
        algo = 'Parse'
        l = '{:d} jvms, {:d}GB heap, {:s} {:s} {:6.2f} secs'.format(len(h2o.nodes), h2o.nodes[0].java_heap_GB, algo, csvFilename, elapsed)
        print l
        h2o.cloudPerfH2O.message(l)
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvFilename)
        y = colCount
        kwargs = {'response': y, 'max_iter': 2, 'family': 'binomial', 'lambda': 0.0001, 'alpha': 0.6, 'n_folds': 1, 'beta_epsilon': 0.0001, 'strong_rules_enabled': 1, }
        start = time.time()
        glm = h2o_cmd.runGLM(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
        elapsed = (time.time() - start)
        h2o.check_sandbox_for_errors()
        print 'glm end on ', csvPathname, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        h2o_glm.simpleCheckGLM(self, glm, None, **kwargs)
        algo = 'GLM '
        l = '{:d} jvms, {:d}GB heap, {:s} {:s} {:6.2f} secs'.format(len(h2o.nodes), h2o.nodes[0].java_heap_GB, algo, csvFilename, elapsed)
        print l
        h2o.cloudPerfH2O.message(l)
