{
  int rows=2048;
  int cols=1024;
  int loops=5000;
  float[] a=new float[rows * cols];
  float[] x=new float[cols];
  float[] y=new float[rows];
  float[] res=new float[rows];
  byte[] bits=new byte[rows];
  for (int i=0; i < rows; ++i) {
    y[i]=0;
    res[i]=0;
    bits[i]=(byte)(new String("abcdefghijklmnopqrstuvwxyz").toCharArray()[i % 26]);
  }
  for (int i=0; i < cols; ++i) {
    x[i]=((float)i) / cols;
  }
  for (int i=0; i < rows; ++i) {
    int off=i * cols;
    for (int j=0; j < cols; ++j) {
      a[off + j]=((float)(i + j)) / cols;
    }
  }
  System.out.println("warming up.");
  float sum=0;
  for (int l=0; l < 11000; ++l) {
    gemv_naive(res,a,x,y,bits);
    sum+=res[rows / 2];
  }
  for (int l=0; l < 11000; ++l) {
    gemv(res,a,x,y,bits);
    sum+=res[rows / 2];
  }
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  System.out.println("starting naive.");
  sum=0;
  long start=System.currentTimeMillis();
  for (int l=0; l < loops; ++l) {
    gemv_naive(res,a,x,y,bits);
    sum+=res[rows / 2];
  }
  System.out.println("result: " + sum + " and "+ Utils.sum(res));
  System.out.println("Naive time: " + PrettyPrint.msecs(System.currentTimeMillis() - start,true));
  System.out.println("starting optimized.");
  sum=0;
  start=System.currentTimeMillis();
  for (int l=0; l < loops; ++l) {
    gemv(res,a,x,y,bits);
    sum+=res[rows / 2];
  }
  System.out.println("result: " + sum + " and "+ Utils.sum(res));
  System.out.println("Optimized time: " + PrettyPrint.msecs(System.currentTimeMillis() - start,true));
}
