{
  if (params.fast_mode || (!_minfo.get_params().adaptive_rate && !_minfo.has_momenta() && params.l1 == 0.0 && params.l2 == 0.0)) {
    if (Math.abs(g) <= 1e-10)     return;
  }
  double r2=0;
  final int off=u * _previous._a.length;
  for (int i=0; i < _previous._a.length; i++) {
    int w=off + i;
    if (_previous._e != null)     _previous._e[i]+=g * _w[w];
    float grad=g * _previous._a[i] - (float)(_w[w] * params.l2) - (float)(Math.signum(_w[w]) * params.l1);
    if (_E_dx2 != null && _E_g2 != null) {
      assert(_wm == null && _bm == null);
      _E_g2[w]=(float)(params.rho * _E_g2[w] + (1. - params.rho) * grad * grad);
      final float RMS_dx=approxSqrt(_E_dx2[w] + (float)params.epsilon);
      final float invRMS_g=approxInvSqrt(_E_g2[w] + (float)params.epsilon);
      r=RMS_dx * invRMS_g;
      _E_dx2[w]=(float)(params.rho * _E_dx2[w] + (1. - params.rho) * (r * grad) * (r * grad));
    }
    if (!params.nesterov_accelerated_gradient) {
      final float delta=r * grad;
      _w[w]+=delta;
      if (_wm != null) {
        _w[w]+=m * _wm[w];
        _wm[w]=delta;
      }
    }
 else {
      if (_wm != null) {
        _wm[w]*=m;
        _wm[w]+=grad;
        grad=_wm[w];
      }
      _w[w]+=r * grad;
    }
    if (params.max_w2 != Double.POSITIVE_INFINITY)     r2+=_w[w] * _w[w];
  }
  if (params.max_w2 != Double.POSITIVE_INFINITY && r2 > params.max_w2) {
    final double scale=approxSqrt((float)(params.max_w2 / r2));
    for (int i=0; i < _previous._a.length; i++)     _w[off + i]*=scale;
  }
  if (!params.nesterov_accelerated_gradient) {
    final float delta=r * g;
    _b[u]+=delta;
    if (_bm != null) {
      _b[u]+=m * _bm[u];
      _bm[u]=delta;
    }
  }
 else {
    float d=g;
    if (_bm != null) {
      _bm[u]*=m;
      _bm[u]+=d;
      d=_bm[u];
    }
    _b[u]+=r * d;
  }
  if (Float.isInfinite(_b[u]))   _minfo.set_unstable();
}
