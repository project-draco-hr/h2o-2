{
  final float rho=(float)params.rho;
  final float eps=(float)params.epsilon;
  final float l1=(float)params.l1;
  final float l2=(float)params.l2;
  final float max_w2=params.max_w2;
  final boolean have_momenta=_wm != null;
  final boolean have_ada=_ada_dx != null && _ada_g != null;
  final boolean nesterov=params.nesterov_accelerated_gradient;
  final boolean update_prev=prev_e != null;
  final boolean fast_mode=params.fast_mode;
  final int cols=prev_a.size();
  final int idx=row * cols;
  float avg_grad2=0;
  for (int col=0; col < cols; col++) {
    final float weight=_w.get(row,col);
    if (update_prev)     prev_e.add(col,partial_grad * weight);
    final float previous_a=prev_a.get(col);
    if (fast_mode && previous_a == 0)     continue;
    final float grad=partial_grad * previous_a - Math.signum(weight) * l1 - weight * l2;
    final int w=idx + col;
    if (have_ada) {
      assert(!have_momenta);
      final float grad2=grad * grad;
      avg_grad2+=grad2;
      _ada_g.raw()[w]=_ada_g.raw()[w] * rho;
      _ada_g.raw()[w]+=(1f - rho) * grad2;
      final float RMS_dx=Utils.approxSqrt(_ada_dx.raw()[w] + eps);
      final float invRMS_g=Utils.approxInvSqrt(_ada_g.raw()[w] + eps);
      rate=RMS_dx * invRMS_g;
      _ada_dx.raw()[w]=rho * _ada_dx.raw()[w] + (1f - rho) * rate * rate* grad2;
      _w.raw()[w]+=rate * grad;
    }
 else {
      if (!nesterov) {
        final float delta=rate * grad;
        _w.raw()[w]+=delta;
        if (have_momenta) {
          _w.raw()[w]+=momentum * _wm.raw()[w];
          _wm.raw()[w]=delta;
        }
      }
 else {
        float tmp=grad;
        if (have_momenta) {
          _wm.raw()[w]*=momentum;
          _wm.raw()[w]+=tmp;
          tmp=_wm.raw()[w];
        }
        _w.raw()[w]+=rate * tmp;
      }
    }
  }
  if (max_w2 != Float.POSITIVE_INFINITY)   rescale_weights(_w,row,max_w2);
  if (have_ada) {
    avg_grad2/=cols;
    _bias_ada_g.set(row,_bias_ada_g.get(row) * rho);
    _bias_ada_g.add(row,(1f - rho) * avg_grad2);
    final float RMS_dx=Utils.approxSqrt(_bias_ada_dx.get(row) + eps);
    final float invRMS_g=Utils.approxInvSqrt(_bias_ada_g.get(row) + eps);
    rate=RMS_dx * invRMS_g;
    _bias_ada_dx.set(row,rho * _bias_ada_dx.get(row) + (1f - rho) * rate * rate* avg_grad2);
  }
  update_bias(_b,_bm,row,partial_grad,rate,momentum);
}
