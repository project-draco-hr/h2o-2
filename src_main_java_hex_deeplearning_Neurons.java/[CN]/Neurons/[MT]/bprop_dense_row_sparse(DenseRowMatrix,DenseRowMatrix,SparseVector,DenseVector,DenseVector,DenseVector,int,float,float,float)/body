{
  final float rho=(float)params.rho;
  final float eps=(float)params.epsilon;
  final float l1=(float)params.l1;
  final float l2=(float)params.l2;
  final double max_w2=params.max_w2;
  final boolean have_momenta=_wm != null;
  final boolean have_ada=_ada != null;
  final boolean nesterov=params.nesterov_accelerated_gradient;
  final boolean update_prev=prev_e != null;
  final boolean fast_mode=params.fast_mode;
  final int cols=prev_a.size();
  final int idx=row * cols;
  for (SparseVector.Iterator it=prev_a.begin(); !it.equals(prev_a.end()); it.next()) {
    final int col=it.index();
    final float weight=_w.get(row,col);
    if (update_prev)     prev_e.add(col,partial_grad * weight);
    final float previous_a=it.value();
    assert(previous_a != 0);
    final float grad=partial_grad * previous_a - Math.signum(weight) * l1 - weight * l2;
    final int w=idx + col;
    if (have_ada) {
      assert(!have_momenta);
      final float grad2=grad * grad;
      _ada[2 * w + 1]*=rho;
      _ada[2 * w + 1]+=(1f - rho) * grad2;
      final float RMS_dx=Utils.approxSqrt(_ada[2 * w] + eps);
      final float invRMS_g=Utils.approxInvSqrt(_ada[2 * w + 1] + eps);
      rate=RMS_dx * invRMS_g;
      _ada[2 * w]=rho * _ada[2 * w] + (1f - rho) * rate * rate* grad2;
      _w.raw()[w]+=rate * grad;
    }
 else {
      if (!nesterov) {
        final float delta=rate * grad;
        _w.raw()[w]+=delta;
        if (have_momenta) {
          _w.raw()[w]+=momentum * _wm.raw()[w];
          _wm.raw()[w]=delta;
        }
      }
 else {
        float tmp=grad;
        if (have_momenta) {
          _wm.raw()[w]*=momentum;
          _wm.raw()[w]+=tmp;
          tmp=_wm.raw()[w];
        }
        _w.raw()[w]+=rate * tmp;
      }
    }
  }
  if (max_w2 != Double.POSITIVE_INFINITY)   rescale_weights(row);
  update_bias(_b,_bm,row,partial_grad,rate,momentum);
}
