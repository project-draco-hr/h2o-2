def test_PCA_UCIwine(self):
    csvFilename = 'wine.data'
    timeoutSecs = 300
    trialStart = time.time()
    trainKey = 'wine.hex'
    start = time.time()
    parseResult = h2i.import_parse(bucket='smalldata', path=csvFilename, schema='local', hex_key=trainKey, timeoutSecs=timeoutSecs)
    elapsed = (time.time() - start)
    print 'parse end on ', csvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
    print 'parse result:', parseResult['destination_key']
    params = {'destination_key': 'python_PCA_key', 'tolerance': 0.0, 'standardize': 1, }
    kwargs = params.copy()
    PCAResult = {'python_elapsed': 0, 'python_%timeout': 0, }
    start = time.time()
    h2o_cmd.runPCA(parseResult=parseResult, timeoutSecs=timeoutSecs, noPoll=True, returnFast=False, **kwargs)
    h2j.pollWaitJobs(timeoutSecs=timeoutSecs, pollTimeoutSecs=120, retryDelaySecs=2)
    elapsed = (time.time() - start)
    PCAResult['python_elapsed'] = elapsed
    PCAResult['python_%timeout'] = ((1.0 * elapsed) / timeoutSecs)
    print 'PCA completed in', PCAResult['python_elapsed'], 'seconds.', ('%f pct. of timeout' % PCAResult['python_%timeout'])
    pcaView = h2o_cmd.runPCAView(modelKey='python_PCA_key')
    h2o_pca.simpleCheckPCA(self, pcaView)
    h2o_pca.resultsCheckPCA(self, pcaView)
