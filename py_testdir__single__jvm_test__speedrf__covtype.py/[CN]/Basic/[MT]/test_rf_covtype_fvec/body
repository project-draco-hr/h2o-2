def test_rf_covtype_fvec(self):
    h2o.beta_features = True
    importFolderPath = 'standard'
    csvTrainFilename = 'covtype.data'
    csvTrainPathname = ((importFolderPath + '/') + csvTrainFilename)
    hex_key = (csvTrainFilename + '.hex')
    parseTrainResult = h2i.import_parse(bucket='home-0xdiag-imitation', path=csvTrainPathname, hex_key=hex_key, timeoutSecs=180, doSummary=False)
    inspect = h2o_cmd.runInspect(None, parseTrainResult['destination_key'])
    csvTestFilename = 'covtype.data'
    csvTestPathname = ((importFolderPath + '/') + csvTestFilename)
    hex_key = (csvTestFilename + '.hex')
    parseTestResult = h2i.import_parse(bucket='home-0xdiag-imitation', path=csvTestPathname, hex_key=hex_key, timeoutSecs=180)
    inspect = h2o_cmd.runInspect(None, parseTestResult['destination_key'])
    rfViewInitial = []
    xList = []
    eList = []
    fList = []
    trial = 0
    depthList = [10, 20, 30, 40]
    ntreesList = [5, 10, 20, 30]
    nbinsList = [10, 100, 1000]
    if (TRY == 'max_depth'):
        tryList = depthList
    elif (TRY == 'ntrees'):
        tryList = ntreesList
    elif (TRY == 'nbins'):
        tryList = nbinsList
    else:
        raise Exception(('huh? %s' % TRY))
    for d in tryList:
        if (TRY == 'max_depth'):
            paramDict['max_depth'] = d
        elif (TRY == 'ntrees'):
            paramDict['ntrees'] = d
        elif (TRY == 'nbins'):
            paramDict['nbins'] = d
        else:
            raise Exception(('huh? %s' % TRY))
        if DO_OOBE:
            paramDict['validation'] = None
        else:
            paramDict['validation'] = parseTestResult['destination_key']
        timeoutSecs = (30 + (paramDict['ntrees'] * 200))
        TRIES = 5
        for i in range(TRIES):
            lastOne = (i == (TRIES - 1))
            trial += 1
            kwargs = paramDict.copy()
            model_key = ('RFModel_' + str(trial))
            kwargs['destination_key'] = model_key
            data_key = parseTrainResult['destination_key']
            start = time.time()
            rfResult = h2o_cmd.runSpeeDRF(parseResult=parseTrainResult, timeoutSecs=timeoutSecs, noPoll=True, **kwargs)
            trainElapsed = (time.time() - start)
            print 'rf train end', i, 'on', csvTrainPathname, 'took', trainElapsed, 'seconds'
            h2o_jobs.cancelAllJobs(timeoutSecs=2)
    if DO_PLOT:
        eLabel = 'class 4 pctWrong'
        fLabel = 'trainElapsed'
        eListTitle = ''
        fListTitle = ''
        h2o_gbm.plotLists(xList, xLabel, eListTitle, eList, eLabel, fListTitle, fList, fLabel)
