def test_parse_delete_nospill(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(100000, 500, 'cA', 500, 500)]
    h2b.browseTheCloud()
    iceDir = h2o.nodes[0].get_ice_dir()
    print ('Counting the # of things in ice_dir %s' % iceDir)
    (path, dirs, files) = os.walk(iceDir).next()
    print path, 'dirs:', dirs, 'files:', files
    for (rowCount, colCount, orig_hex_key, timeoutSecs, timeoutSecs2) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + str(SEEDPERFILE)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        csvPathPattern = ((SYNDATASETS_DIR + '/') + '*syn*csv*')
        multifile = 50
        for p in range(1, multifile):
            csvPathnameLink = ((csvPathname + '_') + str(p))
            os.symlink(csvFilename, csvPathnameLink)
        print '\nCreating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        for trial in range(2):
            hex_key = (orig_hex_key + str(trial))
            start = time.time()
            parseResult = h2i.import_parse(path=csvPathPattern, hex_key=hex_key, delete_on_done=1, timeoutSecs=timeoutSecs, retryDelaySecs=3, doSummary=False)
            print 'Parse:', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
            start = time.time()
            inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], timeoutSecs=timeoutSecs2)
            print 'Inspect:', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
            h2o_cmd.infoFromInspect(inspect, csvPathname)
            print ('\n' + csvPathname), '    numRows:', '{:,}'.format(inspect['numRows']), '    numCols:', '{:,}'.format(inspect['numCols']), '    byteSize:', '{:,}'.format(inspect['byteSize'])
            self.assertEqual(inspect['numCols'], colCount, ('parse created result with the wrong number of cols %s %s' % (inspect['numCols'], colCount)))
            self.assertEqual(inspect['numRows'], (rowCount * multifile), ("parse created result with the wrong number of rows (header shouldn't count) %s %s" % (inspect['numRows'], (rowCount * multifile))))
            iceDir = h2o.nodes[0].get_ice_dir()
            print ('Counting the # of things in ice_dir %s' % iceDir)
            print path, 'dirs:', dirs, 'files:', files
            (path, dirs, files) = os.walk(iceDir).next()
            fileCount = len(files)
            if (fileCount > 10):
                raise Exception(("ice directory %s shouldn't have more than 5 things: %s" % (iceDir, fileCount)))
            h2o.nodes[0].remove_all_keys()
