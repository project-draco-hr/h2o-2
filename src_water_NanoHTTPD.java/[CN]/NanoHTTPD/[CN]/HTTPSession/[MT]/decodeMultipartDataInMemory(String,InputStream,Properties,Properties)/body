{
  try {
    String line=readLine(in);
    while (line != null) {
      int i=line.indexOf(boundary);
      if (i != 2)       sendError(HTTP_BADREQUEST,"BAD REQUEST: Content type is multipart/form-data but next chunk does not start with boundary. Usage: GET /example/file.html");
      if (line.substring(i + boundary.length()).startsWith("--"))       return;
      Properties item=new Properties();
      line=readLine(in);
      while ((line != null) && (line.trim().length() > 0)) {
        int p=line.indexOf(':');
        if (p != -1)         item.put(line.substring(0,p).trim().toLowerCase(),line.substring(p + 1).trim());
        line=readLine(in);
      }
      if (line != null) {
        String contentDisposition=item.getProperty("content-disposition");
        if (contentDisposition == null) {
          sendError(HTTP_BADREQUEST,"BAD REQUEST: Content type is multipart/form-data but no content-disposition info found. Usage: GET /example/file.html");
        }
        StringTokenizer st=new StringTokenizer(contentDisposition,"; ");
        Properties disposition=new Properties();
        while (st.hasMoreTokens()) {
          String token=st.nextToken();
          int p=token.indexOf('=');
          if (p != -1)           disposition.put(token.substring(0,p).trim().toLowerCase(),token.substring(p + 1).trim());
        }
        String pname=disposition.getProperty("name");
        pname=pname.substring(1,pname.length() - 1);
        String value="";
        if (item.getProperty("content-type") == null) {
          while (line != null && line.indexOf(boundary) == -1) {
            line=readLine(in);
            if (line != null) {
              int d=line.indexOf(boundary);
              if (d == -1)               value+=line;
 else               value+=line.substring(0,d - 2);
            }
          }
        }
 else {
          File tmp=File.createTempFile(pname,"tmp");
          FileOutputStream s=new FileOutputStream(tmp);
          byte[] buf=new byte[10240];
          byte[] pending=new byte[]{'\r','\n'};
          int p=0;
          while (true) {
            int sz=readBufOrLine(in,buf);
            if (new String(buf,0,Math.min(sz,boundary.length() + 2)).indexOf(boundary) == 2) {
              line=new String(buf,0,sz);
              break;
            }
            if (p != 0) {
              s.write(pending,2 - p,p);
              p=0;
            }
            if ((sz > 0) && (buf[sz - 1] == '\n')) {
              p=((sz > 1) && (buf[sz - 2] == '\r')) ? 2 : 1;
            }
            s.write(buf,0,sz - p);
          }
          s.close();
          files.put(pname,tmp.getAbsolutePath());
          value=disposition.getProperty("filename");
          value=value.substring(1,value.length() - 1);
        }
        parms.put(pname,value);
      }
    }
  }
 catch (  IOException e) {
    sendError(HTTP_INTERNALERROR,"SERVER INTERNAL ERROR: IOException: " + e.getMessage());
  }
}
