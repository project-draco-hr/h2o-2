def test_cols_enum_multi_import(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    translateList = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u']
    tryList = [(300, 100, 'cA', 60)]
    cnum = 0
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        cnum += 1
        print 'Wait while', FILENUM, 'synthetic files are created in', SYNDATASETS_DIR
        rowxcol = ((str(rowCount) + 'x') + str(colCount))
        for fileN in range(FILENUM):
            csvFilename = (((((('syn_' + str(fileN)) + '_') + str(SEED)) + '_') + rowxcol) + '.csv')
            csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
            write_syn_dataset(csvPathname, rowCount, colCount, SEED, translateList)
        parseResult = h2i.import_parse(path=(((SYNDATASETS_DIR + '/*') + rowxcol) + '*'), exclude=None, header=1, timeoutSecs=timeoutSecs)
        print ("parseResult['destination_key']: " + parseResult['destination_key'])
        print 'parse time:', parseResult['response']['time']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        h2o_cmd.infoFromInspect(inspect, csvPathname)
        print (('\n' + parseResult['destination_key']) + ':'), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
        origUid = os.getuid()
        origGid = os.getgid()
        print 'my uid and gid:', origUid, origGid
        fileList = os.listdir(SYNDATASETS_DIR)
        badFile = random.choice(fileList)
        badPathname = ((SYNDATASETS_DIR + '/') + badFile)
        print 'Going to use this file as the bad file:', badPathname
        print 'checking os.chmod and parse'
        parseResult = h2i.import_parse(path=(((SYNDATASETS_DIR + '/*') + rowxcol) + '*'), exclude=None, header=1, timeoutSecs=timeoutSecs)
        print ("parseResult['destination_key']: " + parseResult['destination_key'])
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        h2o_cmd.infoFromInspect(inspect, csvPathname)
        print 'write by owner, only, and parse'
        os.chmod(badPathname, stat.S_IWRITE)
        parseResult = h2i.import_parse(path=(((SYNDATASETS_DIR + '/*') + rowxcol) + '*'), exclude=None, header=1, timeoutSecs=timeoutSecs)
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        h2o_cmd.infoFromInspect(inspect, csvPathname)
        print 'execute by owner, only, and parse'
        os.chmod(badPathname, stat.S_IEXEC)
        h2o.nodes[0].import_files(SYNDATASETS_DIR)
        parseResult = h2i.import_parse(path=(((SYNDATASETS_DIR + '/*') + rowxcol) + '*'), exclude=None, header=1, timeoutSecs=timeoutSecs)
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        h2o_cmd.infoFromInspect(inspect, csvPathname)
        if (1 == 0):
            badUid = pwd.getpwnam('nobody').pw_uid
            badGid = grp.getgrnam('nogroup').gr_gid
            print 'parsing after one bad uid'
            os.chown(badPathname, badUid, origGid)
            parseResult = h2i.import_parse(path=(((SYNDATASETS_DIR + '/*') + rowxcol) + '*'), exclude=None, header=1, timeoutSecs=timeoutSecs)
            print 'parsing after one bad gid'
            os.chown(badPathname, origUid, badGid)
            parseResult = h2i.import_parse(path=(((SYNDATASETS_DIR + '/*') + rowxcol) + '*'), exclude=None, header=1, timeoutSecs=timeoutSecs)
            os.chown(badPathname, origUid, origGid)
