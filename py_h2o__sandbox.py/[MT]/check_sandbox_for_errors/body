def check_sandbox_for_errors(LOG_DIR=None, python_test_name='', cloudShutdownIsError=False, sandboxIgnoreErrors=False, pattern=None):
    errorFound = False
    if (not LOG_DIR):
        LOG_DIR = './sandbox'
    if (not os.path.exists(LOG_DIR)):
        return
    fileList = []
    if pattern:
        fileList1 = glob.glob(((LOG_DIR + '/') + pattern))
        for filename in fileList1:
            if (os.path.isfile(filename) and (not re.search('doneToLine', filename)) and (not re.search('\\.json$', filename))):
                fileList.append(os.path.basename(filename))
        if (len(fileList) == 0):
            raise Exception(('Unexpected: h2o_sandbox found 0 files in %s that matched the pattern: %s' % (LOG_DIR, pattern)))
    else:
        fileList1 = os.listdir(LOG_DIR)
        for filename in fileList1:
            if (re.search('h2o.*stdout|h2o.*stderr|h2o\\..*\\.log', filename) and (not re.search('doneToLine', filename))):
                fileList.append(filename)
        if (len(fileList) == 0):
            emsg = ('Unexpected: h2o_sandbox found 0 files in %s that matched the stdout/stderr pattern' % LOG_DIR)
            if sandboxIgnoreErrors:
                print emsg
                return
            else:
                pass
    errLines = []
    for filename in fileList:
        sandFile = open(((LOG_DIR + '/') + filename), 'r')
        try:
            with open(((LOG_DIR + '/doneToLine.') + filename)) as f:
                r = f.readline().rstrip()
                if ((not r) or (r == '')):
                    doneToLine = 0
                else:
                    try:
                        doneToLine = int(r)
                    except:
                        raise Exception(('%s/doneToLine.%s is corrupted (multiprocess issue?): %s' % (LOG_DIR, filename, r)))
        except IOError:
            doneToLine = 0
        if pattern:
            doneToLine = 0
        regex1String = 'found multiple|exception|error|ERRR|assert|killing|killed|required ports'
        if cloudShutdownIsError:
            regex1String += '|shutdown command'
        regex1 = re.compile(regex1String, re.IGNORECASE)
        regex2 = re.compile('Caused', re.IGNORECASE)
        regex3 = re.compile('warn|TCP', re.IGNORECASE)
        printing = 0
        lines = 0
        currentLine = 0
        log_python_test_name = None
        for line in sandFile:
            currentLine += 1
            m = re.search('(python_test_name:) (.*)', line)
            if m:
                log_python_test_name = m.group(2)
            if (currentLine <= doneToLine):
                continue
            printSingleWarning = False
            foundBad = False
            if (not (' bytes)' in line)):
                printSingleWarning = regex3.search(line)
                foundBad = (regex1.search(line) and (not (('Error reduced' in line) or ('out-of-bag error estimation' in line) or ('reconstruction error' in line) or ('Prediction error' in line) or (('Act/Prd' in line) and ('Error' in line)) or (('AUC' in line) and ('Gini' in line) and ('Precision' in line)) or ('Error on training data' in line) or ('Error on validation data' in line) or ('water.DException' in line) or ('WARN SCORM' in line) or ('stack_traces' in line) or ('out_of_bag_error_estimate' in line) or ('Training Error' in line) or ('Mean Squared Error' in line) or (('Error' in line) and ('Actual' in line)) or ('prediction error' in line) or ('errors on' in line) or ('class.error' in line) or ('error rate' in line) or ('[Loaded ' in line) or ('[WARN]' in line) or ('CalcSquareErrorsTasks' in line))))
            if ((printing == 0) and foundBad):
                printing = 1
                lines = 1
            elif (printing == 1):
                lines += 1
                foundCaused = regex2.search(line)
                foundAt = re.match('[\\t ]+at ', line)
                if (foundBad and (lines > 10) and (not (foundCaused or foundAt))):
                    printing = 2
            if (printing == 1):
                errLines.append(line)
                sys.stdout.write(line)
            if printSingleWarning:
                if (not (('Unable to load native-hadoop library' in line) or ('stack_traces' in line) or ('Multiple local IPs detected' in line) or ('[Loaded ' in line) or ('RestS3Service' in line))):
                    sys.stdout.write(line)
        sandFile.close()
        with open((((LOG_DIR + '/') + 'doneToLine.') + filename), 'w') as f:
            f.write((str(currentLine) + '\n'))
    sys.stdout.flush()
    if (len(errLines) != 0):
        justInfo = 0
        for e in errLines:
            if ('Broken pipe' in e):
                justInfo = 1
            elif ((justInfo == 0) and (not re.match('INFO:', e))):
                justInfo = 2
        if (justInfo == 2):
            emsg1 = (' check_sandbox_for_errors: Errors in sandbox stdout or stderr (or R stdout/stderr).\n' + 'Could have occurred at any prior time\n\n')
            emsg2 = ''.join(errLines)
            errorFound = True
            errorMessage = ((python_test_name + emsg1) + emsg2)
            if pattern:
                print '####################################################################'
                print errorMessage
                print '####################################################################'
            if ((not pattern) and (not sandboxIgnoreErrors)):
                raise Exception(errorMessage)
    if errorFound:
        return errorMessage
    else:
        return
