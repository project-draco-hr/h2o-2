def test_csv_download_libsvm(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(5000, 10000, 'cK', 60), (10000, 10000, 'cL', 60), (50000, 10000, 'cM', 60)]
    lenNodes = len(h2o.nodes)
    trial = 0
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        trial += 1
        csvFilename = (((((('syn_' + str(SEED)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print 'Creating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEED)
        start = time.time()
        parseResultA = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=timeoutSecs, doSummary=False)
        print '\nA Trial #', trial, 'rowCount:', rowCount, 'colCount:', colCount, 'parse end on ', csvFilename, 'took', (time.time() - start), 'seconds'
        inspect = h2o_cmd.runInspect(key=hex_key, timeoutSecs=timeoutSecs)
        missingValuesListA = h2o_cmd.infoFromInspect(inspect, csvPathname)
        numColsA = inspect['numCols']
        numRowsA = inspect['numRows']
        byteSizeA = inspect['byteSize']
        csvDownloadPathname = (SYNDATASETS_DIR + '/csvDownload.csv')
        print '\nStarting csv download to', csvDownloadPathname, 'rowCount:', rowCount, 'colCount:', colCount
        start = time.time()
        h2o.nodes[0].csv_download(src_key=hex_key, csvPathname=csvDownloadPathname)
        print 'csv_download end.', 'took', (time.time() - start), 'seconds. Originally from:', csvFilename
        h2o.nodes[0].remove_key(hex_key)
        start = time.time()
        parseResultB = h2i.import_parse(path=csvDownloadPathname, schema='put', hex_key=hex_key, timeoutSecs=timeoutSecs)
        print '\nB Trial #', trial, 'rowCount:', rowCount, 'colCount:', colCount, 'parse end on ', csvFilename, 'took', (time.time() - start), 'seconds'
        inspect = h2o_cmd.runInspect(key=hex_key, timeoutSecs=timeoutSecs)
        missingValuesListB = h2o_cmd.infoFromInspect(inspect, csvPathname)
        numColsB = inspect['numCols']
        numRowsB = inspect['numRows']
        byteSizeB = inspect['byteSize']
        self.assertEqual(missingValuesListA, missingValuesListB, 'missingValuesList mismatches after re-parse of downloadCsv result')
        self.assertEqual(numColsA, numColsB, ('numCols mismatches after re-parse of downloadCsv result %d %d' % (numColsA, numColsB)))
        self.assertEqual(numRowsA, numRowsB, ('numRows mismatches after re-parse of downloadCsv result %d %d' % (numRowsA, numRowsB)))
        self.assertEqual(byteSizeA, byteSizeB, ('byteSize mismatches after re-parse of downloadCsv result %d %d' % (byteSizeA, byteSizeB)))
        h2o.check_sandbox_for_errors()
