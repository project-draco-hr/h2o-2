def test_rf_big1_overwrite_model_fvec(self):
    h2o.beta_features = True
    csvFilename = 'hhp_107_01.data.gz'
    hex_key = (csvFilename + '.hex')
    print ('\n' + csvFilename)
    parseResult = h2i.import_parse(bucket='smalldata', path=csvFilename, hex_key=hex_key, timeoutSecs=15, schema='put')
    firstRfView = None
    for jobDispatch in range(3):
        start = time.time()
        kwargs = {}
        if OVERWRITE_RF_MODEL:
            print "Since we're overwriting here, we have to wait for each to complete noPoll=False"
            model_key = 'RF_model'
        else:
            model_key = ('RF_model' + str(jobDispatch))
        print 'Change the number of trees, while keeping the rf model key name the same'
        print 'Checks that we correctly overwrite previous rf model'
        if OVERWRITE_RF_MODEL:
            kwargs['ntrees'] = (1 + jobDispatch)
        else:
            kwargs['ntrees'] = 1
            kwargs['seed'] = random.randint(0, sys.maxint)
        kwargs['response'] = 'C107'
        randomNode = h2o.nodes[random.randint(0, (len(h2o.nodes) - 1))]
        h2o_cmd.runSpeeDRF(node=randomNode, parseResult=parseResult, destination_key=model_key, timeoutSecs=300, noPoll=True, **kwargs)
        rfView = {}
        rfView['_dataKey'] = hex_key
        rfView['_key'] = model_key
        print 'rf job dispatch end on ', csvFilename, 'took', (time.time() - start), 'seconds'
        print '\njobDispatch #', jobDispatch
        h2o_jobs.pollWaitJobs(pattern='RF_model', timeoutSecs=300, pollTimeoutSecs=10, retryDelaySecs=5)
        print 'Checking completed job:', rfView
        print 'rfView', h2o.dump_json(rfView)
        data_key = rfView['_dataKey']
        model_key = rfView['_key']
        print 'Temporary hack: need to do two rf views minimum, to complete a RF (confusion matrix creation)'
        rfViewResult = h2o_cmd.runSpeeDRFView(None, model_key, timeoutSecs=60)
        if (firstRfView is None):
            firstRfView = rfViewResult.copy()
            firstModelKey = model_key
            print 'firstRfView', h2o.dump_json(firstRfView)
        else:
            print 'Comparing', model_key, 'to', firstModelKey
            df = h2o_util.JsonDiff(rfViewResult, firstRfView, vice_versa=True, with_values=True)
            print 'df.difference:', h2o.dump_json(df.difference)
            self.assertGreater(len(df.difference), 29, msg=('Want >=30 , not %d differences between the two rfView json responses. %s' % (len(df.difference), h2o.dump_json(df.difference))))
