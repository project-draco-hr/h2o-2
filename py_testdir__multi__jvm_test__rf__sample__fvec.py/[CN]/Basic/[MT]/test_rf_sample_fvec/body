def test_rf_sample_fvec(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    csvFilename = 'syn_ints.csv'
    csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
    headerData = 'ID,CAPSULE,AGE,RACE,DPROS,DCAPS,PSA,VOL,GLEASON'
    print 'just going to see if rf is doing the sampling right for one tree on 100000 rows'
    rList = rand_rowData()
    totalRows = 10000
    write_syn_dataset(csvPathname, totalRows, headerData, rList)
    for trial in range(2):
        src_key = ((csvFilename + '_') + str(trial))
        hex_key = (((csvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        timeoutSecs = 30
        parseResult = h2i.import_parse(path=csvPathname, schema='put', src_key=src_key, hex_key=hex_key, timeoutSecs=timeoutSecs, pollTimeoutSecs=30, header=1)
        print 'parse end on ', csvPathname, 'took', (time.time() - start), 'seconds'
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvPathname), '    numRows:', '{:,}'.format(inspect['numRows']), '    numCols:', '{:,}'.format(inspect['numCols'])
        kwargs = {'sample_rate': 0.75, 'max_depth': 25, 'ntrees': 1, }
        start = time.time()
        rfv = h2o_cmd.runRF(parseResult=parseResult, timeoutSecs=30, **kwargs)
        elapsed = (time.time() - start)
        print ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
        print 'trial #', trial, 'totalRows:', totalRows, 'parse end on ', csvFilename, 'took', (time.time() - start), 'seconds'
        h2o.check_sandbox_for_errors()
