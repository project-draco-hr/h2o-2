{
  DKV.remove(self);
  DKV.write_barrier();
  new TAtomic<List>(){
    @Override public List atomic(    List old){
      if (old == null)       old=new List();
      Job[] jobs=old._jobs;
      for (int i=0; i < jobs.length; i++) {
        if (jobs[i].job_key.equals(self)) {
          final Job job=jobs[i];
          job.end_time=CANCELLED_END_TIME;
          job.exception=exception;
          H2OCountedCompleter task=new H2OCountedCompleter(){
            @Override public void compute2(){
              job.onCancelled();
              tryComplete();
            }
          }
;
          H2O.submitTask(task);
          break;
        }
      }
      return old;
    }
  }
.fork(LIST);
}
