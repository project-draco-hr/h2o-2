{
  if (validation != null && n_folds != 0)   throw new UnsupportedOperationException("Cannot specify a validation dataset and non-zero number of cross-validation folds.");
  if (n_folds < 0)   throw new UnsupportedOperationException("The number of cross-validation folds must be >= 0.");
  super.init();
  xval_models=new Key[n_folds];
  for (int i=0; i < xval_models.length; ++i)   xval_models[i]=Key.make(dest().toString() + "_xval" + i);
  int rIndex=0;
  for (int i=0; i < source.vecs().length; i++)   if (source.vecs()[i] == response) {
    rIndex=i;
    break;
  }
  _responseName=source._names != null && rIndex >= 0 ? source._names[rIndex] : "response";
  if (holdout_fraction > 0) {
    if (validation != null)     throw new IllegalArgumentException("Cannot specify both a holdout fraction and a validation frame.");
    if (n_folds != 0)     throw new IllegalArgumentException("Cannot specify both a holdout fraction and a n-fold cross-validation.");
    Log.info("Holding out last " + Utils.formatPct(holdout_fraction) + " of training data.");
    FrameSplitter fs=new FrameSplitter(source,new float[]{1 - holdout_fraction});
    H2O.submitTask(fs).join();
    Frame[] splits=fs.getResult();
    source=splits[0];
    response=source.vecs()[rIndex];
    validation=splits[1];
    Log.warn("Allocating data split frames: " + source._key.toString() + " and "+ validation._key.toString());
    Log.warn("Both will be kept after the the model is trained. It's the user's responsibility to manage their lifetime.");
  }
  _train=selectVecs(source);
  _names=new String[cols.length];
  for (int i=0; i < cols.length; i++)   _names[i]=source._names[cols[i]];
  if (classification)   _sourceResponseDomain=getVectorDomain(response);
  if (validation != null) {
    int idx=validation.find(source.names()[rIndex]);
    if (idx == -1)     throw new IllegalArgumentException("Validation set does not have a response column called " + _responseName);
    _validResponse=validation.vecs()[idx];
    if (classification) {
      _validResponseDomain=getVectorDomain(_validResponse);
      if (_validResponseDomain != null) {
        _cmDomain=Utils.domainUnion(_sourceResponseDomain,_validResponseDomain);
        if (!Arrays.deepEquals(_sourceResponseDomain,_validResponseDomain)) {
          _fromModel2CM=Model.getDomainMapping(_cmDomain,_sourceResponseDomain,false);
          _fromValid2CM=Model.getDomainMapping(_cmDomain,_validResponseDomain,false);
        }
      }
 else       _cmDomain=_sourceResponseDomain;
    }
  }
 else   if (classification)   _cmDomain=_sourceResponseDomain;
}
