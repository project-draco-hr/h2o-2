def test_rf_enums_mappings_fvec(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    n = 3000
    tryList = [(n, 1, 'cD', 300), (n, 2, 'cE', 300), (n, 3, 'cF', 300), (n, 4, 'cG', 300), (n, 5, 'cH', 300), (n, 6, 'cI', 300)]
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        colSepHexString = '2c'
        colSepChar = colSepHexString.decode('hex')
        colSepInt = int(colSepHexString, base=16)
        print 'colSepChar:', colSepChar
        rowSepHexString = '0a'
        rowSepChar = rowSepHexString.decode('hex')
        print 'rowSepChar:', rowSepChar
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((('syn_enums_' + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        csvScoreFilename = (((('syn_enums_score_' + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvScorePathname = ((SYNDATASETS_DIR + '/') + csvScoreFilename)
        enumList = create_enum_list(listSize=10)
        enumListForScore = enumList
        print 'Creating random', csvPathname, 'for rf model building'
        write_syn_dataset(csvPathname, enumList, rowCount, colCount, SEEDPERFILE, colSepChar=colSepChar, rowSepChar=rowSepChar)
        print 'Creating random', csvScorePathname, 'for rf scoring with prior model (using same enum list)'
        write_syn_dataset(csvScorePathname, enumListForScore, rowCount, colCount, SEEDPERFILE, colSepChar=colSepChar, rowSepChar=rowSepChar)
        scoreDataKey = ('score_' + hex_key)
        parseResult = h2i.import_parse(path=csvScorePathname, schema='put', hex_key=scoreDataKey, timeoutSecs=30, separator=colSepInt)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=30, separator=colSepInt)
        print "Parse result['destination_key']:", parseResult['destination_key']
        print ('\n' + csvFilename)
        (missingValuesDict, constantValuesDict, enumSizeDict, colTypeDict, colNameDict) = h2o_cmd.columnInfoFromInspect(parseResult['destination_key'], exceptionOnMissingValues=True)
        y = colCount
        modelKey = 'enums'
        kwargs = {'destination_key': modelKey, 'response': y, 'classification': 1, 'ntrees': 1, 'max_depth': 10, 'validation': scoreDataKey, }
        start = time.time()
        rfResult = h2o_cmd.runRF(parseResult=parseResult, timeoutSecs=timeoutSecs, pollTimeoutSecs=180, **kwargs)
        print 'rf end on ', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
        (classification_error, classErrorPctList, totalScores) = h2o_rf.simpleCheckRFView(rfv=rfResult)
        predictKey = 'Predict.hex'
        h2o_cmd.runScore(dataKey=scoreDataKey, modelKey=modelKey, vactual=y, vpredict=1)
