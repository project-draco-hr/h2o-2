def simpleCheckGLMGrid(self, glmGridResult, colX=None, allowFailWarning=False, **kwargs):
    if h2o.beta_features:
        destination_key = glmGridResult['grid']['destination_keys'][0]
        inspectGG = h2o.nodes[0].glm_view(destination_key)
        models = inspectGG['glm_model']['submodels']
        h2o.verboseprint('GLMGrid inspect GLMGrid model 0(best):', h2o.dump_json(models[0]))
        g = simpleCheckGLM(self, inspectGG, colX, allowFailWarning=allowFailWarning, **kwargs)
    else:
        destination_key = glmGridResult['destination_key']
        inspectGG = h2o_cmd.runInspect(None, destination_key)
        h2o.verboseprint('Inspect of destination_key', destination_key, ':\n', h2o.dump_json(inspectGG))
        models = glmGridResult['models']
        for (m, model) in enumerate(models):
            alpha = model['alpha']
            area_under_curve = model['area_under_curve']
            error_0 = model['error_0']
            error_1 = model['error_1']
            model_key = model['key']
            print ('#%s GLM model key: %s' % (m, model_key))
            glm_lambda = model['lambda']
        inspectGLM = h2o_cmd.runInspect(None, glmGridResult['models'][0]['key'])
        h2o.verboseprint('GLMGrid inspect GLMGrid model 0(best):', h2o.dump_json(inspectGLM))
        g = simpleCheckGLM(self, inspectGLM, colX, allowFailWarning=allowFailWarning, **kwargs)
    return g
