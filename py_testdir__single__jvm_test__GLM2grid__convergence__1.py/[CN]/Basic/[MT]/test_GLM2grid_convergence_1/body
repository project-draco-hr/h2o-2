def test_GLM2grid_convergence_1(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(100, 50, 'cD', 300), (100, 100, 'cE', 300), (100, 200, 'cF', 300), (100, 300, 'cG', 300), (100, 400, 'cH', 300), (100, 500, 'cI', 300)]
    lenNodes = len(h2o.nodes)
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = ('syn_%s_%sx%s.csv' % (SEEDPERFILE, rowCount, colCount))
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print '\nCreating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        parseResult = h2i.import_parse(path=csvPathname, hex_key=hex_key, timeoutSecs=10, schema='put')
        print "Parse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvFilename)
        y = colCount
        kwargs = {'max_iter': 10, 'n_folds': 2, 'beta_epsilon': 0.0001, 'lambda': '1e-8:1e-3:1e2', 'alpha': '0,0.5,.75', }
        kwargs['response'] = y
        for i in range(2):
            start = time.time()
            glm = h2o_cmd.runGLM(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
            print 'glm grid result', h2o.dump_json(glm)
            print 'glm #', i, 'end on', csvPathname, 'took', (time.time() - start), 'seconds'
            h2o_glm.simpleCheckGLMGrid(self, glm, None, **kwargs)
