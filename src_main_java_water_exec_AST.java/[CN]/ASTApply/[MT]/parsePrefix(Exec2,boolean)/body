{
  int x0=E._x;
  AST pre=parseVal(E,EOS);
  if (pre == null)   return null;
  while (true) {
    int x=E._x;
    if (!E.peek('(',true))     return pre;
    if (pre._t.isNotFun()) {
      E._x=x0;
      if ((pre=ASTOp.parse(E)) == null)       E.throwErr("No potential function was found.",x0);
      if (!E.peek('('))       return pre;
    }
    AST args[]=new AST[]{pre,null};
    int i=1;
    if (!E.peek(')')) {
      while (true) {
        if ((args[i++]=parseCXExpr(E,false)) == null)         E.throwErr("Missing argument",E._x);
        if (args[i - 1] instanceof ASTAssign) {
          ASTAssign a=(ASTAssign)args[i - 1];
          if (a._lhs.argName().equals("na.rm")) {
            ASTReducerOp op=(ASTReducerOp)args[0];
            op._narm=(a._eval.argName().equals("T") || a._eval.argName().equals("TRUE") || a._eval.toString().equals("1.0"));
            args[0]=op;
          }
        }
        if (E.peek(')'))         break;
        E.xpeek(',',E._x,null);
        if (i == args.length)         args=Arrays.copyOf(args,args.length << 1);
      }
    }
    args=Arrays.copyOf(args,i);
    pre=make(args,E,x);
  }
}
