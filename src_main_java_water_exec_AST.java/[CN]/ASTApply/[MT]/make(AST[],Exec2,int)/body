{
  Type ts[]=new Type[args.length];
  ts[0]=Type.unbound(x);
  for (int i=1; i < ts.length; i++)   ts[i]=args[i]._t;
  Type ft1=Type.fcn(x,ts);
  AST fast=args[0];
  Type ft2=fast._t;
  if (ft1.union(ft2))   return new ASTApply(args,x);
  if (ft2.isNotFun())   E.throwErr("Function-parens following a " + ft2,x);
  if (ft2._ts.length != ts.length)   E.throwErr("Passed " + (ts.length - 1) + " args but expected "+ (ft2._ts.length - 1),x);
  String vars[]=(fast instanceof ASTOp) ? ((ASTOp)fast)._vars : null;
  for (int i=1; i < ts.length; i++)   if (!ft2._ts[i].union(args[i]._t))   E.throwErr("Arg " + (vars == null ? ("#" + i) : ("'" + vars[i] + "'")) + " typed as "+ ft2._ts[i]+ " but passed "+ args[i]._t,x);
  throw H2O.fail();
}
