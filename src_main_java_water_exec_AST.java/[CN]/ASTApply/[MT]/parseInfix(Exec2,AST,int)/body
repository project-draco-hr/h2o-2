{
  int x=E._x;
  AST inf=null;
  if (ast == null) {
    ASTOp op1=ASTOp.parseUniInfixOp(E);
    if (op1 != null) {
      if ((ast=parseInfix(E,null,op1._precedence)) == null)       E.throwErr("Missing expr or unknown ID",E._x);
      ast=inf=make(new AST[]{op1,ast},E,x);
    }
 else     if ((ast=ASTSlice.parse(E)) == null) {
      E.throwErr("Missing expr or unknown ID",E._x);
    }
  }
  while (true) {
    int op_x=E._x;
    ASTOp op=ASTOp.parseBinInfixOp(E);
    if (op == null || op._precedence < curr_prec || (op.leftAssociate() && op._precedence == curr_prec)) {
      E._x=op_x;
      return inf;
    }
    AST rite=parseInfix(E,null,op._precedence);
    ast=inf=make(new AST[]{op,ast,rite},E,x);
  }
}
