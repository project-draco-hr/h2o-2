{
  if (ast == null)   return null;
  ast.exec(env);
  long cols[];
  if (!env.isFrame()) {
    int col=(int)env.popDbl();
    if (col > 0 && col > len)     throw new IllegalArgumentException("Trying to select column " + col + " but only "+ len+ " present.");
    if (col < 0 && col < -len)     col=0;
    if (col == 0)     return new long[0];
    return new long[]{col};
  }
  Frame fr=env.popFrame();
  try {
    if (fr.numCols() > 1)     throw new IllegalArgumentException("Selector must be a single column: " + fr);
    if (fr.numRows() > 10000)     throw H2O.unimpl();
    cols=MemoryManager.malloc8((int)fr.numRows());
    Vec v=fr.anyVec();
    for (int i=0; i < cols.length; ++i) {
      if (v.isNA(i))       throw new IllegalArgumentException("Can not use NA as index!");
      cols[i]=v.at8(i);
    }
    return cols;
  }
  finally {
    env.subRef(fr);
  }
}
