{
  int x=E._x;
  String id=E.isID();
  if (id == null)   return null;
  if (!"function".equals(id)) {
    E._x=x;
    return null;
  }
  E.xpeek('(',E._x,null);
  LinkedHashMap<String,Type> vars=new LinkedHashMap<String,Type>();
  if (!E.peek(')')) {
    while (true) {
      x=E._x;
      id=E.isID();
      if (id == null)       E.throwErr("Invalid id",x);
      if (vars.containsKey(id))       E.throwErr("Repeated argument",x);
      vars.put(id,null);
      if (E.peek(')'))       break;
      E.xpeek(',',E._x,null);
    }
  }
  String xvars[]=new String[vars.size() + 1];
  int i=0;
  xvars[i++]="fun";
  for (  String id2 : vars.keySet())   xvars[i++]=id2;
  E.xpeek('{',(x=E._x),null);
  E._env.push(vars);
  AST body=E.xpeek('}',E._x,ASTStatement.parse(E));
  if (body == null)   E.throwErr("Missing function body",x);
  E._env.pop();
  Type types[]=new Type[xvars.length];
  types[0]=body._t;
  for (int j=1; j < xvars.length; j++) {
    types[j]=vars.get(xvars[j]);
  }
  return new ASTFunc(xvars,types,body);
}
