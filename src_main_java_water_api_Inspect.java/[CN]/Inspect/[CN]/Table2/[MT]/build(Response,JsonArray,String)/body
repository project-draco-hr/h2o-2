{
  StringBuilder sb=new StringBuilder();
  if (array.size() == 0) {
    array=new JsonArray();
    JsonObject fake=new JsonObject();
    fake.addProperty(ROW,0);
    for (int i=0; i < _f.numCols(); ++i)     format(fake,_f,0,i);
    array.add(fake);
  }
  sb.append(header(array));
  JsonObject row=new JsonObject();
  row.addProperty(ROW,TYPE);
  for (int i=0; i < _f.numCols(); i++)   row.addProperty(_f._names[i],_f.vecs()[i].isEnum() ? ColType.Enum.toString() : _f.vecs()[i].isInt() ? ColType.Int.toString() : ColType.Real.toString());
  sb.append(ARRAY_HEADER_ROW_BUILDER.build(response,row,contextName));
  row.addProperty(ROW,MIN);
  for (int i=0; i < _f.numCols(); i++)   row.addProperty(_f._names[i],_f.vecs()[i].isEnum() ? Double.NaN : _f.vecs()[i].min());
  sb.append(ARRAY_HEADER_ROW_BUILDER.build(response,row,contextName));
  row.addProperty(ROW,MAX);
  for (int i=0; i < _f.numCols(); i++)   row.addProperty(_f._names[i],_f.vecs()[i].isEnum() ? Double.NaN : _f.vecs()[i].max());
  sb.append(ARRAY_HEADER_ROW_BUILDER.build(response,row,contextName));
  row.addProperty(ROW,CARDINALITY);
  for (int i=0; i < _f.numCols(); i++)   row.addProperty(_f._names[i],_f.vecs()[i].isEnum() ? _f.vecs()[i].cardinality() : Double.NaN);
  sb.append(ARRAY_HEADER_ROW_BUILDER.build(response,row,contextName));
  row.addProperty(ROW,FIRST_CHUNK);
  for (int i=0; i < _f.numCols(); i++)   row.addProperty(_f._names[i],_f.vecs()[i].chunkForChunkIdx(0).getClass().getSimpleName());
  sb.append(ARRAY_HEADER_ROW_BUILDER.build(response,row,contextName));
  if (_offset == INFO_PAGE) {
    for (int ci=0; ci < _f.vecs()[0].nChunks(); ci++) {
      String prefix=CHUNK + " " + ci+ " ";
      row.addProperty(ROW,prefix + TYPE);
      for (int i=0; i < _f.numCols(); i++)       row.addProperty(_f._names[i],_f.vecs()[i].chunkForChunkIdx(ci).getClass().getSimpleName());
      sb.append(defaultBuilder(row).build(response,row,contextName));
      row.addProperty(ROW,prefix + SIZE);
      for (int i=0; i < _f.numCols(); i++)       row.addProperty(_f._names[i],_f.vecs()[i].chunkForChunkIdx(ci).byteSize());
      sb.append(defaultBuilder(row).build(response,row,contextName));
    }
  }
 else {
    for (    JsonElement e : array) {
      Builder builder=response.getBuilderFor(contextName + "_ROW");
      if (builder == null)       builder=defaultBuilder(e);
      sb.append(builder.build(response,e,contextName));
    }
  }
  sb.append(footer(array));
  return sb.toString();
}
