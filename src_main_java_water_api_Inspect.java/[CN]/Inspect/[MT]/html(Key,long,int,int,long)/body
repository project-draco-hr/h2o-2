{
  String keyParam=KEY + "=" + key.toString();
  StringBuilder sb=new StringBuilder();
  sb.append("" + "<h3>" + "<a href='RemoveAck.html?" + keyParam + "'>"+ "<button class='btn btn-danger btn-mini'>X</button></a>"+ "&nbsp;&nbsp;"+ key.toString()+ "</h3>");
  if (_producer.valid() && _producer.value() != null) {
    Job job=Job.findJob(Key.make(_producer.value()));
    if (job != null)     sb.append("<div class='alert alert-success'>" + "<b>Produced in ").append(PrettyPrint.msecs(job.executionTime(),true)).append(".</b></div>");
  }
  sb.append("<div class='alert'>Set " + SetColumnNames.link(key,"Column Names") + "<br/>View "+ SummaryPage.link(key,"Summary")+ "<br/>Build models using "+ PCA.link(key,"PCA")+ ", "+ RF.link(key,"Random Forest")+ ", "+ GLM.link(key,"GLM")+ ", "+ GLMGrid.link(key,"GLM Grid Search")+ ", "+ KMeans.link(key,"KMeans")+ ", "+ KMeansGrid.link(key,"KMeansGrid")+ ", or "+ NeuralNet.link(key,NeuralNet.DOC_GET)+ "<br />"+ "Score data using "+ RFScore.link(key,"Random Forest")+ ", "+ GLMScore.link(KEY,key,0.0,"GLM")+ "</br><b>Download as</b> "+ DownloadDataset.link(key,"CSV")+ "</div>"+ "<p><b><font size=+1>"+ cols+ " columns"+ (bytesPerRow != 0 ? (", " + bytesPerRow + " bytes-per-row * "+ rows+ " rows = "+ PrettyPrint.bytes(bytes)) : "")+ "</font></b></p>");
  return sb.toString();
}
