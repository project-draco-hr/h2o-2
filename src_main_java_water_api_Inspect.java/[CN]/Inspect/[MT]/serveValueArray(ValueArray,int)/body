{
  if (_offset.value() > va._numrows)   return Response.error("Value only has " + va._numrows + " rows");
  JsonObject result=new JsonObject();
  result.addProperty(VALUE_TYPE,"parsed");
  result.addProperty(KEY,va._key.toString());
  result.addProperty(NUM_ROWS,va._numrows);
  result.addProperty(NUM_COLS,va._cols.length);
  result.addProperty(ROW_SIZE,va._rowsize);
  result.addProperty(VALUE_SIZE,va.length());
  JsonArray cols=new JsonArray();
  JsonArray rows=new JsonArray();
  final int col_limit=Math.min(max_column,va._cols.length);
  for (int i=0; i < col_limit; i++) {
    Column c=va._cols[i];
    JsonObject json=new JsonObject();
    json.addProperty(NAME,c._name);
    json.addProperty(OFFSET,c._off);
    json.addProperty(SIZE,Math.abs(c._size));
    json.addProperty(BASE,c._base);
    json.addProperty(SCALE,(int)c._scale);
    json.addProperty(MIN,c.isEnum() ? Double.NaN : c._min);
    json.addProperty(MAX,c.isEnum() ? Double.NaN : c._max);
    json.addProperty(MEAN,c.isEnum() ? Double.NaN : c._mean);
    json.addProperty(VARIANCE,c.isEnum() ? Double.NaN : c._sigma);
    json.addProperty(NUM_MISSING_VALUES,va._numrows - c._n);
    json.addProperty(TYPE,c.isEnum() ? "enum" : (c.isFloat() ? "float" : "int"));
    json.addProperty(ENUM_DOMAIN_SIZE,c.isEnum() ? c._domain.length : 0);
    cols.add(json);
  }
  if (_offset.value() != INFO_PAGE) {
    long endRow=Math.min(_offset.value() + _view.value(),va._numrows);
    long startRow=Math.min(_offset.value(),va._numrows - _view.value());
    for (long row=Math.max(0,startRow); row < endRow; ++row) {
      JsonObject obj=new JsonObject();
      obj.addProperty(ROW,row);
      for (int i=0; i < col_limit; ++i)       format(obj,va,row,i);
      rows.add(obj);
    }
  }
  result.add(COLS,cols);
  result.add(ROWS,rows);
  Response r=Response.done(result);
  r.setBuilder(ROOT_OBJECT,new ObjectBuilder(){
    @Override public String build(    Response response,    JsonObject object,    String contextName){
      String s=html(va._key,va._numrows,va._cols.length,va._rowsize,va.length());
      Table t=new Table(argumentsToJson(),_offset.value(),_view.value(),va,col_limit);
      s+=t.build(response,object.get(ROWS),ROWS);
      return s;
    }
  }
);
  r.setBuilder(ROWS + "." + ROW,new ArrayRowElementBuilder(){
    @Override public String elementToString(    JsonElement elm,    String contextName){
      String json=elm.getAsString();
      String html=_displayNames.get(json);
      return html != null ? html : RequestStatics.JSON2HTML(json);
    }
  }
);
  return r;
}
