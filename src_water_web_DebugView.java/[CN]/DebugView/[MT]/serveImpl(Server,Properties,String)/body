{
  RString response=new RString(html);
  int offset=0;
  try {
    offset=Integer.valueOf(args.getProperty("o","0"));
  }
 catch (  NumberFormatException e) {
  }
  H2O cloud=H2O.CLOUD;
  Key[] keys=H2O.keySet().toArray(new Key[0]);
  int lastIndex=keys.length;
  String prefix=args.getProperty("Prefix","");
  if (!prefix.isEmpty()) {
    int i=0;
    for (int j=0; j < keys.length; ++j) {
      if (keys[j].toString().startsWith(prefix)) {
        if (i != j) {
          Key s=keys[i];
          keys[i]=keys[j];
          keys[j]=s;
        }
        ++i;
      }
    }
    lastIndex=i;
  }
  formatPagination(offset,lastIndex,response);
  offset*=KEYS_PER_PAGE;
  int i=0;
  for (  Key key : keys) {
    if (i >= lastIndex)     break;
    if (offset > 0) {
      --offset;
      continue;
    }
    Value val=H2O.raw_get(key);
    if (val == null) {
      continue;
    }
    formatKeyRow(cloud,key,val,response);
    if (++i >= KEYS_PER_PAGE)     break;
  }
  response.replace("noOfKeys",lastIndex);
  response.replace("cloud_name",H2O.NAME);
  response.replace("node_name",H2O.SELF.toString());
  if (!prefix.isEmpty())   response.replace("pvalue","value='" + prefix + "'");
  return response.toString();
}
