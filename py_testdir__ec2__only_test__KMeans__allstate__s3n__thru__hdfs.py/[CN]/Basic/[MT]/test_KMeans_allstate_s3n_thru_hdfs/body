def test_KMeans_allstate_s3n_thru_hdfs(self):
    bucket = 'home-0xdiag-datasets'
    importFolderPath = 'allstate'
    csvFilename = 'train_set.csv'
    csvPathname = ((importFolderPath + '/') + csvFilename)
    timeoutSecs = 600
    trialMax = 3
    for trial in range(trialMax):
        trialStart = time.time()
        hex_key = (((csvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        parseResult = h2i.import_parse(bucket=bucket, path=csvPathname, schema='s3n', hex_key=hex_key, timeoutSecs=timeoutSecs, retryDelaySecs=10, pollTimeoutSecs=60)
        elapsed = (time.time() - start)
        print 'parse end on ', csvPathname, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseResult['destination_key']
        kwargs = {'cols': None, 'initialization': 'Furthest', 'k': 12, }
        start = time.time()
        kmeans = h2o_cmd.runKMeans(parseResult=parseResult, timeoutSecs=timeoutSecs, retryDelaySecs=2, pollTimeoutSecs=120, **kwargs)
        elapsed = (time.time() - start)
        print 'kmeans end on ', csvFilename, 'took', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
        h2o_kmeans.simpleCheckKMeans(self, kmeans, **kwargs)
        inspect = h2o_cmd.runInspect(None, key=kmeans['destination_key'])
        print h2o.dump_json(inspect)
        print 'Trial #', trial, 'completed in', (time.time() - trialStart), 'seconds.',
