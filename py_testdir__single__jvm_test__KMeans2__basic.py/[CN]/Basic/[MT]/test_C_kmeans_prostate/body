def test_C_kmeans_prostate(self):
    h2o.beta_features = True
    csvFilename = 'prostate.csv'
    print '\nStarting', csvFilename
    parseResult = h2i.import_parse(bucket='smalldata', path=('logreg/' + csvFilename), schema='local', hex_key=(csvFilename + '.hex'))
    expected = [([0.36, 66.44, 1.09, 2.21, 1.06, 10.84, 34.16, 6.31], 136, 46045), ([0.37, 65.77, 1.07, 2.23, 1.11, 10.49, 4.24, 6.31], 215, 36956), ([0.83, 66.17, 1.21, 2.86, 1.34, 73.3, 15.57, 7.31], 29, 33412)]
    allowedDelta = (0.1, 0.1, 0.1)
    bestError = None
    for trial in range(10):
        seed = random.randint(0, sys.maxint)
        seed = 7509839924844349324
        if h2o.beta_features:
            params = {'k': 3, 'initialization': 'PlusPlus', 'ignored_cols': 'ID', 'destination_key': 'prostate_k.hex', 'max_iter': 1000, 'seed': seed, }
        else:
            params = {'k': 3, 'initialization': 'PlusPlus', 'cols': 'CAPSULE, AGE, RACE, DPROS, DCAPS, PSA, VOL, GLEASON', 'destination_key': 'prostate_k.hex', 'max_iter': 100, 'seed': seed, }
        kwargs = params.copy()
        kmeans = h2o_cmd.runKMeans(parseResult=parseResult, timeoutSecs=5, **kwargs)
        (centers, tupleResultList) = h2o_kmeans.bigCheckResults(self, kmeans, csvFilename, parseResult, 'd', **kwargs)
        h2o_kmeans.compareResultsToExpected(self, tupleResultList, expected, allowedDelta, trial=trial)
        error = kmeans['model']['error']
        if ((not bestError) or (error < bestError)):
            print 'Found smaller error:', error
            bestError = error
            bestCenters = centers
            bestSeed = seed
            bestTrial = trial
    print 'bestTrial:', bestTrial
    print 'bestError:', bestError
    print 'bestCenters:', bestCenters
    print 'bestSeed:', bestSeed
