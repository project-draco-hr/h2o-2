def test_C_kmeans_prostate(self):
    h2o.beta_features = True
    csvFilename = 'prostate.csv'
    print '\nStarting', csvFilename
    parseResult = h2i.import_parse(bucket='smalldata', path=('logreg/' + csvFilename), schema='local', hex_key=(csvFilename + '.hex'))
    expected = [([0.37, 65.77, 1.07, 2.23, 1.11, 10.49, 4.24, 6.31], 0, 0), ([0.36, 66.44, 1.09, 2.21, 1.06, 10.84, 34.16, 6.31], 0, 0), ([0.83, 66.17, 1.21, 2.86, 1.34, 73.3, 15.57, 7.31], 0, 0)]
    allowedDelta = (0.1, 0.1, 0.1)
    for trial in range(2):
        if h2o.beta_features:
            params = {'k': 3, 'initialization': 'PlusPlus', 'ignored_cols': 'ID', 'destination_key': 'prostate_k.hex', 'max_iter': 100, 'seed': 265211114317615310, }
        else:
            params = {'k': 3, 'initialization': 'PlusPlus', 'cols': 'CAPSULE, AGE, RACE, DPROS, DCAPS, PSA, VOL, GLEASON', 'destination_key': 'prostate_k.hex', 'max_iter': 100, 'seed': 265211114317615310, }
        kwargs = params.copy()
        kmeans = h2o_cmd.runKMeans(parseResult=parseResult, timeoutSecs=5, **kwargs)
        (centers, tupleResultList) = h2o_kmeans.bigCheckResults(self, kmeans, csvFilename, parseResult, 'd', **kwargs)
        h2o_jobs.pollWaitJobs(timeoutSecs=300, pollTimeoutSecs=300, retryDelaySecs=5)
        h2o_kmeans.compareResultsToExpected(self, tupleResultList, expected, allowedDelta, trial=trial)
