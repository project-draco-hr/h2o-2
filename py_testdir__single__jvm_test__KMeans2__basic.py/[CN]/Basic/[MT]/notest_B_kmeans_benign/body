def notest_B_kmeans_benign(self):
    h2o.beta_features = True
    csvPathname = 'logreg'
    csvFilename = 'benign.csv'
    hex_key = (csvFilename + '.hex')
    print '\nStarting', csvFilename
    parseResult = h2i.import_parse(bucket='smalldata', path=((csvPathname + '/') + csvFilename), schema='local', hex_key=hex_key)
    expected = [([8.86, 2.43, 35.53, 0.31, 13.22, 1.47, 1.33, 20.06, 13.08, 0.53, 2.12, 128.61, 35.33, 1.57], 0, 0), ([33.47, 2.29, 50.92, 0.34, 12.82, 1.33, 1.36, 21.43, 13.3, 0.37, 2.52, 125.4, 43.91, 1.79], 0, 0), ([27.64, 2.87, 48.11, 0.09, 11.8, 0.98, 1.51, 21.02, 12.53, 0.58, 2.89, 171.27, 42.73, 1.53], 0, 0), ([26.0, 2.67, 46.67, 0.0, 13.0, 1.33, 1.67, 21.56, 11.44, 0.22, 2.89, 234.56, 39.22, 1.56], 0, 0)]
    for i in range(14):
        execExpr = ('%s[,%s] = is.na(%s[,%s]) ? 0.0 : %s[,%s]' % (hex_key, (i + 1), hex_key, (i + 1), hex_key, (i + 1)))
        h2e.exec_expr(execExpr=execExpr, resultKey=None, timeoutSecs=4)
    allowedDelta = (0.1, 0.1, 0.1)
    for trial in range(2):
        params = {'k': 4, 'initialization': 'PlusPlus', 'destination_key': 'benign_k.hex', 'max_iter': 100, }
        kwargs = params.copy()
        kmeans = h2o_cmd.runKMeans(parseResult=parseResult, timeoutSecs=5, **kwargs)
        (centers, tupleResultList) = h2o_kmeans.bigCheckResults(self, kmeans, csvFilename, parseResult, 'd', **kwargs)
        h2o_jobs.pollWaitJobs(timeoutSecs=300, pollTimeoutSecs=300, retryDelaySecs=5)
        h2o_kmeans.compareResultsToExpected(self, tupleResultList, expected, allowedDelta, trial=trial)
