{
  String title=(val instanceof GLMXValidation) ? "Cross Validation" : "Validation";
  sb.append("<h4>" + title + "</h4>");
  sb.append("<table class='table table-striped table-bordered table-condensed'>");
  final long null_dof=val.nobs - 1, res_dof=Math.max(0,val.nobs - sm.rank);
  sb.append("<tr><th>Degrees of freedom:</th><td>" + null_dof + " total (i.e. Null); "+ res_dof+ " Residual</td></tr>");
  sb.append("<tr><th>Null Deviance</th><td>" + val.null_deviance + "</td></tr>");
  sb.append("<tr><th>Residual Deviance</th><td>" + val.residual_deviance + "</td></tr>");
  sb.append("<tr><th>AIC</th><td>" + val.aic() + "</td></tr>");
  if (glm_model.glm.family == Family.binomial)   sb.append("<tr><th>AUC</th><td>" + DFORMAT.format(val.auc()) + "</td></tr>");
  sb.append("</table>");
  if (glm_model.glm.family == Family.binomial)   new AUC(val._cms,val.thresholds).toHTML(sb);
  if (val instanceof GLMXValidation) {
    GLMXValidation xval=(GLMXValidation)val;
    sb.append("<h4>Cross Validation Models</h4>");
    sb.append("<table class='table table-bordered table-condensed'>");
    sb.append("<tr><th>Model</th><th>nonzeros</th>");
    sb.append("<th>" + ((glm_model.glm.family == Family.binomial) ? "AUC" : "AIC") + "</th>");
    sb.append("<th>Deviance Explained</th>");
    sb.append("</tr>");
    int i=0;
    for (    Key k : xval.xval_models) {
      Value v=DKV.get(k);
      if (v == null)       continue;
      GLMModel m=v.get();
      sb.append("<tr>");
      sb.append("<td>" + GLMModelView.link("Model " + ++i,k) + "</td>");
      sb.append("<td>" + (m.rank() - 1) + "</td>");
      sb.append("<td>" + ((glm_model.glm.family == Family.binomial) ? format(m.auc()) : format(m.aic())) + "</td>");
      sb.append("<td>" + format(m.devExplained()) + "</td>");
      sb.append("</tr>");
    }
    sb.append("</table>");
  }
}
