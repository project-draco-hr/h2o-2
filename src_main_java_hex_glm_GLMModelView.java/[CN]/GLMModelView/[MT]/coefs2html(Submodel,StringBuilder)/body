{
  StringBuilder names=new StringBuilder();
  StringBuilder equation=new StringBuilder();
  StringBuilder vals=new StringBuilder();
  StringBuilder normVals=sm.norm_beta == null ? null : new StringBuilder();
  int[] sortedIds=new int[sm.beta.length];
  for (int i=0; i < sortedIds.length; ++i)   sortedIds[i]=i;
  final double[] b=sm.norm_beta == null ? sm.beta : sm.norm_beta;
  int r=sortedIds.length - 1;
  for (int i=1; i < r; ++i) {
    for (int j=1; j < r - i; ++j) {
      if (Math.abs(b[sortedIds[j - 1]]) < Math.abs(b[sortedIds[j]])) {
        int jj=sortedIds[j];
        sortedIds[j]=sortedIds[j - 1];
        sortedIds[j - 1]=jj;
      }
    }
  }
  String[] cNames=glm_model.coefficients_names;
  boolean first=true;
  int j=0;
  for (  int i : sortedIds) {
    names.append("<th>" + cNames[sm.idxs[i]] + "</th>");
    vals.append("<td>" + sm.beta[i] + "</td>");
    if (first) {
      equation.append(DFORMAT.format(sm.beta[i]));
      first=false;
    }
 else {
      equation.append(sm.beta[i] > 0 ? " + " : " - ");
      equation.append(DFORMAT.format(Math.abs(sm.beta[i])));
    }
    if (i < (cNames.length - 1))     equation.append("*x[" + cNames[i] + "]");
    if (sm.norm_beta != null)     normVals.append("<td>" + sm.norm_beta[i] + "</td>");
    ++j;
  }
  sb.append("<h4>Equation</h4>");
  RString eq=null;
switch (glm_model.glm.link) {
case identity:
    eq=new RString("y = %equation");
  break;
case logit:
eq=new RString("y = 1/(1 + Math.exp(-(%equation)))");
break;
case log:
eq=new RString("y = Math.exp((%equation)))");
break;
case inverse:
eq=new RString("y = 1/(%equation)");
break;
case tweedie:
eq=new RString("y = (%equation)^(1 -  )");
break;
default :
eq=new RString("equation display not implemented");
break;
}
eq.replace("equation",equation.toString());
sb.append("<div style='width:100%;overflow:scroll;'>");
sb.append("<div><code>" + eq + "</code></div>");
sb.append("<h4>Coefficients</h4><table class='table table-bordered table-condensed'>");
sb.append("<tr>" + names.toString() + "</tr>");
sb.append("<tr>" + vals.toString() + "</tr>");
sb.append("</table>");
if (sm.norm_beta != null) {
sb.append("<h4>Normalized Coefficients</h4>" + "<table class='table table-bordered table-condensed'>");
sb.append("<tr>" + names.toString() + "</tr>");
sb.append("<tr>" + normVals.toString() + "</tr>");
sb.append("</table>");
}
sb.append("</div>");
}
