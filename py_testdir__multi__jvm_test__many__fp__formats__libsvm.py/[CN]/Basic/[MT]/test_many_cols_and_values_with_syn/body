def test_many_cols_and_values_with_syn(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(1000, 10, 'cA', 30, 'sparse'), (100000, 100, 'cB', 30, 'sparse'), (1000, 10, 'cC', 30, 'sparse50'), (100, 100, 'cD', 30, 'sparse'), (100, 100, 'cE', 30, 'sparse50')]
    for (rowCount, colCount, key2, timeoutSecs, distribution) in tryList:
        for sel in [random.randint(0, 47)]:
            SEEDPERFILE = random.randint(0, sys.maxint)
            csvFilename = ('syn_%s_%s_%s_%s.csv' % (SEEDPERFILE, sel, rowCount, colCount))
            csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
            print 'Creating random', csvPathname
            synColSumDict = write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE, sel, distribution)
            selKey2 = ((key2 + '_') + str(sel))
            parseKey = h2o_cmd.parseFile(None, csvPathname, key2=selKey2, timeoutSecs=timeoutSecs)
            print csvFilename, 'parse time:', parseKey['response']['time']
            print "Parse result['destination_key']:", parseKey['destination_key']
            inspect = h2o_cmd.runInspect(None, parseKey['destination_key'])
            num_cols = inspect['num_cols']
            num_rows = inspect['num_rows']
            print ('\n' + csvFilename)
            goodX = h2o_glm.goodXFromColumnInfo(y=0, key=parseKey['destination_key'], timeoutSecs=300)
            h2e.exec_zero_list(zeroList)
            self.assertEqual(colCount, num_cols, msg=('generated %s cols, parsed to %s cols' % (colCount, num_cols)))
            colResultList = h2e.exec_expr_list_across_cols(None, exprList, selKey2, maxCol=num_cols, timeoutSecs=timeoutSecs)
            print '\n*************'
            print 'colResultList', colResultList
            print '*************'
            self.assertEqual(rowCount, num_rows, msg=('generated %s rows, parsed to %s rows' % (rowCount, num_rows)))
            print '\ncolResultList:', colResultList
            print '\nsynColSumDict:', synColSumDict
            for (k, v) in synColSumDict:
                self.assertTrue(((k >= 0) and (k < len(colResultList))))
                compare = float(colResultList[k])
                print '\n', good, '\n', compare
                self.assertEqual(good, compare, 'compare is not equal to good')
