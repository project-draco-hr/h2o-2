{
  UKV.put(dest(),new GLMModels(_lambdas.length * _alphas.length));
  H2OCountedCompleter fjtask=new H2OCountedCompleter(){
    @Override public void compute2(){
      if (_parallelFlag) {
        final int cloudsize=H2O.CLOUD._memary.length;
        int myId=H2O.SELF.index();
        int submitted=0, done=0;
        Future[] active=new GridTask[_parallelism];
        for (int job=0; job < _alphas.length; job++) {
          GridTask t=new GridTask(GLMGrid.this,job,true);
          if (submitted - done >= _parallelism) {
            try {
              active[done++ % _parallelism].get();
            }
 catch (            InterruptedException e) {
              throw Log.errRTExcept(e);
            }
catch (            ExecutionException e) {
              throw Log.errRTExcept(e);
            }
          }
          int nodeId=(myId + job) % cloudsize;
          active[submitted++ % _parallelism]=t;
          if (nodeId == myId)           t.fork();
 else           new RPC(H2O.CLOUD._memary[nodeId],t).addCompleter(t).call();
        }
      }
 else {
        for (int a=0; a < _alphas.length; a++) {
          GridTask t=new GridTask(GLMGrid.this,a,false);
          t.compute2();
        }
        remove();
      }
      tryComplete();
    }
  }
;
  super.start(fjtask);
  H2O.submitTask(fjtask);
}
