def test_mnist8m_RF_bench(self):
    overallWallStart = time.time()
    if (not os.path.exists('rfbench.csv')):
        output = open('rfbench.csv', 'w')
        output.write((','.join(csv_header) + '\n'))
    else:
        output = open('rfbench.csv', 'a')
    csvWrt = csv.DictWriter(output, fieldnames=csv_header, restval=None, dialect='excel', extrasaction='ignore', delimiter=',')
    try:
        java_heap_GB = h2o.nodes[0].java_heap_GB
        print 'Training file is: ', files['train']
        importFolderPath = 'mnist/mnist8m'
        csvPathname = ((importFolderPath + '/') + files['train'])
        hex_key = (files['train'] + '.hex')
        trainParseWallStart = time.time()
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, schema='local', hex_key=hex_key, timeoutSecs=3600, retryDelaySecs=5, pollTimeoutSecs=120)
        trainParseWallTime = (time.time() - trainParseWallStart)
        inspect = h2o.nodes[0].inspect(parseResult['destination_key'])
        row = {'java_heap_GB': java_heap_GB, 'dataset': 'mnist8m', 'nTrainRows': inspect['num_rows'], 'nCols': inspect['num_cols'], 'trainParseWallTime': trainParseWallTime, }
        kwargs = configs.copy()
        trainRFStart = time.time()
        rfView = h2o_cmd.runRF(parseResult=parseResult, rfView=True, timeoutSecs=3600, pollTimeoutSecs=60, retryDelaySecs=2, **kwargs)
        trainViewTime = (time.time() - trainRFStart)
        row.update({'trainViewTime': trainViewTime, })
        h2o_rf.simpleCheckRFView(None, rfView, **kwargs)
        modelKey = rfView['model_key']
        print 'Testing file is: ', files['test']
        importFolderPath = 'mnist/mnist8m'
        csvPathname = ((importFolderPath + '/') + files['test'])
        hex_key = (files['test'] + '.hex')
        testParseWallStart = time.time()
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, hex_key=hex_key, timeoutSecs=3600, retryDelaySecs=5, pollTimeoutSecs=120)
        testParseWallTime = (time.time() - testParseWallStart)
        inspect = h2o.nodes[0].inspect(parseResult['destination_key'])
        row.update({'nTestRows': inspect['num_rows'], })
        row.update({'testParseWallTime': testParseWallTime, })
        modelKey = rfView['model_key']
        kwargs = configs.copy()
        testRFStart = time.time()
        kwargs.update({'model_key': modelKey, 'ntree': 10, 'out_of_bag_error_estimate': 1, })
        rfView = h2o_cmd.runRFView(data_key=hex_key, timeoutSecs=3600, doSimpleCheck=False, **kwargs)
        testViewTime = (time.time() - testRFStart)
        pprint(rfView)
        errRate = rfView['confusion_matrix']['classification_error']
        row.update({'testViewTime': testViewTime, })
        overallWallTime = (time.time() - overallWallStart)
        row.update({'overallWallTime': overallWallTime, })
        row.update({'errRate': errRate, })
        print row
        csvWrt.writerow(row)
    finally:
        output.close()
