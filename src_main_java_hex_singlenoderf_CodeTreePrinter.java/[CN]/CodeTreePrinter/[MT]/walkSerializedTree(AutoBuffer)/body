{
  try {
    _dest.append("int classify(float fs[]) {\n");
    _dest.incrementIndent();
    new Tree.TreeVisitor<IOException>(tbits){
      public Tree.TreeVisitor leaf(      int tclass) throws IOException {
        String x=_classNames != null && tclass < _classNames.length ? String.format("return %s;\n",_classNames[tclass]) : String.format("return %d;\n",tclass);
        _dest.append(x);
        return this;
      }
      protected Tree.TreeVisitor pre(      int col,      float fcmp,      int off0,      int offl,      int offr) throws IOException {
        byte b=(byte)_ts.get1(off0);
        _dest.append(String.format("if( fs[%s] %s %f ) \n",colNameConstant(col),((b == 'E') ? "==" : "<="),fcmp)).incrementIndent();
        return this;
      }
      protected Tree.TreeVisitor mid(      int col,      float fcmp) throws IOException {
        _dest.decrementIndent().append("else\n").incrementIndent();
        return this;
      }
      protected Tree.TreeVisitor post(      int col,      float fcmp) throws IOException {
        _dest.decrementIndent();
        return this;
      }
    }
.visit();
    _dest.decrementIndent().append("}").flush();
  }
 catch (  IOException e) {
    throw new Error(e);
  }
  return this;
}
