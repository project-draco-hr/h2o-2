{
  Vec v;
  v=makeConSeq(0xCAFE,CHUNK_SZ);
  assertTrue(v.at(234) == 0xCAFE);
  assertTrue(v._espc.length == 2);
  assertTrue(v._espc[0] == 0 && v._espc[1] == CHUNK_SZ);
  v.remove(new Futures()).blockForPending();
  v=makeConSeq(0xCAFE,2 * CHUNK_SZ);
  assertTrue(v.at(234) == 0xCAFE);
  assertTrue(v.at(2 * CHUNK_SZ - 1) == 0xCAFE);
  assertTrue(v._espc.length == 3);
  assertTrue(v._espc[0] == 0 && v._espc[1] == CHUNK_SZ && v._espc[2] == CHUNK_SZ * 2);
  v.remove(new Futures()).blockForPending();
  v=makeConSeq(0xCAFE,2 * CHUNK_SZ + 1);
  assertTrue(v.at(234) == 0xCAFE);
  assertTrue(v.at(2 * CHUNK_SZ) == 0xCAFE);
  assertTrue(v._espc.length == 4);
  assertTrue(v._espc[0] == 0 && v._espc[1] == CHUNK_SZ && v._espc[2] == CHUNK_SZ * 2 && v._espc[3] == CHUNK_SZ * 2 + 1);
  v.remove(new Futures()).blockForPending();
  v=makeConSeq(0xCAFE,3 * CHUNK_SZ);
  assertTrue(v.at(234) == 0xCAFE);
  assertTrue(v.at(3 * CHUNK_SZ - 1) == 0xCAFE);
  assertTrue(v._espc.length == 4);
  assertTrue(v._espc[0] == 0 && v._espc[1] == CHUNK_SZ && v._espc[2] == CHUNK_SZ * 2 && v._espc[3] == CHUNK_SZ * 3);
  v.remove(new Futures()).blockForPending();
}
