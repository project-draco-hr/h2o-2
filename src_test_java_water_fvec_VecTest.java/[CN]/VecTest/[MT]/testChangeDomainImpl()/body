{
  ArrayList<Key> madeKeys=new ArrayList<Key>();
  try {
    final String[] oldDomain={"a","b","c"};
    Vec v=Vec.makeNewCons(1000,1,0,new String[][]{oldDomain})[0];
    madeKeys.add(v._key);
    Vec.Writer vw=v.open();
    for (long i=0; i < v.length(); ++i)     vw.set(i,i % 3);
    vw.close();
    Key reblancedKey=Key.make("reblanced");
    madeKeys.add(reblancedKey);
    RebalanceDataSet rbd=new RebalanceDataSet(new Frame(v),reblancedKey,100);
    H2O.submitTask(rbd);
    rbd.join();
    Frame rebalancedFrame=DKV.get(reblancedKey).get();
    new MRTask2(){
      @Override public void map(      Chunk c){
        assertTrue(Arrays.deepEquals(c._vec.domain(),oldDomain));
      }
    }
.doAll(rebalancedFrame);
    madeKeys.add(rebalancedFrame.lastVec()._key);
    final String[] newDomain=new String[]{"x","y","z"};
    rebalancedFrame.lastVec().changeDomain(newDomain);
    new MRTask2(){
      @Override public void map(      Chunk c){
        assertTrue(Arrays.deepEquals(c._vec.domain(),newDomain));
      }
    }
.doAll(rebalancedFrame);
  }
  finally {
    for (    Key k : madeKeys)     UKV.remove(k);
  }
}
