{
  int i=0, j=0, ignoredCnt=0;
  int[][] catLvls=new int[_cats][];
  int[] ignoredCols=MemoryManager.malloc4(_nums + _cats);
  while (i < cols.length && cols[i] < _catOffsets[_catOffsets.length - 1]) {
    int[] levels=MemoryManager.malloc4(_catOffsets[j + 1] - _catOffsets[j]);
    int k=0;
    while (i < cols.length && cols[i] < _catOffsets[j + 1])     levels[k++]=cols[i++] - _catOffsets[j];
    if (k > 0)     catLvls[j]=Arrays.copyOf(levels,k);
    ++j;
  }
  for (int k=0; k < catLvls.length; ++k)   if (catLvls[k] == null)   ignoredCols[ignoredCnt++]=k;
  if (ignoredCnt > 0) {
    int[][] c=new int[_cats - ignoredCnt][];
    int y=0;
    for (int x=0; x < catLvls.length; ++x)     if (catLvls[x] != null)     c[y++]=catLvls[x];
    catLvls=c;
  }
  int prev=j=0;
  for (; i < cols.length; ++i) {
    for (int k=prev; k < (cols[i] - numStart()); ++k) {
      ignoredCols[ignoredCnt++]=k + _cats;
      ++j;
    }
    prev=++j;
  }
  for (int k=prev; k < _nums; ++k)   ignoredCols[ignoredCnt++]=k + _cats;
  Frame f=new Frame(_adaptedFrame.names().clone(),_adaptedFrame.vecs().clone());
  if (ignoredCnt > 0)   f.remove(Arrays.copyOf(ignoredCols,ignoredCnt));
  return new DataInfo(f,catLvls,_responses,_standardize,_standardize_response,_nfolds,_foldId);
}
