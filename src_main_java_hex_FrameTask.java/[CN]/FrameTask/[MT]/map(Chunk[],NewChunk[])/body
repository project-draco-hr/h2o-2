{
  if (_job != null && _job.self() != null && !Job.isRunning(_job.self()))   throw new JobCancelledException();
  final int nrows=chunks[0]._len;
  final long off=chunks[0]._start;
  chunkInit();
  double[] nums=MemoryManager.malloc8d(_dinfo._nums);
  int[] cats=MemoryManager.malloc4(_dinfo._cats);
  double[] response=MemoryManager.malloc8d(_dinfo._responses);
  OUTER:   for (int r=0; r < nrows; ++r) {
    if ((_dinfo._nfolds > 0 && (r % _dinfo._nfolds) == _dinfo._foldId) || skip(off + r))     continue;
    for (    Chunk c : chunks)     if (c.isNA0(r))     continue OUTER;
    int i=0, ncats=0;
    for (; i < _dinfo._cats; ++i) {
      int c=(int)chunks[i].at80(r);
      if (c != 0)       cats[ncats++]=c + _dinfo._catOffsets[i] - 1;
    }
    final int n=chunks.length - _dinfo._responses;
    for (; i < n; ++i) {
      double d=chunks[i].at0(r);
      if (_dinfo._normMul != null)       d=(d - _dinfo._normSub[i - _dinfo._cats]) * _dinfo._normMul[i - _dinfo._cats];
      nums[i - _dinfo._cats]=d;
    }
    for (i=0; i < _dinfo._responses; ++i)     response[i]=chunks[chunks.length - _dinfo._responses + i].at0(r);
    if (outputs != null && outputs.length > 0)     processRow(nums,ncats,cats,response,outputs);
 else     processRow(nums,ncats,cats,response);
  }
  chunkDone();
}
