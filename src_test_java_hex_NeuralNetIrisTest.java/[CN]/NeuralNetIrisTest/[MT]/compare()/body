{
  float rate=0.01f;
  int epochs=1000;
  Layer[] ls=create(rate);
  NeuralNetMLPReference ref=new NeuralNetMLPReference();
  ref.init();
  Layer l=ls[1];
  for (int o=0; o < l._a.length; o++) {
    for (int i=0; i < l._in._a.length; i++)     ref._nn.ihWeights[i][o]=l._w[o * l._in._a.length + i];
    ref._nn.hBiases[o]=l._b[o];
  }
  l=ls[2];
  for (int o=0; o < l._a.length; o++) {
    for (int i=0; i < l._in._a.length; i++)     ref._nn.hoWeights[i][o]=l._w[o * l._in._a.length + i];
    ref._nn.oBiases[o]=l._b[o];
  }
  ref.train(epochs,rate);
  Trainer.Direct trainer=new Trainer.Direct(ls);
  trainer._batches=epochs * (int)_train.numRows();
  trainer._batch=1;
  trainer.run();
  float epsilon=1e-4f;
  for (int o=0; o < ls[2]._a.length; o++) {
    float a=ref._nn.outputs[o];
    float b=ls[2]._a[o];
    Assert.assertEquals(a,b,epsilon);
  }
  l=ls[1];
  for (int o=0; o < l._a.length; o++) {
    for (int i=0; i < l._in._a.length; i++) {
      float a=ref._nn.ihWeights[i][o];
      float b=l._w[o * l._in._a.length + i];
      Assert.assertEquals(a,b,epsilon);
    }
  }
  NeuralNet.Error train=NeuralNetScore.eval(ls,NeuralNet.EVAL_ROW_COUNT);
  ls[0]=new FrameInput(_test,false);
  ls[0].init(null,4);
  ls[1]._in=ls[0];
  NeuralNet.Error test=NeuralNetScore.eval(ls,NeuralNet.EVAL_ROW_COUNT);
  float trainAcc=ref._nn.Accuracy(ref._trainData);
  Assert.assertEquals(trainAcc,train.Value,epsilon);
  float testAcc=ref._nn.Accuracy(ref._testData);
  Assert.assertEquals(testAcc,test.Value,epsilon);
  Log.info("H2O and Reference equal, train: " + train + ", test: "+ test);
}
