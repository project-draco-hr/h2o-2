{
  LogCollectorTask[] collectors=new LogCollectorTask[H2O.CLOUD.size()];
  for (int i=0; i < collectors.length; i++) {
    collectors[i]=new LogCollectorTask();
    H2ONode node=H2O.CLOUD._memary[i];
    if (node == H2O.SELF)     H2O.submitTask(collectors[i]);
 else     RPC.call(node,collectors[i]);
  }
  long t1=System.currentTimeMillis();
  long timeout=20000;
  boolean done=false;
  while (!done && System.currentTimeMillis() - t1 < timeout) {
    done=true;
    for (int j=0; j < collectors.length; j++) {
      done=done && collectors[j].isDone();
    }
  }
  byte[][] results=new byte[collectors.length][];
  int j=0;
  for (int i=0; i < results.length; i++) {
    if (collectors[i].isDone()) {
      results[j]=collectors[i]._result;
      j++;
    }
  }
  results=Arrays.copyOf(results,j);
  String outputFileStem=getOutputLogStem();
  byte[] result=null;
  try {
    result=zipLogs(results,outputFileStem);
  }
 catch (  IOException e) {
    result=e.toString().getBytes();
  }
  NanoHTTPD.Response res=server.new Response(NanoHTTPD.HTTP_OK,NanoHTTPD.MIME_DEFAULT_BINARY,new ByteArrayInputStream(result));
  res.addHeader("Content-Length",Long.toString(result.length));
  res.addHeader("Content-Disposition","attachment; filename=" + outputFileStem + ".zip");
  return res;
}
