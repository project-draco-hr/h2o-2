def resultsCheckPCA(self, pca, **kwargs):
    pcaResult = pca
    print 'Checking that propVars sum to 1',
    propVars = pcaResult['pca_model']['propVar']
    sum_ = 1.0
    for (PC, propVar) in enumerate(propVars):
        sum_ -= propVar
    self.assertAlmostEqual(sum_, 0, msg='PropVar does not sum to 1.')
    print ' Good!'
    if ((pcaResult['pca_model']['parameters']['tolerance'] != 0.0) or (pcaResult['pca_model']['parameters']['standardize'] != True)):
        return
    print 'Checking that sdevs^2 sums to number of variables'
    sdevs = pcaResult['pca_model']['sdev']
    sumsdevs2 = sum([(s ** 2) for s in sdevs])
    sum_ = len(sdevs)
    for (PC, sdev) in enumerate(sdevs):
        sum_ -= (sdev ** 2)
    if (not ((sum_ - 0.5) < 0 < (sum_ + 0.5))):
        print 'sum(sdevs^2) are not within .5 of 0. sdevs incorrect? The difference between the number of variables and sum(sdevs^2) is: ', sum_
        print 'Perhaps the data was not standardized after all?'
        print 'These were the parameters used for pca: ', pcaResult['pca_model']['parameters']
        print 'Dumping out the standard deviations: '
        print sdevs
        print 'sum(sdevs^2) = ', sumsdevs2
        print 'Expected     = ', len(sdevs)
        print 'Difference   = ', sum_
        raise Exception('Standard Deviations are possibly incorrect!')
    print ' Good!'
    print 'Checking that the sum of square component loadings is 1 for each component.'
    print 'In symbols, we are checking: sum_j(a_ij)^2 == 1 for all i'
    pcs = pcaResult['pca_model']['eigVec']
    sums = [round(sum([(a ** 2) for a in eigenvector]), 5) for eigenvector in pcs]
    print 'Sum of the square PC loadings are: ', sums
    if (sums != [1 for i in range(len(pcs))]):
        raise Exception('Sum of the square loadings do not add up to 1 for at least one eigenvector!')
    print 'Good!'
