def find_folder_path_and_pattern(bucket, pathWithRegex):
    if ((bucket is not None) and re.match('/', pathWithRegex)):
        print 'You said bucket:', bucket, "so stripping incorrect leading '/' from", pathWithRegex
        pathWithRegex = pathWithRegex.lstrip('/')
    if (bucket is None):
        bucketPath = ''
    elif (bucket == '.'):
        bucketPath = os.getcwd()
    elif os.environ.get('H2O_BUCKETS_ROOT'):
        h2oBucketsRoot = os.environ.get('H2O_BUCKETS_ROOT')
        print 'Using H2O_BUCKETS_ROOT environment variable:', h2oBucketsRoot
        rootPath = os.path.abspath(h2oBucketsRoot)
        if (not os.path.exists(rootPath)):
            raise Exception(("H2O_BUCKETS_ROOT in env but %s doesn't exist." % rootPath))
        bucketPath = os.path.join(rootPath, bucket)
        if (not os.path.exists(bucketPath)):
            raise Exception(("H2O_BUCKETS_ROOT and path used to form %s which doesn't exist." % bucketPath))
    else:
        (head, tail) = os.path.split(os.path.abspath(bucket))
        print 'find_bucket looking upwards from', head, 'for', tail
        levels = 0
        while (not os.path.exists(os.path.join(head, tail))):
            print "Didn't find", tail, 'at', head
            head = os.path.split(head)[0]
            levels += 1
            if (levels == 10):
                raise Exception(('unable to find bucket: %s' % bucket))
        print 'Did find', tail, 'at', head
        bucketPath = os.path.join(head, tail)
    if (pathWithRegex is None):
        return (bucketPath, None)
    elif ('/' in pathWithRegex):
        (head, tail) = os.path.split(pathWithRegex)
        folderPath = os.path.abspath(os.path.join(bucketPath, head))
        if (not os.path.exists(folderPath)):
            raise Exception(("%s doesn't exist. %s under %s may be wrong?" % (folderPath, head, bucketPath)))
    else:
        folderPath = bucketPath
        tail = pathWithRegex
    print 'folderPath:', folderPath, 'tail:', tail
    return (folderPath, tail)
