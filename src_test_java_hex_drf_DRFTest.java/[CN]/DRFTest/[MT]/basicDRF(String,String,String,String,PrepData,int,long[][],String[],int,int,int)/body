{
  DRF drf=new DRF();
  Key destTrain=Key.make(hexnametrain);
  Key destTest=hexnametest != null ? Key.make(hexnametest) : null;
  Frame frTest=null, pred=null;
  DRFModel model=null;
  try {
    Frame frTrain=drf.source=parseFrame(destTrain,fnametrain);
    unifyFrame(drf,frTrain,prep);
    drf.classification=true;
    drf.ntrees=ntree;
    drf.max_depth=max_depth;
    drf.min_rows=1;
    drf.nbins=nbins;
    drf.mtries=-1;
    drf.sample_rate=0.66667f;
    drf.seed=(1L << 32) | 2;
    drf.destination_key=Key.make("DRF_model_4_" + hexnametrain);
    drf.invoke();
    model=UKV.get(drf.dest());
    assertCM(expCM,model.cms[model.cms.length - 1]._arr);
    Assert.assertEquals("Number of trees differs!",ntree,model.errs.length - 1);
    String[] cmDom=model._domains[model._domains.length - 1];
    Assert.assertArrayEquals("CM domain differs!",expRespDom,cmDom);
    frTest=fnametest != null ? parseFrame(destTest,fnametest) : null;
    pred=drf.score(frTest != null ? frTest : drf.source);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw t;
  }
 finally {
    drf.source.delete();
    UKV.remove(drf.response._key);
    drf.remove();
    if (frTest != null)     frTest.delete();
    if (model != null)     model.delete();
    if (pred != null)     pred.delete();
  }
}
