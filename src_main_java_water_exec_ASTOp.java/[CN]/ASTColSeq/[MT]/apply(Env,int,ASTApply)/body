{
  double by=1.0;
  double to=env.popDbl();
  double from=env.popDbl();
  double delta=to - from;
  if (delta == 0 && to == 0)   env.poppush(to);
 else {
    double n=delta / by;
    if (n < 0)     throw new IllegalArgumentException("wrong sign in 'by' argument");
 else     if (n > Double.MAX_VALUE)     throw new IllegalArgumentException("'by' argument is much too small");
    double dd=Math.abs(delta) / Math.max(Math.abs(from),Math.abs(to));
    if (dd < 100 * Double.MIN_VALUE)     env.poppush(from);
 else {
      Key k=new Vec.VectorGroup().addVec();
      Futures fs=new Futures();
      AppendableVec av=new AppendableVec(k);
      NewChunk nc=new NewChunk(av,0);
      int len=(int)n + 1;
      for (int r=0; r < len; r++)       nc.addNum(from + r * by);
      nc.close(0,fs);
      Vec vec=av.close(fs);
      fs.blockForPending();
      vec._domain=null;
      env.poppush(1,new Frame(new String[]{"C1"},new Vec[]{vec}),null);
    }
  }
}
