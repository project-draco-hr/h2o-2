{
  addToPendingCount(_env.peekAry().numCols() - 1);
  int nchks=0;
  for (int i=0; i < _argcnt; ++i)   nchks+=_env.ary(-(i + 1)).anyVec().nChunks();
  _espc=new long[nchks + 1];
  int coffset=_env.peekAry().anyVec().nChunks();
  long[] first_espc=_env.peekAry().anyVec()._espc;
  System.arraycopy(first_espc,0,_espc,0,first_espc.length);
  for (int i=1; i < _argcnt; ++i) {
    long roffset=_espc[coffset];
    long[] espc=_env.ary(-(i + 1)).anyVec()._espc;
    int j=1;
    for (; j < espc.length; j++)     _espc[coffset + j]=roffset + espc[j];
    coffset+=_env.ary(-(i + 1)).anyVec().nChunks();
  }
  Key[] keys=_env.peekAry().anyVec().group().addVecs(_env.peekAry().numCols());
  _vecs=new Vec[keys.length];
  String type;
  for (int i=0; i < _vecs.length; ++i)   _vecs[i]=new Vec(keys[i],_espc,null,(type=get_type(_env.peekAry().vec(i))).equals("UUID"),type.equals("time") ? (byte)3 : (byte)-1);
  for (int i=0; i < Math.min(_maxP,_vecs.length); ++i)   forkVecTask(i);
}
