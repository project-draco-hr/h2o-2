{
  Frame x=env.ary(-2);
  Vec xv=x.theVec("Argument #1 in Quantile contains more than 1 column.");
  Vec pv=env.ary(-1).theVec("Argument #2 in Quantile contains more than 1 column.");
  double p[]=new double[(int)pv.length()];
  for (int i=0; i < pv.length(); i++) {
    if ((p[i]=pv.at((long)i)) < 0 || p[i] > 1)     throw new IllegalArgumentException("Quantile: probs must be in the range of [0, 1].");
  }
  if (xv.isEnum()) {
    throw new IllegalArgumentException("Quantile: column type cannot be Enum.");
  }
  Vec res=pv.makeCon(Double.NaN);
  final int MAX_ITERATIONS=16;
  final int MAX_QBINS=1000;
  final boolean MULTIPASS=true;
  final int INTERPOLATION=7;
  final Quantiles[] qbins1=new Quantiles.BinTask2(MAX_QBINS,xv.min(),xv.max()).doAll(xv)._qbins;
  for (int i=0; i < p.length; i++) {
    double quantile=p[i];
    qbins1[0].finishUp(xv,new double[]{quantile},INTERPOLATION,MULTIPASS);
    if (qbins1[0]._done) {
      res.set(i,qbins1[0]._pctile[0]);
    }
 else {
      Quantiles[] qbinsM=new Quantiles.BinTask2(MAX_QBINS,qbins1[0]._newValStart,qbins1[0]._newValEnd).doAll(xv)._qbins;
      for (int iteration=2; iteration <= MAX_ITERATIONS; iteration++) {
        qbinsM[0].finishUp(xv,new double[]{quantile},INTERPOLATION,MULTIPASS);
        if (qbinsM[0]._done) {
          res.set(i,qbinsM[0]._pctile[0]);
          break;
        }
        qbinsM=new Quantiles.BinTask2(MAX_QBINS,qbinsM[0]._newValStart,qbinsM[0]._newValEnd).doAll(xv)._qbins;
      }
    }
  }
  res.chunkForChunkIdx(0).close(0,null);
  res.postWrite();
  env.poppush(argcnt,new Frame(new String[]{"Quantile"},new Vec[]{res}),null);
}
