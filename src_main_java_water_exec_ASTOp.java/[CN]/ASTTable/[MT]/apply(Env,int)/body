{
  int ncol;
  Frame fr=env.ary(-1);
  if ((ncol=fr.vecs().length) > 2)   throw new IllegalArgumentException("table does not apply to more than two cols.");
  for (int i=0; i < ncol; i++)   if (!fr.vecs()[i].isInt())   throw new IllegalArgumentException("table only applies to integer vectors.");
  String[][] domains=new String[ncol][];
  int[][] levels=new int[ncol][];
  for (int i=0; i < ncol; i++) {
    Vec v=fr.vecs()[i];
    levels[i]=new Vec.CollectDomain(v).doAll(new Frame(v)).domain();
    domains[i]=v.domain();
  }
  long[][] counts=new Tabularize(levels).doAll(fr)._counts;
  Key keys[]=Vec.VectorGroup.VG_LEN1.addVecs(counts.length + 1);
  Vec[] vecs=new Vec[counts.length + 1];
  String[] colnames=new String[counts.length + 1];
  AppendableVec v0=new AppendableVec(keys[0]);
  v0._domain=fr.vecs()[0].domain() == null ? null : fr.vecs()[0].domain().clone();
  NewChunk c0=new NewChunk(v0,0);
  for (int i=0; i < levels[0].length; i++)   c0.addNum((double)levels[0][i]);
  c0.close(0,null);
  vecs[0]=v0.close(null);
  colnames[0]="row.names";
  if (ncol == 1)   colnames[1]="Count";
  for (int level1=0; level1 < counts.length; level1++) {
    AppendableVec v=new AppendableVec(keys[level1 + 1]);
    NewChunk c=new NewChunk(v,0);
    v._domain=null;
    for (int level0=0; level0 < counts[level1].length; level0++)     c.addNum((double)counts[level1][level0]);
    c.close(0,null);
    vecs[level1 + 1]=v.close(null);
    if (ncol > 1) {
      colnames[level1 + 1]=domains[1] == null ? Integer.toString(levels[1][level1]) : domains[1][levels[1][level1]];
    }
  }
  env.pop(2);
  env.push(new Frame(colnames,vecs));
}
