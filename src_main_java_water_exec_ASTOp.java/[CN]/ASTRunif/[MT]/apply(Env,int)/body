{
  double n=env.popDbl();
  if (env._currentMasterFrame == null)   throw H2O.unimpl();
  System.out.println("current master frame = " + env._currentMasterFrame);
  Vec v=env._currentMasterFrame.anyVec();
  long[] espc=v.espc();
  long rem=(long)n;
  if (rem > espc[espc.length - 1])   throw H2O.unimpl();
  for (int i=0; i < espc.length; ++i) {
    if (rem <= espc[i]) {
      espc=Arrays.copyOf(espc,i + 1);
      break;
    }
  }
  espc[espc.length - 1]=rem;
  Vec randVec=new Vec(env._vg.addVecs(1)[0],espc);
  Futures fs=new Futures();
  DKV.put(randVec._key,randVec,fs);
  for (int i=0; i < espc.length - 1; ++i)   DKV.put(randVec.chunkKey(i),new C0DChunk(0,(int)(espc[i + 1] - espc[i])),fs);
  fs.blockForPending();
  final long seed=System.currentTimeMillis();
  new MRTask2(){
    @Override public void map(    Chunk c){
      Random rng=new Random(seed * c.cidx());
      for (int i=0; i < c._len; ++i)       c.set0(i,(float)rng.nextDouble());
    }
  }
.doAll(randVec);
  env.pop();
  env.push(new Frame(new String[]{"rnd"},new Vec[]{randVec}));
}
