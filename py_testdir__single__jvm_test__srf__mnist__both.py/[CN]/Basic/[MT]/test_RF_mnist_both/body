def test_RF_mnist_both(self):
    importFolderPath = 'mnist'
    csvFilelist = [('mnist_training.csv.gz', 'mnist_testing.csv.gz', 600, None, '*mnist*gz'), ('mnist_training.csv.gz', 'mnist_testing.csv.gz', 600, None, '*mnist*gz')]
    (importFolderResult, importPattern) = h2i.import_only(bucket='home-0xdiag-datasets', path=(importFolderPath + '/*'))
    if ('files' in importFolderResult):
        succeededList = importFolderResult['files']
    else:
        succeededList = importFolderResult['succeeded']
    self.assertGreater(len(succeededList), 1, 'Should see more than 1 files in the import?')
    print '\nTrying StoreView after the import folder'
    h2o_cmd.runStoreView(timeoutSecs=30)
    trial = 0
    allDelta = []
    for (trainCsvFilename, testCsvFilename, timeoutSecs, rfSeed, parsePattern) in csvFilelist:
        trialStart = time.time()
        testKey2 = (((testCsvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=((importFolderPath + '/') + testCsvFilename), hex_key=testKey2, timeoutSecs=timeoutSecs)
        elapsed = (time.time() - start)
        print 'parse end on ', testCsvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseResult['destination_key']
        print "We won't use this pruning of x on test data. See if it prunes the same as the training"
        y = 0
        print 'y:'
        x = h2o_glm.goodXFromColumnInfo(y, key=parseResult['destination_key'], timeoutSecs=300)
        print 'Use multi-file parse to grab both the mnist_testing.csv.gz and mnist_training.csv.gz for training'
        trainKey2 = (((trainCsvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=((importFolderPath + '/') + parsePattern), hex_key=trainKey2, timeoutSecs=timeoutSecs)
        elapsed = (time.time() - start)
        print 'parse end on ', trainCsvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseResult['destination_key']
        ntree = 25
        params = {'response': 0, 'num_trees': ntree, 'mtry': 28, 'max_depth': 2147483647, 'select_stat_type': 'ENTROPY', 'sampling_strategy': 'RANDOM', 'sample': 0.67, 'oobee': 1, 'destination_key': 'RF_model', 'bin_limit': 1024, }
        if (rfSeed is None):
            params['seed'] = random.randint(0, sys.maxint)
        else:
            params['seed'] = rfSeed
        print 'RF seed:', params['seed']
        kwargs = params.copy()
        print 'Trying rf'
        timeoutSecs = 1800
        start = time.time()
        rfView = h2o_cmd.runSpeeDRF(parseResult=parseResult, timeoutSecs=timeoutSecs, pollTimeoutSecs=180, retryDelaySecs=2, **kwargs)
        elapsed = (time.time() - start)
        print 'RF completed in', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        h2o_rf.simpleCheckRFView(None, rfView, **params)
        modelKey = rfView['model_key']
        start = time.time()
        kwargs = {'response_variable': y, }
        rfView = h2o_cmd.runRFView(data_key=testKey2, model_key=modelKey, ntree=ntree, out_of_bag_error_estimate=0, timeoutSecs=180, pollTimeoutSecs=180, noSimpleCheck=False, **kwargs)
        elapsed = (time.time() - start)
        print 'RFView in', elapsed, 'secs', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        (classification_error, classErrorPctList, totalScores) = h2o_rf.simpleCheckRFView(None, rfView, **params)
        print 'classification error is expected to be low because we included the test data in with the training!'
        self.assertAlmostEqual(classification_error, 0.0003, delta=0.0003, msg=('Classification error %s differs too much' % classification_error))
        leaves = rfView['trees']['leaves']
        leavesExpected = {'min': 4996, 'mean': 5064.1, 'max': 5148, }
        for l in leaves:
            delta = (((leaves[l] - leavesExpected[l]) / leaves[l]) * 100)
            d = ('seed: %s %s leaves: %s expected: %s pct. different %s' % (params['seed'], l, leaves[l], leavesExpected[l], delta))
            print d
            allDelta.append(d)
        depth = rfView['trees']['depth']
        depthExpected = {'min': 21, 'mean': 23.8, 'max': 25, }
        for l in depth:
            delta = (((depth[l] - depthExpected[l]) / leaves[l]) * 100)
            d = ('seed: %s %s depth: %s expected: %s pct. different %s' % (params['seed'], l, depth[l], depthExpected[l], delta))
            print d
            allDelta.append(d)
        start = time.time()
        predict = h2o.nodes[0].generate_predictions(model_key=modelKey, data_key=testKey2, timeoutSecs=timeoutSecs)
        elapsed = (time.time() - start)
        print 'generate_predictions in', elapsed, 'secs', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
    print '\nShowing the results again from all the trials, to see variance'
    for d in allDelta:
        print d
