def test_1ktrees_job_cancel_many_fvec(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    for x in [1000]:
        shCmdString = ((((('perl ' + h2o.find_file('syn_scripts/parity.pl')) + ' 128 4 ') + str(x)) + ' quad ') + SYNDATASETS_DIR)
        h2o.spawn_cmd_and_wait('parity.pl', shCmdString.split(), 4)
        csvFilename = (('parity_128_4_' + str(x)) + '_quad.data')
    csvFilename = (('parity_128_4_' + str(1000)) + '_quad.data')
    csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
    hex_key = (csvFilename + '.hex')
    parseResult = h2o_cmd.parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=30)
    print 'kick off jobs, then cancel them'
    for trial in range(1, 50):
        delay = random.uniform(0, 1)
        time.sleep(delay)
        h2o.verboseprint('Trial', trial)
        start = time.time()
        h2o_cmd.runRF(parseResult=parseResult, trees=trial, max_depth=50, rfView=False, noPoll=True, timeoutSecs=30, retryDelaySecs=0.25)
        print 'RF #', trial, 'started on ', csvFilename, 'took', (time.time() - start), 'seconds'
        h2o.check_sandbox_for_errors()
    rfView = h2o_cmd.runRF(parseResult=parseResult, trees=trial, max_depth=50, rfView=False, noPoll=False, timeoutSecs=600, retryDelaySecs=3)
    (classification_error, classErrorPctList, totalScores) = h2o_rf.simpleCheckRFView(rfv=rfView, ntree=trial)
