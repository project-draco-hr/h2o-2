def test_sum(self):
    print 'Replicating covtype.data by 2x for results comparison to 1x'
    filename1x = 'covtype.data'
    pathname1x = h2o.find_dataset((('UCI/UCI-large/covtype' + '/') + filename1x))
    filename2x = 'covtype_2x.data'
    pathname2x = ((SYNDATASETS_DIR + '/') + filename2x)
    h2o_util.file_cat(pathname1x, pathname1x, pathname2x)
    csvAll = [(pathname1x, 'cA', 5, 1), (pathname2x, 'cB', 5, 2), (pathname2x, 'cC', 5, 2)]
    h2b.browseTheCloud()
    lenNodes = len(h2o.nodes)
    firstDone = False
    for (csvPathname, key2, timeoutSecs, resultMult) in csvAll:
        parseKey = h2o_cmd.parseFile(csvPathname=csvPathname, key2=key2, timeoutSecs=2000)
        print "Parse result['Key']:", parseKey['destination_key']
        inspect = h2o_cmd.runInspect(None, parseKey['destination_key'])
        print ('\n' + csvPathname)
        h2o_exec.exec_zero_list(zeroList)
        colResultList = h2o_exec.exec_expr_list_across_cols(lenNodes, exprList, key2, maxCol=54, timeoutSecs=timeoutSecs)
        print '\ncolResultList', colResultList
        if (not firstDone):
            colResultList0 = list(colResultList)
            good = [float(x) for x in colResultList0]
            firstDone = True
        else:
            print '\n', colResultList0, '\n', colResultList
            compare = [(float(x) / resultMult) for x in colResultList]
            print '\n', good, '\n', compare
            self.assertEqual(good, compare, 'compare is not equal to good (first try * resultMult)')
