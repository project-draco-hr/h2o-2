def main(argv):
    '\n    Main program.\n\n    @return: none\n    '
    global g_script_name
    global g_nodes_in_cloud
    global g_output_dir
    global g_test_to_run
    global g_test_list_file
    global g_test_group
    global g_runner
    global g_wipe_output_dir
    g_script_name = os.path.basename(argv[0])
    test_root_dir = os.path.dirname(os.path.realpath(__file__))
    test_root_dir = os.path.join(test_root_dir, 'tests')
    g_output_dir = os.path.join(os.path.dirname(test_root_dir), str('results'))
    test_root_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), 'tests')
    h2o_jar = os.path.abspath(os.path.join(os.path.join(os.path.join(os.path.join(test_root_dir, '..'), '..'), 'target'), 'h2o.jar'))
    parse_args(argv)
    if g_wipe_output_dir:
        wipe_output_dir()
    g_runner = PerfRunner(test_root_dir, g_output_dir, g_nodes_in_cloud, g_jvm_xmx, h2o_jar, g_use_cloud, g_use_ip, g_use_port, g_base_port)
    g_runner.build_test_list()
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    if (not os.path.exists(h2o_jar)):
        print ''
        print ('ERROR: H2O jar not found: ' + h2o_jar)
        print ''
        sys.exit(1)
    g_runner.run_tests()
    g_runner.report_summary()
