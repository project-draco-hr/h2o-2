def test_rf_covtype_train_full_fvec(self):
    csvFilename = 'covtype.data'
    csvPathname = ('standard/' + csvFilename)
    parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, schema='put', hex_key=(csvFilename + '.hex'), timeoutSecs=180)
    for trial in range(1):
        kwargs = paramDict
        timeoutSecs = (kwargs['ntrees'] * 60)
        start = time.time()
        print 'Note train.csv is used for both train and validation'
        rfv = h2o_cmd.runRF(parseResult=parseResult, timeoutSecs=timeoutSecs, noPoll=True, **kwargs)
        h2o_jobs.pollStatsWhileBusy(timeoutSecs=timeoutSecs, retryDelaySecs=5)
        elapsed = (time.time() - start)
        print 'RF end on ', csvPathname, 'took', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
        job_key = rfv['job_key']
        model_key = rfv['destination_key']
        rfv = h2o_cmd.runRFView(data_key=parseResult['destination_key'], model_key=model_key, timeoutSecs=timeoutSecs, retryDelaySecs=1)
        (classification_error, classErrorPctList, totalScores) = h2o_rf.simpleCheckRFView(rfv=rfv)
        self.assertLess(classification_error, 4.8, ('train.csv should have full classification error: %s < 4.8' % classification_error))
        print 'Trial #', trial, 'completed'
