def test_GLM2_many_cols_real(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(100, 1000, 'cA', 100), (100, 3000, 'cB', 300)]
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + str(SEEDPERFILE)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print 'Creating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        start = time.time()
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=60)
        elapsed = (time.time() - start)
        print "Parse result['destination_key']:", parseResult['destination_key']
        algo = 'Parse'
        l = '{:d} jvms, {:d}GB heap, {:s} {:s} {:6.2f} secs'.format(len(h2o.nodes), tryHeap, algo, csvFilename, elapsed)
        print l
        h2o.cloudPerfH2O.message(l)
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvFilename)
        y = colCount
        kwargs = {'response': y, 'max_iter': 2, 'family': 'binomial', 'lambda': 0.0001, 'alpha': 0.6, 'n_folds': 1, 'beta_epsilon': 0.0001, }
        start = time.time()
        glm = h2o_cmd.runGLM(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
        elapsed = (time.time() - start)
        h2o.check_sandbox_for_errors()
        print 'glm end on ', csvPathname, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        h2o_glm.simpleCheckGLM(self, glm, None, **kwargs)
        algo = 'GLM '
        l = '{:d} jvms, {:d}GB heap, {:s} {:s} {:6.2f} secs'.format(len(h2o.nodes), tryHeap, algo, csvFilename, elapsed)
        print l
        h2o.cloudPerfH2O.message(l)
