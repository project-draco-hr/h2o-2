{
  JsonObject res=new JsonObject();
  try {
    ValueArray ary=ServletUtil.check_array(p,"Key");
    int[] yarr=parseVariableExpression(ary,p.getProperty("Y"));
    if (yarr.length != 1)     throw new GLMInputException("Y has to refer to exactly one column!");
    int Y=yarr[0];
    if (0 > Y || Y >= ary._cols.length)     throw new GLMInputException("invalid Y value, column " + Y + " does not exist!");
    int[] X=null;
    if (p.containsKey("X") && ((p.getProperty("X") == null) || (p.getProperty("X").isEmpty())))     p.remove("X");
    if (p.containsKey("X"))     X=parseVariableExpression(ary,p.getProperty("X"));
 else {
      X=new int[ary._cols.length - 1];
      int idx=0;
      for (int i=0; i < ary._cols.length; ++i) {
        if (i != Y)         X[idx++]=i;
      }
    }
    int[] xComp=(p.containsKey("-X")) ? parseVariableExpression(ary,p.getProperty("-X")) : new int[0];
    Arrays.sort(xComp);
    int n=X.length;
    for (int i=0; i < X.length; ++i) {
      if (X[i] == Y) {
        X[i]=-1;
        --n;
        continue;
      }
      for (int j=0; j < xComp.length; ++j) {
        if (xComp[j] == X[i]) {
          --n;
          X[i]=-1;
        }
      }
    }
    if (n < 1) {
      res.addProperty("error","Invalid input: no input columns specified");
      return res;
    }
    int[] columns=new int[n + 1];
    int idx=0;
    for (int i=0; i < X.length; ++i)     if (X[i] != -1)     columns[idx++]=X[i];
    columns[n]=Y;
    for (    int x : columns)     if (0 > x || x >= ary._cols.length) {
      res.addProperty("error","Invalid input: column " + x + " does not exist!");
      return res;
    }
    res.addProperty("key",ary._key.toString());
    res.addProperty("h2o",H2O.SELF.toString());
    GLMModel m=new GLMModel(ary,columns,getLSMSolver(p),getGLMParams(p),null);
    if (m.isSolved())     m.validateOn(ary,null,thresholds);
    res.add("GLMModel",m.toJson());
    if (m.isSolved() && p.containsKey("xval")) {
      int fold=getIntArg(p,"xval",10);
      res.add("xval",m.xvalidate(ary,fold,thresholds).toJson());
    }
  }
 catch (  GLMInputException e1) {
    res.addProperty("error","Invalid input:" + e1.getMessage());
  }
  return res;
}
