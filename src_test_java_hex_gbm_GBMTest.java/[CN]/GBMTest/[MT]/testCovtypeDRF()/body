{
  File file=TestUtil.find_test_file("../datasets/UCI/UCI-large/covtype/covtype.data");
  if (file == null)   return;
  Key fkey=NFSFileVec.make(file);
  Key dest=Key.make("cov1.hex");
  Frame fr=ParseDataset2.parse(dest,new Key[]{fkey});
  UKV.remove(fkey);
  System.out.println("Parsed into " + fr);
  for (int i=0; i < fr._vecs.length; i++)   System.out.println("Vec " + i + " = "+ fr._vecs[i]);
  try {
    assertEquals(581012,fr._vecs[0].length());
    Vec c0=fr.firstReadable();
    int N=c0.nChunks();
    H2ONode h2o=c0.chunkKey(0).home_node();
    boolean found=false;
    for (int j=1; j < N; j++)     if (h2o != c0.chunkKey(j).home_node())     found=true;
    assertTrue("Expecting to find distribution",found || H2O.CLOUD.size() == 1);
    int mtrys=Math.max((int)Math.sqrt(fr.numCols()),1);
    long seed=(1L << 32) | 2;
    DRF drf=DRF.start(DRF.makeKey(),fr,50,5,mtrys,0.67,seed);
    drf.get();
    UKV.remove(drf.destination_key);
  }
  finally {
    UKV.remove(dest);
  }
}
