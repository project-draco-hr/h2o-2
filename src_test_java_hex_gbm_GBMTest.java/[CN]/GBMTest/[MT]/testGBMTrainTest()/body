{
  File file1=TestUtil.find_test_file("..//classifcation1Train.txt");
  if (file1 == null)   return;
  Key fkey1=NFSFileVec.make(file1);
  Key dest1=Key.make("train.hex");
  File file2=TestUtil.find_test_file("..//classification1Test.txt");
  Key fkey2=NFSFileVec.make(file2);
  Key dest2=Key.make("test.hex");
  GBM gbm=null;
  Frame fr=null, fpreds=null;
  try {
    gbm=new GBM();
    fr=ParseDataset2.parse(dest1,new Key[]{fkey1});
    UKV.remove(fkey1);
    UKV.remove(fr.remove("agentId")._key);
    gbm.response=fr.remove("outcome");
    gbm.source=fr;
    gbm.ntrees=5;
    gbm.max_depth=10;
    gbm.learn_rate=0.2f;
    gbm.min_rows=10;
    gbm.nbins=100;
    gbm.run();
    Frame ftest=ParseDataset2.parse(dest2,new Key[]{fkey2});
    UKV.remove(fkey2);
    fpreds=gbm.score(ftest);
    ConfusionMatrix CM=new ConfusionMatrix();
    CM.actual=ftest;
    CM.vactual=ftest.vecs()[ftest.find("outcome")];
    CM.predict=fpreds;
    CM.vpredict=fpreds.vecs()[fpreds.find("predict")];
    CM.serve();
    long cm[][]=CM.cm;
    long acts[]=new long[cm.length];
    long preds[]=new long[cm[0].length];
    for (int a=0; a < cm.length; a++) {
      long sum=0;
      for (int p=0; p < cm[a].length; p++) {
        sum+=cm[a][p];
        preds[p]+=cm[a][p];
      }
      acts[a]=sum;
    }
    String adomain[]=ConfusionMatrix.show(acts,CM.vactual.domain());
    String pdomain[]=ConfusionMatrix.show(preds,CM.vpredict.domain());
    StringBuilder sb=new StringBuilder();
    sb.append("Act/Prd\t");
    for (    String s : pdomain)     if (s != null)     sb.append(s).append('\t');
    sb.append("Error\n");
    long terr=0;
    for (int a=0; a < cm.length; a++) {
      if (adomain[a] == null)       continue;
      sb.append(adomain[a]).append('\t');
      long correct=0;
      for (int p=0; p < pdomain.length; p++) {
        if (pdomain[p] == null)         continue;
        if (adomain[a].equals(pdomain[p]))         correct=cm[a][p];
        sb.append(cm[a][p]).append('\t');
      }
      long err=acts[a] - correct;
      terr+=err;
      sb.append(String.format("%5.3f = %d / %d\n",(double)err / acts[a],err,acts[a]));
    }
    sb.append("Totals\t");
    for (int p=0; p < pdomain.length; p++)     if (pdomain[p] != null)     sb.append(preds[p]).append("\t");
    sb.append(String.format("%5.3f = %d / %d\n",(double)terr / CM.vactual.length(),terr,CM.vactual.length()));
    System.out.println(sb);
  }
  finally {
    UKV.remove(dest1);
    UKV.remove(fkey2);
    UKV.remove(dest2);
    if (gbm != null) {
      UKV.remove(gbm.dest());
      UKV.remove(gbm.response._key);
      gbm.remove();
    }
    if (fr != null)     fr.remove();
    if (fpreds != null)     fpreds.remove();
  }
}
