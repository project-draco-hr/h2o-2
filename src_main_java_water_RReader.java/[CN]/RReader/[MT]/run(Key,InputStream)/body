{
  try {
    DataInputStream in=new DataInputStream(new GZIPInputStream(stream));
    header(in);
    HashMap<Object,String[]> attribs=new HashMap<Object,String[]>();
    Object value=read(in,attribs);
    Object[] values=(Object[])((Object[])value)[0];
    String[] classes=(String[])values[INDEX_CLASSES];
    Object[] forest=(Object[])values[INDEX_FOREST];
    int[] jump=(int[])forest[FOREST_MAX_TREE];
    double[] count=(double[])forest[FOREST_COUNT];
    int num_trees=(int)count[0];
    String[] headers=attribs.get(forest[FOREST_COLUMNS]);
    Key[] keys=new Key[num_trees];
    for (int i=0; i < num_trees; i++) {
      AutoBuffer buffer=build(classes,forest,jump[0],i);
      Key key=Key.make();
      keys[i]=key;
      DKV.put(key,new Value(key,buffer.buf()));
    }
    RFModel model=new RFModel(dest,headers,classes,keys,1,100.0f);
    model.delete_and_lock(null).unlock();
  }
 catch (  Exception ex) {
    Log.err(ex);
    UKV.put(dest,new Job.Fail(ex.toString()));
  }
}
