def test_parse_time(self):
    SEED = random.randint(0, sys.maxint)
    random.seed(SEED)
    print '\nUsing random seed:', SEED
    SYNDATASETS_DIR = h2o.make_syn_dir()
    csvFilename = 'syn_time.csv'
    csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
    headerData = None
    colCount = 6
    rowData = rand_rowData(colCount)
    rowCount = 1000
    write_syn_dataset(csvPathname, rowCount, headerData, rowData)
    for trial in range(20):
        rowData = rand_rowData()
        key = ((csvFilename + '_') + str(trial))
        key2 = (((csvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        parseKeyA = h2o_cmd.parseFile(csvPathname=csvPathname, key=key, key2=key2)
        print '\nA trial #', trial, 'parse end on ', csvFilename, 'took', (time.time() - start), 'seconds'
        inspect = h2o_cmd.runInspect(key=key2)
        missingValuesListA = h2o_cmd.infoFromInspect(inspect, csvPathname)
        print 'missingValuesListA', missingValuesListA
        num_colsA = inspect['num_cols']
        num_rowsA = inspect['num_rows']
        row_sizeA = inspect['row_size']
        value_size_bytesA = inspect['value_size_bytes']
        self.assertEqual(missingValuesListA, [], 'missingValuesList should be empty')
        self.assertEqual(num_colsA, colCount)
        self.assertEqual(num_rowsA, rowCount)
        csvDownloadPathname = (SYNDATASETS_DIR + '/csvDownload.csv')
        h2o.nodes[0].csv_download(key=key2, csvPathname=csvDownloadPathname)
        h2o.nodes[0].remove_key(key2)
        start = time.time()
        parseKeyB = h2o_cmd.parseFile(csvPathname=csvDownloadPathname, key=key, key2=key2)
        print 'B trial #', trial, 'parse end on ', csvFilename, 'took', (time.time() - start), 'seconds'
        inspect = h2o_cmd.runInspect(key=key2)
        missingValuesListB = h2o_cmd.infoFromInspect(inspect, csvPathname)
        print 'missingValuesListB', missingValuesListB
        num_colsB = inspect['num_cols']
        num_rowsB = inspect['num_rows']
        row_sizeB = inspect['row_size']
        value_size_bytesB = inspect['value_size_bytes']
        self.assertEqual(missingValuesListA, missingValuesListB, 'missingValuesList mismatches after re-parse of downloadCsv result')
        self.assertEqual(num_colsA, num_colsB, 'num_cols mismatches after re-parse of downloadCsv result')
        self.assertEqual(num_rowsA, num_rowsB, ('num_rowsA: %s num_rowsB: %s mismatch after re-parse of downloadCsv result' % (num_rowsA, num_rowsB)))
        self.assertEqual(row_sizeA, row_sizeB, 'row_size mismatches after re-parse of downloadCsv result')
        self.assertEqual(value_size_bytesA, value_size_bytesB, 'value_size_bytes mismatches after re-parse of downloadCsv result')
        h2o.check_sandbox_for_errors()
