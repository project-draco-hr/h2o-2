{
  if (_vec != null)   return _vec;
  int nchunk=_espc.length;
  while (nchunk > 0 && _espc[nchunk - 1] == 0)   nchunk--;
  DKV.remove(chunkKey(nchunk));
  boolean hasNumber=false, hasEnum=false;
  for (int i=0; i < nchunk; ++i)   if (_chunkTypes[i] == NUMBER) {
    hasNumber=true;
  }
 else   if (_chunkTypes[i] == ENUM)   hasEnum=true;
  if (hasNumber && hasEnum) {
    for (int i=0; i < nchunk; ++i)     if (_chunkTypes[i] == ENUM)     DKV.put(chunkKey(i),new C0DChunk(Double.NaN,(int)_espc[i]),fs);
  }
  long espc[]=new long[nchunk + 1];
  long x=0;
  for (int i=0; i < nchunk; i++) {
    espc[i]=x;
    x+=_espc[i];
  }
  espc[nchunk]=x;
  _vec=new Vec(_key,espc);
  if (shouldBeEnum())   _vec._domain=new String[0];
  DKV.put(_key,_vec,fs);
  return _vec;
}
