def test_RF_mnist_reals_fvec(self):
    h2o.beta_features = True
    importFolderPath = 'mnist'
    csvFilelist = [('mnist_reals_training.csv.gz', 'mnist_reals_testing.csv.gz', 600)]
    trial = 0
    for (trainCsvFilename, testCsvFilename, timeoutSecs) in csvFilelist:
        trialStart = time.time()
        testKey2 = (((testCsvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=((importFolderPath + '/') + testCsvFilename), hex_key=testKey2, timeoutSecs=timeoutSecs)
        elapsed = (time.time() - start)
        print 'parse end on ', testCsvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseResult['destination_key']
        print "We won't use this pruning of x on test data. See if it prunes the same as the training"
        y = 0
        print 'y:'
        x = h2o_glm.goodXFromColumnInfo(y, key=parseResult['destination_key'], timeoutSecs=300)
        trainKey2 = (((trainCsvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=((importFolderPath + '/') + trainCsvFilename), hex_key=trainKey2, timeoutSecs=timeoutSecs)
        elapsed = (time.time() - start)
        print 'parse end on ', trainCsvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseResult['destination_key']
        ignore_x = h2o_glm.goodXFromColumnInfo(y, key=parseResult['destination_key'], timeoutSecs=300, forRF=True)
        ntrees = 10
        params = {'response': 'C1', 'ignored_cols_by_name': ignore_x, 'ntrees': ntrees, 'mtries': 28, 'max_depth': 15, 'sample_rate': 0.67, 'destination_key': 'RF_model', 'nbins': 1024, 'seed': 784834182943470027, 'importance': 0, 'balance_classes': 0, }
        kwargs = params.copy()
        print 'Trying rf'
        timeoutSecs = 1800
        start = time.time()
        rfv = h2o_cmd.runRF(parseResult=parseResult, rfView=True, timeoutSecs=timeoutSecs, pollTimeoutSecs=60, retryDelaySecs=2, **kwargs)
        elapsed = (time.time() - start)
        print 'RF completed in', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        h2o_rf.simpleCheckRFView(None, rfv, **params)
        rf_model = rfv['drf_model']
        used_trees = rf_model['N']
        data_key = rf_model['_dataKey']
        model_key = rf_model['_key']
        start = time.time()
        kwargs = {'response_variable': y, }
        rfv = h2o_cmd.runRFView(data_key=testKey2, model_key=model_key, ntrees=ntrees, out_of_bag_error_estimate=0, timeoutSecs=60, pollTimeoutSecs=60, noSimpleCheck=False, **kwargs)
        elapsed = (time.time() - start)
        print 'RFView in', elapsed, 'secs', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        (classification_error, classErrorPctList, totalScores) = h2o_rf.simpleCheckRFView(None, rfv, **params)
        self.assertAlmostEqual(classification_error, 9, delta=1.0, msg=('Classification error %s differs too much' % classification_error))
        start = time.time()
        predict = h2o.nodes[0].generate_predictions(model_key=model_key, data_key=testKey2, timeoutSecs=timeoutSecs)
        elapsed = (time.time() - start)
        print 'generate_predictions in', elapsed, 'secs', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
