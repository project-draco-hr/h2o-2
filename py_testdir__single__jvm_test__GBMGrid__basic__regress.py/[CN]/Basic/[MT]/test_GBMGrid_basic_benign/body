def test_GBMGrid_basic_benign(self):
    csvFilename = 'benign.csv'
    print '\nStarting', csvFilename
    csvPathname = ('logreg/' + csvFilename)
    parseResult = h2i.import_parse(bucket='smalldata', path=csvPathname, hex_key=(csvFilename + '.hex'), schema='put')
    print "Not doing n_folds with benign. Fails with 'unable to solve?'"
    colNames = ['STR', 'OBS', 'AGMT', 'FNDX', 'HIGD', 'DEG', 'CHK', 'AGP1', 'AGMN', 'NLV', 'LIV', 'WT', 'AGLP', 'MST']
    modelKey = 'GBMGrid_benign'
    params = {'destination_key': modelKey, 'ignored_cols_by_name': 'STR', 'learn_rate': 'c(.1,.2)', 'ntrees': 2, 'max_depth': 8, 'min_rows': 1, 'response': 'FNDX', 'classification': (1 if DO_CLASSIFICATION else 0), }
    kwargs = params.copy()
    timeoutSecs = 1800
    start = time.time()
    GBMFirstResult = h2o_cmd.runGBM(parseResult=parseResult, noPoll=True, **kwargs)
    print '\nGBMFirstResult:', h2o.dump_json(GBMFirstResult)
    h2o_jobs.pollWaitJobs(pattern=None, timeoutSecs=300, pollTimeoutSecs=10, retryDelaySecs=5)
    elapsed = (time.time() - start)
    print 'GBM training completed in', elapsed, 'seconds.'
    job_key = GBMFirstResult['job_id']
    gbmGridView = h2o.nodes[0].grid_search_progress(job_key=job_key, destination_key=modelKey)
    gbmTrainView = h2o_cmd.runGBMView(model_key=modelKey)
    errsLast = gbmTrainView['gbm_model']['errs'][(-1)]
    print "GBM 'errsLast'", errsLast
    if DO_CLASSIFICATION:
        cm = gbmTrainView['gbm_model']['cm']
        pctWrongTrain = h2o_gbm.pp_cm_summary(cm)
        print 'Last line of this cm might be NAs, not CM'
        print '\nTrain\n==========\n'
        print h2o_gbm.pp_cm(cm)
    else:
        print 'GBMTrainView:', h2o.dump_json(gbmTrainView['gbm_model']['errs'])
