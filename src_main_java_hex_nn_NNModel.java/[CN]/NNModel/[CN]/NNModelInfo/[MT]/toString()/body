{
  StringBuilder sb=new StringBuilder();
  if (parameters.diagnostics) {
    Neurons[] neurons=NNTask.makeNeuronsForTesting(this);
    computeStats();
    sb.append("Status of Hidden and Output Layers:\n");
    sb.append("#  Units       Activation   Dropout     Rate      L1       L2    Momentum     Weight (Mean, RMS)      Bias (Mean,RMS)\n");
    final String format="%7g";
    for (int i=0; i < neurons.length; ++i) {
      sb.append((i + 1) + " " + String.format("%6d",neurons[i].units)+ " "+ String.format("%16s",neurons[i].getClass().getSimpleName())+ " "+ String.format("%8s",(i == 0 ? neurons[i].params.input_dropout_ratio * 100 : (neurons[i] instanceof Neurons.TanhDropout || neurons[i] instanceof Neurons.RectifierDropout || neurons[i] instanceof Neurons.MaxoutDropout ? 50 : 0)))+ "%");
      if (i == 0) {
        sb.append("\n");
        continue;
      }
      sb.append(" " + String.format("%10g",neurons[i].rate(get_processed_total())) + " "+ String.format("%5f",neurons[i].params.l1)+ " "+ String.format("%5f",neurons[i].params.l2)+ " "+ String.format("%5f",neurons[i].momentum(get_processed_total()))+ " ("+ String.format(format,mean_weight[i])+ ", "+ String.format(format,rms_weight[i])+ ")"+ " ("+ String.format(format,mean_bias[i])+ ", "+ String.format(format,rms_bias[i])+ ")\n");
    }
  }
  return sb.toString();
}
