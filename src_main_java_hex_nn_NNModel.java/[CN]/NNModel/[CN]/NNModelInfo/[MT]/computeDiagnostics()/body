{
  mean_bias=new double[units.length];
  rms_bias=new double[units.length];
  mean_weight=new double[units.length];
  rms_weight=new double[units.length];
  for (int y=1; y < units.length; y++) {
    mean_bias[y]=rms_bias[y]=0;
    mean_weight[y]=rms_weight[y]=0;
    for (int u=0; u < biases[y].length; u++) {
      mean_bias[y]+=biases[y][u];
    }
    for (int u=0; u < weights[y - 1].length; u++) {
      mean_weight[y]+=weights[y - 1][u];
    }
    mean_bias[y]/=biases[y].length;
    mean_weight[y]/=weights[y - 1].length;
    for (int u=0; u < biases[y].length; u++) {
      final double db=biases[y][u] - mean_bias[y];
      rms_bias[y]+=db * db;
    }
    for (int u=0; u < weights[y - 1].length; u++) {
      final double dw=weights[y - 1][u] - mean_weight[y];
      rms_weight[y]+=dw * dw;
    }
    rms_bias[y]=Math.sqrt(rms_bias[y] / biases[y].length);
    rms_weight[y]=Math.sqrt(rms_weight[y] / weights[y - 1].length);
    unstable|=Double.isNaN(mean_bias[y]) || Double.isNaN(rms_bias[y]) || Double.isNaN(mean_weight[y])|| Double.isNaN(rms_weight[y]);
    final double thresh=1e10;
    unstable|=mean_bias[y] > thresh || rms_bias[y] > thresh || mean_weight[y] > thresh || rms_weight[y] > thresh;
    System.out.println("Layer " + y + " mean weight: "+ mean_weight[y]);
    System.out.println("Layer " + y + " rms  weight: "+ rms_weight[y]);
    System.out.println("Layer " + y + " mean   bias: "+ mean_bias[y]);
    System.out.println("Layer " + y + " rms    bias: "+ rms_bias[y]);
  }
}
