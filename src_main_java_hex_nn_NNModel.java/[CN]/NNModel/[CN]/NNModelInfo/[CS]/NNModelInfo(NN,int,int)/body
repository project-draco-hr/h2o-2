{
  assert(num_input > 0);
  assert(num_output > 0);
  parameters=params;
  _has_momenta=(parameters.momentum_start != 0 || parameters.momentum_stable != 0);
  final int layers=parameters.hidden.length;
  if (!parameters.classification)   assert(num_output == 1);
 else   assert(num_output > 1);
  units=new int[layers + 2];
  units[0]=num_input;
  System.arraycopy(parameters.hidden,0,units,1,layers);
  units[layers + 1]=num_output;
  weights=new float[layers + 1][];
  for (int i=0; i <= layers; ++i)   weights[i]=new float[units[i] * units[i + 1]];
  biases=new double[layers + 1][];
  for (int i=0; i <= layers; ++i)   biases[i]=new double[units[i + 1]];
  if (has_momenta()) {
    weights_momenta=new float[weights.length][];
    for (int i=0; i < weights_momenta.length; ++i)     weights_momenta[i]=new float[units[i] * units[i + 1]];
    biases_momenta=new double[biases.length][];
    for (int i=0; i < biases_momenta.length; ++i)     biases_momenta[i]=new double[units[i + 1]];
  }
  mean_bias=new double[units.length];
  rms_bias=new double[units.length];
  mean_weight=new double[units.length];
  rms_weight=new double[units.length];
}
