def test_NN_covtype(self):
    h2o.beta_features = True
    csvPathname_train = 'covtype/covtype.20k.data'
    csvPathname_test = 'covtype/covtype.20k.data'
    hex_key = 'covtype.hex'
    validation_key = hex_key
    timeoutSecs = 10
    parseResult = h2i.import_parse(bucket='smalldata', path=csvPathname_train, schema='local', hex_key=hex_key, timeoutSecs=timeoutSecs)
    inspect = h2o_cmd.runInspect(None, hex_key)
    print ('\n' + csvPathname_train), '    numRows:', '{:,}'.format(inspect['numRows']), '    numCols:', '{:,}'.format(inspect['numCols'])
    response = (inspect['numCols'] - 1)
    modes = ['SingleThread', 'SingleNode']
    for mode in modes:
        identifier = ''.join(random.sample((string.ascii_lowercase + string.digits), 10))
        model_key = (('nn_' + identifier) + '.hex')
        kwargs = {'ignored_cols': None, 'response': response, 'classification': 1, 'mode': mode, 'activation': 'Tanh', 'hidden': '200,200', 'rate': 0.005, 'rate_annealing': 1e-05, 'momentum_start': 0.1, 'momentum_ramp': 100000, 'momentum_stable': 0.3, 'l1': 0.0, 'l2': 0.0, 'seed': 28372348842, 'loss': 'CrossEntropy', 'warmup_samples': 0, 'initial_weight_distribution': 'Normal', 'initial_weight_scale': 1, 'epochs': 2.0, 'destination_key': model_key, 'validation': validation_key, }
        expectedErr = (0.3413 if (mode == 'SingleThread') else 0.3)
        timeoutSecs = 600
        start = time.time()
        nnResult = h2o_cmd.runNNet(parseResult=parseResult, timeoutSecs=timeoutSecs, noPoll=True, **kwargs)
        h2o.verboseprint('\nnnResult:', h2o.dump_json(nnResult))
        h2o_jobs.pollWaitJobs(pattern=None, timeoutSecs=timeoutSecs, pollTimeoutSecs=10, retryDelaySecs=5)
        print 'neural net end on ', csvPathname_train, ' and ', csvPathname_test, 'took', (time.time() - start), 'seconds'
        modelView = h2o_cmd.runNeuralView(model_key=model_key)
        relTol = (0.02 if (mode == 'SingleThread') else 0.15)
        h2o_nn.checkLastValidationError(self, modelView, inspect['numRows'], expectedErr, relTol, **kwargs)
        kwargs = {'source': validation_key, 'max_rows': 0, 'response': response, 'ignored_cols': None, 'classification': 1, 'destination_key': (('score_' + identifier) + '.hex'), 'model': model_key, }
        nnScoreResult = h2o_cmd.runNNetScore(key=parseResult['destination_key'], timeoutSecs=timeoutSecs, **kwargs)
        h2o_nn.checkScoreResult(self, nnScoreResult, expectedErr, relTol, **kwargs)
        h2o.beta_features = False
