{
  ArrayList<Integer> numeric=new ArrayList<Integer>();
  ArrayList<Integer> categorical=new ArrayList<Integer>();
  for (int i=0; i < colIds.length - 1; ++i) {
    int c=colIds[i];
    if (ary._cols[c]._domain != null)     categorical.add(c);
 else     numeric.add(c);
  }
  _dense=numeric.size() + 1;
  final Column[] cols=ary._cols;
  Collections.sort(categorical,new Comparator<Integer>(){
    @Override public int compare(    Integer o1,    Integer o2){
      return cols[o2]._domain.length - cols[o1]._domain.length;
    }
  }
);
  int idx=0;
  for (  int i : categorical)   colIds[idx++]=i;
  for (  int i : numeric)   colIds[idx++]=i;
  colIds[idx]=colIds[colIds.length - 1];
  _response=idx;
  _ary=ary;
  _modelDataMap=colIds;
  _s=s;
  _colCatMap=new int[colIds.length + 1];
  int len=0;
  for (int i=0; i < colIds.length; i++) {
    _colCatMap[i]=len;
    if (i == _response) {
      ++len;
    }
 else {
      ValueArray.Column C=ary._cols[colIds[i]];
      len+=(expandCat && C._domain != null) ? C._domain.length - 1 : 1;
    }
  }
  _colCatMap[colIds.length]=len;
  _normSub=new double[len];
  _normMul=new double[len];
  Arrays.fill(_normMul,1);
  boolean standardized=false;
  if (standardize)   for (int i=0; i < colIds.length; ++i) {
    if (i == _response)     continue;
    standardized=true;
    Column col=ary._cols[colIds[i]];
    if (col._domain == null) {
      int ii=_colCatMap[i];
      _normSub[ii]=col._mean;
      _normMul[ii]=1.0 / col._sigma;
    }
  }
  _standardized=standardized;
  _nobs=(s != null) ? (long)(ary._numrows * s.ratio()) : ary._numrows;
}
