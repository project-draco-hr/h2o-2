def build_cloud_with_hosts(node_count=None, **kwargs):
    if (node_count is not None):
        kwargs['h2o_per_host'] = node_count
        node_count = None
    offset = random.randint(0, 31)
    allParamsDefault = {'use_flatfile': None, 'use_hdfs': None, 'hdfs_name_node': None, 'hdfs_config': None, 'hdfs_version': None, 'base_port': None, 'java_heap_GB': None, 'java_heap_MB': None, 'java_extra_args': None, 'slow_connection': False, 'ip': '["127.0.0.1"]', 'h2o_per_host': 2, 'base_port': (54300 + offset), 'username': '0xdiag', 'password': None, 'sigar': False, 'use_flatfile': False, 'use_hdfs': False, 'hdfs_name_node': '192.168.1.176', 'hdfs_version': 'cdh3u5', 'hdfs_config': None, 'java_heap_GB': None, 'java_heap_MB': None, 'java_extra_args': None, 'use_home_for_ice': False, 'key_filename': None, 'aws_credentials': None, 'redirect_import_folder_to_s3_path': None, 'enable_h2o_log': True, 'enable_benchmark_log': False, }
    paramsToUse = {}
    for (k, v) in allParamsDefault.iteritems():
        paramsToUse[k] = allParamsDefault.setdefault(k, v)
    if h2o.config_json:
        configFilename = find_config(h2o.config_json)
    else:
        configFilename = find_config(h2o.default_hosts_file())
    h2o.verboseprint('Loading host config from', configFilename)
    with open(configFilename, 'rb') as fp:
        hostDict = json.load(fp)
    for (k, v) in hostDict.iteritems():
        if (k in paramsToUse):
            paramsToUse[k] = hostDict.setdefault(k, v)
    for (k, v) in kwargs.iteritems():
        paramsToUse[k] = kwargs.setdefault(k, v)
    h2o.verboseprint('All build_cloud_with_hosts params:', paramsToUse)
    global hosts
    if (paramsToUse['ip'] == ['127.0.0.1']):
        hosts = None
    else:
        h2o.verboseprint('About to RemoteHost, likely bad ip if hangs')
        hosts = []
        for h in paramsToUse['ip']:
            h2o.verboseprint('Connecting to:', h)
            hosts.append(h2o.RemoteHost(addr=h, username=paramsToUse['username'], password=paramsToUse['password'], key_filename=paramsToUse['key_filename']))
    paramsToUse.pop('ip')
    paramsToUse.pop('username')
    paramsToUse.pop('password')
    paramsToUse.pop('key_filename')
    h2o.write_flatfile(node_count=paramsToUse['h2o_per_host'], base_port=paramsToUse['base_port'], hosts=hosts)
    if (hosts is not None):
        h2o.upload_jar_to_remote_hosts(hosts, slow_connection=paramsToUse['slow_connection'])
        timeoutSecs = max(60, (8 * (len(hosts) * paramsToUse['h2o_per_host'])))
    else:
        timeoutSecs = 60
    paramsToUse.pop('slow_connection')
    node_count = paramsToUse['h2o_per_host']
    paramsToUse.pop('h2o_per_host')
    h2o.build_cloud(node_count, **paramsToUse)
