def build_cloud_with_hosts(node_count=None, use_flatfile=None, use_hdfs=None, hdfs_name_node=None, hdfs_config=None, hdfs_version=None, base_port=None, java_heap_GB=None, java_extra_args=None, **kwargs):
    if h2o.config_json:
        configFilename = find_config(h2o.config_json)
    else:
        configFilename = find_config(('pytest_config-%s.json' % getpass.getuser()))
    h2o.verboseprint('Loading host config from', configFilename)
    with open(configFilename, 'rb') as fp:
        hostDict = json.load(fp)
    slow_connection = hostDict.setdefault('slow_connection', False)
    hostList = hostDict.setdefault('ip', '127.0.0.1')
    h2oPerHost = hostDict.setdefault('h2o_per_host', 2)
    offset = random.randint(0, 31)
    basePort = hostDict.setdefault('base_port', (55300 + offset))
    username = hostDict.setdefault('username', '0xdiag')
    password = hostDict.setdefault('password', None)
    sigar = hostDict.setdefault('sigar', False)
    useFlatfile = hostDict.setdefault('use_flatfile', False)
    useHdfs = hostDict.setdefault('use_hdfs', False)
    hdfsNameNode = hostDict.setdefault('hdfs_name_node', '192.168.1.151')
    hdfsVersion = hostDict.setdefault('hdfs_version', 'cdh3u5')
    hdfsConfig = hostDict.setdefault('hdfs_config', None)
    javaHeapGB = hostDict.setdefault('java_heap_GB', None)
    javaExtraArgs = hostDict.setdefault('java_extra_args', None)
    use_home_for_ice = hostDict.setdefault('use_home_for_ice', False)
    if (node_count is not None):
        h2oPerHost = node_count
    if (use_flatfile is not None):
        useFlatfile = use_flatfile
    if (use_hdfs is not None):
        useHdfs = use_hdfs
    if (hdfs_name_node is not None):
        hdfsNameNode = hdfs_name_node
    if (hdfs_version is not None):
        hdfsVersion = hdfs_version
    if (hdfs_config is not None):
        hdfsConfig = hdfs_config
    if (java_heap_GB is not None):
        javaHeapGB = java_heap_GB
    if (java_extra_args is not None):
        javaExtraArgs = java_extra_args
    if (base_port is not None):
        basePort = base_port
    h2o.verboseprint('host config: ', username, password, h2oPerHost, basePort, sigar, useFlatfile, useHdfs, hdfsNameNode, hdfsVersion, hdfsConfig, javaHeapGB, use_home_for_ice, hostList, **kwargs)
    global hosts
    if (hostList == ['127.0.0.1']):
        hosts = None
    else:
        h2o.verboseprint('About to RemoteHost, likely bad ip if hangs')
        hosts = []
        for h in hostList:
            h2o.verboseprint('Connecting to:', h)
            hosts.append(h2o.RemoteHost(h, username, password))
    h2o.write_flatfile(node_count=h2oPerHost, base_port=basePort, hosts=hosts)
    if (hosts is not None):
        h2o.upload_jar_to_remote_hosts(hosts, slow_connection=slow_connection)
        timeoutSecs = max(60, (2 * (len(hosts) * h2oPerHost)))
    else:
        timeoutSecs = 60
    h2o.build_cloud(h2oPerHost, base_port=basePort, hosts=hosts, timeoutSecs=timeoutSecs, sigar=sigar, use_flatfile=useFlatfile, use_hdfs=useHdfs, hdfs_name_node=hdfsNameNode, hdfs_version=hdfsVersion, hdfs_config=hdfsConfig, java_heap_GB=javaHeapGB, java_extra_args=javaExtraArgs, use_home_for_ice=use_home_for_ice, **kwargs)
