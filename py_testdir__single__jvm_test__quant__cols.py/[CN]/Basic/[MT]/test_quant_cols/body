def test_quant_cols(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [('/home/kevin/Downloads/t.csv', 15, 11, 'cE', 300)]
    trial = 0
    xList = []
    eList = []
    fList = []
    for (csvPathname, iColCount, oColCount, hex_key, timeoutSecs) in tryList:
        colCount = (iColCount + oColCount)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=200, doSummary=False)
        print "Parse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(key=parseResult['destination_key'])
        h2o_cmd.infoFromInspect(inspect, csvPathname)
        numRows = inspect['numRows']
        numCols = inspect['numCols']
        for i in range(1, numCols):
            print 'Column', i, 'summary'
            h2o_cmd.runSummary(key=hex_key, max_qbins=1, cols=i)
        levels = h2o.nodes[0].levels(source=hex_key)
        print 'levels result:', h2o.dump_json(levels)
        (missingValuesDict, constantValuesDict, enumSizeDict, colTypeDict, colNameDict) = h2o_cmd.columnInfoFromInspect(parseResult['destination_key'], exceptionOnMissingValues=False)
        if (len(constantValuesDict) != 0):
            print ("Probably got a col NA'ed and constant values as a result %s" % constantValuesDict)
        for column in range(iColCount, (iColCount + oColCount)):
            quantile = (0.5 if DO_MEDIAN else 0.999)
            start = time.time()
            q = h2o.nodes[0].quantiles(source_key=hex_key, column=column, quantile=quantile, max_qbins=MAX_QBINS, multiple_pass=1)
            h2p.red_print('result:', q['result'], 'quantile', quantile, 'interpolated:', q['interpolated'], 'iterations', q['iterations'])
            elapsed = (time.time() - start)
            print 'quantile end on ', hex_key, 'took', elapsed, 'seconds.'
            quantileTime = elapsed
            if (1 == 0):
                start = time.time()
                h2o.nodes[0].remove_all_keys()
                elapsed = (time.time() - start)
                print 'remove all keys end on ', csvFilename, 'took', elapsed, 'seconds.'
            trial += 1
            execTime = 0
            xList.append(column)
            eList.append(execTime)
            fList.append(quantileTime)
    if DO_PLOT:
        xLabel = 'column (0 is first)'
        eLabel = 'exec cut time'
        fLabel = 'quantile time'
        eListTitle = ''
        fListTitle = ''
        h2o_gbm.plotLists(xList, xLabel, eListTitle, eList, eLabel, fListTitle, fList, fLabel, server=True)
