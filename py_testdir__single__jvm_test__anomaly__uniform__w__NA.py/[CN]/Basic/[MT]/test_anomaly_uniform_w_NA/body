def test_anomaly_uniform_w_NA(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(ROWS, COLS, 'x.hex', 1, 20000), (ROWS, COLS, 'x.hex', (-5000), 0), (ROWS, COLS, 'x.hex', (-100000), 100000), (ROWS, COLS, 'x.hex', (-1), 1), (ROWS, COLS, 'A.hex', 1, 100), (ROWS, COLS, 'A.hex', (-99), 99), (ROWS, COLS, 'B.hex', 1, 10000), (ROWS, COLS, 'B.hex', (-100), 100), (ROWS, COLS, 'C.hex', 1, 100000), (ROWS, COLS, 'C.hex', (-101), 101)]
    trial = 1
    x = 0
    timeoutSecs = 60
    for (rowCount, colCount, hex_key, expectedMin, expectedMax) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        x += 1
        csvFilename = (((((('syn_' + 'binary') + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        csvPathnameFull = h2i.find_folder_and_filename(None, csvPathname, returnFullPath=True)
        print 'Creating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, expectedMin, expectedMax, SEEDPERFILE)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=30, doSummary=False)
        print "Parse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        numRows = inspect['numRows']
        numCols = inspect['numCols']
        print 'numRows:', numRows, 'numCols:', numCols
        model_key = 'm.hex'
        kwargs = {'ignored_cols': None, 'response': (numCols - 1), 'classification': 0, 'activation': 'RectifierWithDropout', 'input_dropout_ratio': 0.2, 'hidden': '117', 'adaptive_rate': 0, 'rate': 0.005, 'rate_annealing': 1e-06, 'momentum_start': 0.5, 'momentum_ramp': 100000, 'momentum_stable': 0.9, 'l1': 1e-05, 'l2': 1e-07, 'seed': 98037452452, 'max_w2': 15, 'initial_weight_distribution': 'UniformAdaptive', 'epochs': 2.0, 'destination_key': model_key, 'score_interval': 10000, 'autoencoder': 1, }
        timeoutSecs = 600
        start = time.time()
        nn = h2o_cmd.runDeepLearning(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
        print 'neural net end. took', (time.time() - start), 'seconds'
        kwargs = {'destination_key': 'a.hex', 'source': parseResult['destination_key'], 'dl_autoencoder_model': model_key, 'thresh': 1.0, }
        anomaly = h2o.nodes[0].anomaly(timeoutSecs=30, **kwargs)
        inspect = h2o_cmd.runInspect(None, 'a.hex')
        numRows = inspect['numRows']
        numCols = inspect['numCols']
        print 'anomaly: numRows:', numRows, 'numCols:', numCols
        self.assertEqual(numCols, 1)
        self.assertEqual(numRows, (rowCount * (1 + NA_ROW_RATIO)))
        aSummary = h2o_cmd.runSummary(key='a.hex', cols=0)
        h2o_cmd.infoFromSummary(aSummary)
        print 'anomaly:', h2o.dump_json(anomaly)
        trial += 1
        h2i.delete_keys_at_all_nodes()
