def test_anomaly_uniform_w_NA(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(ROWS, 1, 'x.hex', 1, 20000, ('C1', 1.1, 5000.0, 10000.0, 15000.0, 20000.0)), (ROWS, 1, 'x.hex', (-5000), 0, ('C1', (-5001.0), (-3750.0), (-2445), (-1200.0), 99)), (ROWS, 1, 'x.hex', (-100000), 100000, ('C1', (-100001.0), (-50000.0), 1613.0, 50000.0, 100000.0)), (ROWS, 1, 'x.hex', (-1), 1, ('C1', (-1.05), (-0.48), 0.0087, 0.5, 1.0)), (ROWS, 1, 'A.hex', 1, 100, ('C1', 1.05, 26.0, 51.0, 76.0, 100.0)), (ROWS, 1, 'A.hex', (-99), 99, ('C1', (-99), (-50.0), 0, 50.0, 99)), (ROWS, 1, 'B.hex', 1, 10000, ('C1', 1.05, 2501.0, 5001.0, 7501.0, 10000.0)), (ROWS, 1, 'B.hex', (-100), 100, ('C1', (-100.1), (-50.0), 0.85, 51.7, 100, 0)), (ROWS, 1, 'C.hex', 1, 100000, ('C1', 1.05, 25002.0, 50002.0, 75002.0, 100000.0)), (ROWS, 1, 'C.hex', (-101), 101, ('C1', (-100.1), (-50.45), (-1.18), 49.28, 100.0))]
    timeoutSecs = 10
    trial = 1
    n = h2o.nodes[0]
    lenNodes = len(h2o.nodes)
    x = 0
    timeoutSecs = 60
    for (rowCount, colCount, hex_key, expectedMin, expectedMax, expected) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        x += 1
        csvFilename = (((((('syn_' + 'binary') + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        csvPathnameFull = h2i.find_folder_and_filename(None, csvPathname, returnFullPath=True)
        print 'Creating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, expectedMin, expectedMax, SEEDPERFILE)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=10, doSummary=False)
        print "Parse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        numRows = inspect['numRows']
        numCols = inspect['numCols']
        print 'numRows:', numRows, 'numCols:', numCols
        kwargs = {'destination_key': 'a.hex', 'source': parseResult['destination_key'], 'dl_autoencoder_model': 'd.hex', 'thresh': 1.0, }
        anomaly = h2o.nodes[0].anomaly(None, **kwargs)
        print 'anomaly:', h2o.dump_json(anomaly)
        trial += 1
        h2i.delete_keys_at_all_nodes()
