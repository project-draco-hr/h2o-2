def test_parse_bounds_libsvm(self):
    importFolderPath = '/home/0xdiag/datasets/libsvm'
    csvFilenameList = [('syn_6_1000_10.svm', 'cK', 30, (-36), 36), ('syn_0_100_1000.svm', 'cL', 30, (-36), 36), ('mnist_training.svm', 'cM', 30, 0, 9), ('colon-cancer.svm', 'cA', 30, (-1.0), 1.0), ('news20.svm', 'cH', 30, 1, 20), ('connect4.svm', 'cB', 30, (-1), 1), ('covtype.binary.svm', 'cC', 30, 1, 2), ('duke.svm', 'cD', 30, (-1.0), 1.0), ('gisette_scale.svm', 'cF', 30, (-1), 1), ('mushrooms.svm', 'cG', 30, 1, 2)]
    lenNodes = len(h2o.nodes)
    firstDone = False
    for (csvFilename, key2, timeoutSecs, expectedCol0Min, expectedCol0Max) in csvFilenameList:
        h2i.setupImportFolder(None, importFolderPath)
        parseKey = h2i.parseImportFolderFile(None, csvFilename, importFolderPath, key2=key2, timeoutSecs=2000)
        print csvFilename, 'parse time:', parseKey['response']['time']
        print "Parse result['destination_key']:", parseKey['destination_key']
        start = time.time()
        inspect = h2o_cmd.runInspect(None, parseKey['destination_key'], timeoutSecs=360)
        print 'Inspect:', parseKey['destination_key'], 'took', (time.time() - start), 'seconds'
        h2o_cmd.infoFromInspect(inspect, csvFilename)
        imin = inspect['cols'][0]['min']
        imax = inspect['cols'][0]['max']
        if expectedCol0Min:
            self.assertEqual(imin, expectedCol0Min, msg=('col %s min %s is not equal to expected min %s' % (0, imin, expectedCol0Min)))
        if expectedCol0Max:
            self.assertEqual(imax, expectedCol0Max, msg=('col %s max %s is not equal to expected max %s' % (0, imax, expectedCol0Max)))
        print '\nmin/max for col0:', imin, imax
        if DO_SUMMARY:
            goodX = h2o_glm.goodXFromColumnInfo(y=0, key=parseKey['destination_key'], timeoutSecs=300, noPrint=True)
            summaryResult = h2o_cmd.runSummary(key=key2, timeoutSecs=360)
            h2o_cmd.infoFromSummary(summaryResult, noPrint=True)
