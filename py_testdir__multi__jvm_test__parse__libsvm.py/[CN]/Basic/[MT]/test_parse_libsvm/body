def test_parse_libsvm(self):
    importFolderPath = '/home/0xdiag/datasets/libsvm'
    csvFilenameList = [('colon-cancer.svm', 'cA', 30, 1), ('connect4.svm', 'cB', 30, 1), ('covtype.binary.svm', 'cC', 30, 1), ('duke.svm', 'cD', 30, 1), ('E2006.train.svm', 'cE', 30, 1), ('gisette_scale.svm', 'cF', 30, 1), ('mushrooms.svm', 'cG', 30, 1), ('news20.svm', 'cH', 30, 1), ('sector.libsvm.svm', 'cI', 30, 1), ('tmc2007_train.svm', 'cJ', 30, 1), ('syn_6_1000_10.svm', 'cK', 30, 1), ('syn_0_100_1000.svm', 'cL', 30, 1), ('mnist_training.svm', 'cM', 30, 1), ('covtype.data', 'cN', 30, 1)]
    lenNodes = len(h2o.nodes)
    firstDone = False
    for (csvFilename, key2, timeoutSecs, resultMult) in csvFilenameList:
        h2i.setupImportFolder(None, importFolderPath)
        parseKey = h2i.parseImportFolderFile(None, csvFilename, importFolderPath, key2=key2, timeoutSecs=2000)
        print csvFilename, 'parse time:', parseKey['response']['time']
        print "Parse result['destination_key']:", parseKey['destination_key']
        start = time.time()
        inspect = h2o_cmd.runInspect(None, parseKey['destination_key'], timeoutSecs=360)
        print 'Inspect:', parseKey['destination_key'], 'took', (time.time() - start), 'seconds'
        h2o_cmd.infoFromInspect(inspect, csvFilename)
        goodX = h2o_glm.goodXFromColumnInfo(y=0, key=parseKey['destination_key'], timeoutSecs=300)
        summaryResult = h2o_cmd.runSummary(key=key2, timeoutSecs=360)
        h2o_cmd.infoFromSummary(summaryResult, noPrint=True)
        h2e.exec_zero_list(zeroList)
        colResultList = h2e.exec_expr_list_across_cols(lenNodes, exprList, key2, maxCol=54, timeoutSecs=timeoutSecs)
        print '\n*************'
        print 'colResultList', colResultList
        print '*************'
        if (1 == 0):
            if (not firstDone):
                colResultList0 = list(colResultList)
                good = [float(x) for x in colResultList0]
                firstDone = True
            else:
                print '\n', colResultList0, '\n', colResultList
                compare = [(float(x) / resultMult) for x in colResultList]
                print '\n', good, '\n', compare
                self.assertEqual(good, compare, 'compare is not equal to good (first try * resultMult)')
