def test_RF_poker100(self):
    MISSING_RESPONSE = True
    trees = ','.join(map(str, range(1, 4)))
    trees = '1,2'
    timeoutSecs = 20
    csvPathname = 'poker/poker100'
    parseResult = h2i.import_parse(bucket='smalldata', path=csvPathname, schema='put')
    jobs = []
    for i in range(1):
        if MISSING_RESPONSE:
            rfResult = h2o_cmd.runSpeeDRF(parseResult=parseResult, ntrees=trees, timeoutSecs=timeoutSecs)
        else:
            rfResult = h2o_cmd.runSpeeDRF(parseResult=parseResult, response='C11', ntrees=trees, timeoutSecs=timeoutSecs)
        job_key = rfResult['job_key']
        model_key = rfResult['destination_key']
        jobs.append((job_key, model_key))
    h2o_jobs.pollWaitJobs(timeoutSecs=300)
    for (job_key, model_key) in jobs:
        gridResult = h2o.nodes[0].speedrf_grid_view(job_key=job_key, destination_key=model_key)
        print 'speedrf grid result for %s:', model_key, h2o.dump_json(gridResult)
