def write_syn_dataset(csvPathname, rowCount, colCount, coefficients, intercept, DATA_VALUE_MIN, DATA_VALUE_MAX, DATA_DISTS, ALGO, SEED):
    r1 = random.Random(SEED)
    dsf = open(csvPathname, 'w+')
    yMin = None
    yMax = None
    if (DATA_DISTS == 'unique_pos_neg'):
        d = DATA_VALUE_MIN
        fullRange = (DATA_VALUE_MAX - DATA_VALUE_MIN)
        colModes = []
        for j in range(colCount):
            colModes += [((random.randint(0, 1) * (-1)) * (((float(j) / colCount) * fullRange) + DATA_VALUE_MIN))]
    elif (DATA_DISTS == 'mean'):
        colDataMean = ((DATA_VALUE_MIN + DATA_VALUE_MAX) / 2)
        colModes = [colDataMean for j in range(colCount)]
    elif (DATA_DISTS == 'random'):
        colModes = [r1.uniform(DATA_VALUE_MIN, DATA_VALUE_MAX) for j in range(colCount)]
    else:
        raise Exception(('Unknown DATA_DIST: %s' % DATA_DIST))
    print '\ncolModes:', colModes
    if (ALGO == 'binomial'):
        print ("gen'ed y is probability! generate 1/0 data rows wth that probability, binned to %d bins" % BINS)
        print '100 implies 2 places of accuracy in getting the probability.'
        print 'this means we should get 1 place of accuracy in the result coefficients/intercept????'
    for i in range(rowCount):
        rowData = []
        for j in range(colCount):
            ri = r1.triangular(DATA_VALUE_MIN, DATA_VALUE_MAX, colModes[j])
            rowData.append(ri)
        y = yFromEqnAndData(coefficients, intercept, rowData, DATA_DISTS, ALGO)
        if ((yMin is None) or (y < yMin)):
            yMin = y
        if ((yMax is None) or (y > yMax)):
            yMax = y
        if (ALGO == 'binomial'):
            for i in range(1, (BINS + 1)):
                if (y > ((i + 0.0) / BINS)):
                    binomial = 1
                else:
                    binomial = 0
                rowDataCsv = ','.join(map(str, (rowData + [binomial])))
                dsf.write((rowDataCsv + '\n'))
        elif (ALGO == 'poisson'):
            rowDataCsv = ','.join(map(str, (rowData + [int(y)])))
            dsf.write((rowDataCsv + '\n'))
        elif (ALGO == 'gamma'):
            rowDataCsv = ','.join(map(str, (rowData + [y])))
            dsf.write((rowDataCsv + '\n'))
        else:
            raise Exception(('Unknown ALGO: %s' % ALGO))
    dsf.close()
    print 'yMin:', yMin, ' yMax:', yMax
