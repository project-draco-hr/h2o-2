{
  Vec[] train=TestUtil.parseFrame("smalldata/mnist/train.csv.gz").vecs();
  Vec[] test=TestUtil.parseFrame("smalldata/mnist/test.csv.gz").vecs();
  NeuralNet.reChunk(train);
  Vec trainLabels=train[train.length - 1];
  trainLabels.asEnum();
  train=Utils.remove(train,train.length - 1);
  Vec testLabels=test[test.length - 1];
  test=Utils.remove(test,test.length - 1);
  Layer[] ls=build(train,trainLabels,null,null);
  Trainer trainer=new Trainer.MapReduce(ls);
  trainer.start();
  long start=System.nanoTime();
  for (; ; ) {
    try {
      Thread.sleep(2000);
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
    double time=(System.nanoTime() - start) / 1e9;
    long steps=trainer.items();
    int ps=(int)(steps / time);
    String text=(int)time + "s, " + steps+ " steps ("+ (ps)+ "/s) ";
    Layer[] temp=build(train,trainLabels,(VecsInput)ls[0],(VecSoftmax)ls[ls.length - 1]);
    Layer.copyWeights(ls,temp);
    Error error=NeuralNet.eval(temp,NeuralNet.EVAL_ROW_COUNT,null);
    text+="train: " + error;
    temp=build(test,testLabels,(VecsInput)ls[0],(VecSoftmax)ls[ls.length - 1]);
    Layer.copyWeights(ls,temp);
    error=NeuralNet.eval(temp,NeuralNet.EVAL_ROW_COUNT,null);
    text+=", test: " + error;
    System.out.println(text);
  }
}
