{
  Vec[] train=TestUtil.parseFrame("smalldata/mnist/train.csv.gz")._vecs;
  Vec[] test=TestUtil.parseFrame("smalldata/mnist/test.csv.gz")._vecs;
  train=NeuralNet.reChunk(train);
  Vec trainLabels=train[train.length - 1];
  train=Utils.remove(train,train.length - 1);
  Vec testLabels=test[test.length - 1];
  test=Utils.remove(test,test.length - 1);
  Layer[] ls=new Layer[3];
  ls[0]=new VecsInput(train);
  ls[1]=new Tanh(500);
  ls[2]=new VecSoftmax(trainLabels);
  ls[1]._rate=.05f;
  ls[2]._rate=.02f;
  ls[1]._l2=.0001f;
  ls[2]._l2=.0001f;
  ls[1]._rateAnnealing=1 / 2e6f;
  ls[2]._rateAnnealing=1 / 2e6f;
  for (int i=0; i < ls.length; i++)   ls[i].init(ls,i);
  final Trainer trainer=new Trainer.MapReduce(ls);
  trainer.start();
  VecsInput scoreTrain=new VecsInput(train,(VecsInput)ls[0]);
  VecsInput scoreTest=new VecsInput(test,(VecsInput)ls[0]);
  long start=System.nanoTime();
  long lastTime=start;
  long lastItems=0;
  for (; ; ) {
    try {
      Thread.sleep(2000);
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
    Layer[] clones1=Layer.clone(ls,train,0);
    Error trainE=NeuralNetScore.eval(clones1,NeuralNet.EVAL_ROW_COUNT,null);
    Layer[] clones2=Layer.clone(ls,test,0);
    Error testE=NeuralNetScore.eval(clones2,NeuralNet.EVAL_ROW_COUNT,null);
    long time=System.nanoTime();
    double delta=(time - lastTime) / 1e9;
    double total=(time - start) / 1e9;
    lastTime=time;
    long steps=trainer.items();
    int ps=(int)((steps - lastItems) / delta);
    lastItems=steps;
    String m=(int)total + "s, " + steps+ " steps ("+ (ps)+ "/s) ";
    m+="train: " + trainE + ", test: "+ testE;
    System.out.println(m);
  }
}
