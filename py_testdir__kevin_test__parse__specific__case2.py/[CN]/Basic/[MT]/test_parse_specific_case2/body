def test_parse_specific_case2(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    hex_key = 'a.hex'
    for (dataset, expNumRows, expNumCols, expNaCnt, expType) in tryList:
        csvFilename = (((('specific_' + str(expNumRows)) + 'x') + str(expNumCols)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        write_syn_dataset(csvPathname, dataset)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', header=0, hex_key=hex_key, timeoutSecs=10, doSummary=False)
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], timeoutSecs=60)
        numRows = inspect['numRows']
        numCols = inspect['numCols']
        print 'inspect:', h2o.dump_json(inspect)
        self.assertEqual(numRows, expNumRows, msg=('Using unichr(0x%x) Wrong numRows: %s Expected: %s' % (unicodeNum, numRows, expNumRows)))
        numCols = inspect['numCols']
        self.assertEqual(numCols, expNumCols, msg=('Using unichr(0x%x) Wrong numCols: %s Expected: %s' % (unicodeNum, numCols, expNumCols)))
        assert (len(expNaCnt) >= expNumCols)
        assert (len(expType) >= expNumCols)
        for k in range(expNumCols):
            naCnt = inspect['cols'][k]['naCnt']
            self.assertEqual(expNaCnt[k], naCnt, msg=('col %s naCnt %d should be %s' % (k, naCnt, expNaCnt[k])))
            stype = inspect['cols'][k]['type']
            self.assertEqual(expType[k], stype, msg=('col %s type %s should be %s' % (k, stype, expType[k])))
