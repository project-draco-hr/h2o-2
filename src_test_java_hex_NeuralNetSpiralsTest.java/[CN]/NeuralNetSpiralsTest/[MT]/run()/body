{
  File file=new File(VM.h2oFolder(),"smalldata/neural/two_spiral.data");
  Key key=Key.make(file.getName());
  Frame frame=parseFrame(key,file);
  NeuralNet.reChunk(frame.vecs());
  Vec[] data=Utils.remove(frame.vecs(),frame.vecs().length - 1);
  Vec labels=frame.vecs()[frame.vecs().length - 1];
  VecsInput input=new VecsInput(data,null);
  VecSoftmax output=new VecSoftmax(labels,null,Layer.Loss.MeanSquare);
  Layer[] ls=new Layer[3];
  ls[0]=input;
  ls[1]=new Layer.Tanh(50);
  ls[1].rate=.005f;
  ls[2]=output;
  ls[2].rate=.0005f;
  for (int i=0; i < ls.length; i++)   ls[i].init(ls,i);
  Trainer.MapReduce trainer=new Trainer.MapReduce(ls,100000,null);
  trainer.start();
  long start=System.nanoTime();
  for (; ; ) {
    try {
      Thread.sleep(2000);
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
    double time=(System.nanoTime() - start) / 1e9;
    long processed=trainer.processed();
    int ps=(int)(processed / time);
    String text=(int)time + "s, " + processed+ " samples ("+ (ps)+ "/s) ";
    Errors error=NeuralNet.eval(ls,data,labels,0,null);
    text+="train: " + error;
    text+=", rates: ";
    for (int i=1; i < ls.length; i++)     text+=String.format("%.3g",ls[i].rate(processed)) + ", ";
    System.out.println(text);
  }
}
