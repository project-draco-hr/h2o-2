{
  float bestSoFar=Float.POSITIVE_INFINITY;
  int bestSplit=-1;
  int lW=0;
  int rW=d.rows();
  float[] leftDist=new float[d.columnArityOfClassCol()];
  float[] riteDist=computeDist(d,colIndex);
  for (int j=0; j < _columnDistsRegression[colIndex].length - 1; ++j) {
    for (int i=0; i < dist.length; ++i) {
      int t=_columnDistsRegression[colIndex][j][i];
      lW+=t;
      rW-=t;
      leftDist[i]+=t;
      riteDist[i]-=t;
    }
    float Y_R=computeAv(riteDist,d,rW);
    float Y_L=computeAv(leftDist,d,lW);
    float newSplitValue=Y_R + Y_L;
    if (newSplitValue < bestSoFar) {
      bestSoFar=newSplitValue;
      bestSplit=j;
    }
  }
  return bestSplit == -1 ? Split.impossible(Utils.maxIndex(computeDist(d,colIndex),_random)) : Split.split(colIndex,bestSplit,bestSoFar);
}
