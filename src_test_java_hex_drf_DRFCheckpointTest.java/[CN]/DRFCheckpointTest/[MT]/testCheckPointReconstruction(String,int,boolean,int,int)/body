{
  Frame f=parseFrame(dataset);
  DRFModel model=null;
  DRFModel modelFromCheckpoint=null;
  DRFModel modelFinal=null;
  try {
    Vec respVec=f.vec(response);
    DRFWithHooks drf=new DRFWithHooks();
    drf.source=f;
    drf.response=respVec;
    drf.classification=classification;
    drf.ntrees=ntreesInPriorModel;
    drf.collectPoint=WhereToCollect.AFTER_BUILD;
    drf.seed=42;
    drf.invoke();
    model=UKV.get(drf.dest());
    DRFWithHooks drfFromCheckpoint=new DRFWithHooks();
    drfFromCheckpoint.source=f;
    drfFromCheckpoint.response=respVec;
    drfFromCheckpoint.classification=classification;
    drfFromCheckpoint.ntrees=ntreesInANewModel;
    drfFromCheckpoint.collectPoint=WhereToCollect.AFTER_RECONSTRUCTION;
    drfFromCheckpoint.checkpoint=drf.dest();
    drfFromCheckpoint.seed=42;
    drfFromCheckpoint.invoke();
    modelFromCheckpoint=UKV.get(drf.dest());
    Assert.assertArrayEquals("Tree data produced by drf run and reconstructed from a model do not match!",drf.treesCols,drfFromCheckpoint.treesCols);
    DRF drfFinal=new DRF();
    drfFinal.source=f;
    drfFinal.response=respVec;
    drfFinal.classification=classification;
    drfFinal.ntrees=ntreesInANewModel + ntreesInPriorModel;
    drfFinal.score_each_iteration=true;
    drfFinal.seed=42;
    drfFinal.invoke();
    modelFinal=UKV.get(drfFinal.dest());
    assertTreeModelEquals(modelFinal,modelFromCheckpoint);
  }
  finally {
    if (f != null)     f.delete();
    if (model != null)     model.delete();
    if (modelFromCheckpoint != null)     modelFromCheckpoint.delete();
  }
}
