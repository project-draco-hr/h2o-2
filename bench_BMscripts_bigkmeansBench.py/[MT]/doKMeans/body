def doKMeans():
    f = ''
    date = '-'.join([str(x) for x in list(time.localtime())][0:3])
    overallWallStart = time.time()
    kmeansbenchcsv = (((('benchmarks/' + build) + '/') + date) + '/bigkmeansbench.csv')
    if (not os.path.exists(kmeansbenchcsv)):
        output = open(kmeansbenchcsv, 'w')
        output.write((','.join(csv_header) + '\n'))
    else:
        output = open(kmeansbenchcsv, 'a')
    csvWrt = csv.DictWriter(output, fieldnames=csv_header, restval=None, dialect='excel', extrasaction='ignore', delimiter=',')
    try:
        java_heap_GB = h2o.nodes[0].java_heap_GB
        importFolderPath = 'kmeans_big'
        csvPathname = 'syn_sphere15_2711545732row_6col_180GB_from_7x.csv'
        hex_key = (csvPathname + '.hex')
        trainParseWallStart = time.time()
        parseResult = h2i.import_parse(bucket='home3-0xdiag-datasets', path=csvPathname, schema='local', hex_key=hex_key, separator=44, timeoutSecs=14400, retryDelaySecs=15, pollTimeoutSecs=14400)
        parseWallTime = (time.time() - trainParseWallStart)
        print 'Parsing training file took ', parseWallTime, ' seconds.'
        inspect = h2o.nodes[0].inspect(parseResult['destination_key'])
        nMachines = (1 if (len(h2o_hosts.hosts) is 0) else len(h2o_hosts.hosts))
        row = {'h2o_build': build, 'nMachines': nMachines, 'nJVMs': len(h2o.nodes), 'Xmx/JVM': java_heap_GB, 'dataset': f, 'nRows': inspect['num_rows'], 'nCols': inspect['num_cols'], 'parseWallTime': parseWallTime, }
        params = {'source_key': hex_key, 'k': 15, 'initialization': 'Furthest', 'max_iter': 100, 'seed': 265211114317615310, 'normalize': 0, 'destination_key': (('KMeans(' + f) + ')'), }
        kwargs = params.copy()
        kmeansStart = time.time()
        kmeans = h2o_cmd.runKMeans(parseResult=parseResult, timeoutSecs=14400, **kwargs)
        kmeansTime = (time.time() - kmeansStart)
        row.update({'kmeansBuildTime': kmeansTime, })
        csvWrt.writerow(row)
    finally:
        output.close()
