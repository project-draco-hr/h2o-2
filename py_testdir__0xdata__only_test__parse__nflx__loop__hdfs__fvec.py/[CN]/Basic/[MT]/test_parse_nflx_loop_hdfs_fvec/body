def test_parse_nflx_loop_hdfs_fvec(self):
    h2o.beta_features = True
    print 'Using the -.gz files from hdfs'
    csvFilename = 'file_10.dat.gz'
    csvFilepattern = 'file_1[0-9].dat.gz'
    trialMax = 2
    for tryHeap in [24]:
        print '\n', tryHeap, 'GB heap, 1 jvm per host, import mr-0x6 hdfs, then parse'
        localhost = h2o.decide_if_localhost()
        if localhost:
            h2o.build_cloud(java_heap_GB=tryHeap, random_udp_drop=RANDOM_UDP_DROP, use_hdfs=True, hdfs_name_node='mr-0x6', hdfs_version='cdh4')
        else:
            h2o_hosts.build_cloud_with_hosts(node_count=1, java_heap_GB=tryHeap, random_udp_drop=RANDOM_UDP_DROP, use_hdfs=True, hdfs_name_node='mr-0x6', hdfs_version='cdh4')
        timeoutSecs = 500
        importFolderPath = 'datasets/manyfiles-nflx-gz'
        for trial in range(trialMax):
            hex_key = (((csvFilename + '_') + str(trial)) + '.hex')
            csvFilePattern = 'file_1.dat.gz'
            csvPathname = ((importFolderPath + '/') + csvFilePattern)
            start = time.time()
            parseResult = h2i.import_parse(path=csvPathname, schema='hdfs', hex_key=hex_key, timeoutSecs=timeoutSecs, retryDelaySecs=10, pollTimeoutSecs=60)
            elapsed = (time.time() - start)
            print 'parse result:', parseResult['destination_key']
            print 'Parse #', trial, 'completed in', ('%6.2f' % elapsed), 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
            h2o_cmd.runStoreView()
        h2o.tear_down_cloud()
        time.sleep(5)
