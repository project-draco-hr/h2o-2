{
  logStart();
  Log.debug("NetworkTester testing udp drops");
  final UDPDropTester[] dropTests=new UDPDropTester[H2O.CLOUD.size() * H2O.CLOUD.size() - H2O.CLOUD.size()];
  H2O.submitTask(new H2OCountedCompleter(){
    @Override public void compute2(){
      int k=0;
      for (int i=0; i < H2O.CLOUD.size(); ++i)       for (int j=0; j < H2O.CLOUD.size(); ++j) {
        if (i == j)         continue;
        dropTests[k++]=new UDPDropTester(H2O.CLOUD._memary[i],H2O.CLOUD._memary[j],msg_sizes,10);
      }
      ForkJoinTask.invokeAll(dropTests);
      tryComplete();
    }
  }
).join();
  dropRates=new UDPDropMatrix[msg_sizes.length];
  for (int m=0; m < msg_sizes.length; ++m) {
    double[][] ds=new double[H2O.CLOUD.size()][H2O.CLOUD.size()];
    int k=0;
    for (int i=0; i < H2O.CLOUD.size(); ++i)     for (int j=0; j < H2O.CLOUD.size(); ++j) {
      if (i == j)       continue;
      ds[i][j]=dropTests[k++]._dropRates[m];
    }
    dropRates[m]=new UDPDropMatrix(msg_sizes[m],ds);
  }
  Log.debug("Network test udp drop rates: ");
  for (  UDPDropMatrix m : dropRates)   Log.debug(m.toString());
}
