def test_parse_rand_utf8_multibyte(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(1000, 1, 'cA', 120), (1000, 1, 'cG', 120), (1000, 1, 'cH', 120)]
    print 'What about messages to log (INFO) about unmatched quotes (before eol)'
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + str(SEEDPERFILE)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print '\nCreating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', header=0, hex_key=hex_key, timeoutSecs=timeoutSecs, doSummary=False)
        print "Parse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], timeoutSecs=60)
        print 'inspect:', h2o.dump_json(inspect)
        numRows = inspect['numRows']
        self.assertEqual(numRows, rowCount, msg=('Wrong numRows: %s %s' % (numRows, rowCount)))
        numCols = inspect['numCols']
        self.assertEqual(numCols, colCount, msg=('Wrong numCols: %s %s' % (numCols, colCount)))
        for k in range(colCount):
            naCnt = inspect['cols'][k]['naCnt']
            self.assertEqual(0, naCnt, msg=('col %s naCnt %d should be 0' % (k, naCnt)))
            stype = inspect['cols'][k]['type']
            self.assertEqual('Enum', stype, msg=('col %s type %s should be Enum' % (k, stype)))
    import unicodedata
    u = (unichr(8220) + unichr(8221))
    u = unichr(8217)
    u = ((unichr(8216) + unichr(6000)) + unichr(8217))
    for (i, c) in enumerate(u):
        print i, ('%04x' % ord(c)), unicodedata.category(c),
        print unicodedata.name(c)
