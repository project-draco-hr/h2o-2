def get_and_log(self, retryDelaySecs, network=False, cpu=True, disk=True):
    cpup = psutil.cpu_percent(percpu=True)
    l = ('%s %s %s' % (self.python_test_name, 'psutil.cpu_percent:', cpup))
    if cpu:
        logging.critical(l)
    pollStats = self.pollStats
    dioc = psutil.disk_io_counters()
    diocSpotRdMBSec = ((dioc.read_bytes - pollStats['read_bytes']) / (1000000.0 * retryDelaySecs))
    diocSpotWrMBSec = ((dioc.write_bytes - pollStats['write_bytes']) / (1000000.0 * retryDelaySecs))
    pollStats['read_bytes'] = dioc.read_bytes
    pollStats['write_bytes'] = dioc.write_bytes
    diocSpotRdTime = ((dioc.read_time - pollStats['read_time']) / 1000.0)
    diocSpotWrTime = ((dioc.write_time - pollStats['write_time']) / 1000.0)
    pollStats['read_time'] = dioc.read_time
    pollStats['write_time'] = dioc.write_time
    l = 'Disk. Spot RdMB/s:{:6.2f} Spot WrMB/s:{:6.2f} {!s} {!s}'.format(diocSpotRdMBSec, diocSpotWrMBSec, diocSpotRdTime, diocSpotWrTime)
    if (disk and (pollStats['count'] > 0)):
        logging.critical(l)
    nioc = psutil.network_io_counters()
    niocSpotSentMBSec = ((nioc.bytes_sent - pollStats['bytes_sent']) / (1000000.0 * retryDelaySecs))
    niocSpotRecvMBSec = ((nioc.bytes_recv - pollStats['bytes_recv']) / (1000000.0 * retryDelaySecs))
    pollStats['bytes_sent'] = nioc.bytes_sent
    pollStats['bytes_recv'] = nioc.bytes_recv
    niocSpotDropIn = (nioc.dropin - pollStats['dropin'])
    niocSpotDropOut = (nioc.dropout - pollStats['dropout'])
    niocSpotErrIn = (nioc.errin - pollStats['errin'])
    niocSpotErrOut = (nioc.errout - pollStats['errout'])
    pollStats['dropin'] = nioc.dropin
    pollStats['dropout'] = nioc.dropout
    pollStats['errin'] = nioc.errin
    pollStats['errout'] = nioc.errout
    l = 'Network. Spot RecvMB/s:{:6.2f} Spot SentMB/s:{:6.2f} {!s} {!s} {!s} {!s}'.format(niocSpotRecvMBSec, niocSpotSentMBSec, niocSpotDropIn, niocSpotDropOut, niocSpotErrIn, niocSpotErrOut)
    if (network and (pollStats['count'] > 0)):
        logging.critical(l)
    self.pollStats['count'] += 1
    self.pollStats = pollStats
