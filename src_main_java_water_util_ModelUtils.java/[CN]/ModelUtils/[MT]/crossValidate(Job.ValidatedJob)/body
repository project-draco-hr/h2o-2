{
  if (job.validation != null)   throw new IllegalArgumentException("Cannot provide validation dataset and num_folds > 0 at the same time.");
  if (job.num_folds <= 1)   throw new IllegalArgumentException("num_folds must be >= 2 for cross-validation.");
  if (job.num_folds != 2)   throw new UnsupportedOperationException("num_folds != 2 is not yet implemented.");
  float[] ratios=TestUtil.arf(0.5f);
  String basename=job.destination_key.toString();
  basename=basename.substring(0,Math.max(Math.min(40,basename.length() - 5),0));
  Key[] destkeys=new Key[]{Key.make(basename + ".cv" + ".first"),Key.make(basename + ".cv" + ".second")};
  FrameSplitter fs=new FrameSplitter(job.source,ratios,destkeys,null);
  H2O.submitTask(fs).join();
  Frame[] splits=fs.getResult();
  long[] offsets=new long[job.num_folds + 1];
  Frame[] cv_preds=new Frame[job.num_folds];
  for (int i=0; i < job.num_folds; ++i)   job.crossValidate(basename,splits,cv_preds,offsets,i);
  boolean put_back=UKV.get(job.response._key) == null;
  if (put_back)   DKV.put(job.response._key,job.response);
  ((Model)UKV.get(job.destination_key)).scoreCrossValidation(job,job.source,job.response,cv_preds,offsets);
  if (put_back)   UKV.remove(job.response._key);
}
