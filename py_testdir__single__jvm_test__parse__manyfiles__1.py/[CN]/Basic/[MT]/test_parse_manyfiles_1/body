def test_parse_manyfiles_1(self):
    h2o.beta_features = True
    csvDirname = 'manyfiles-nflx-gz'
    timeoutSecs = 600
    trial = 0
    for iteration in range(ITERATIONS):
        csvFilename = 'file_1.dat.gz'
        csvPathname = ((csvDirname + '/') + csvFilename)
        trialStart = time.time()
        hex_key = (((csvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, schema=SCHEMA, hex_key=hex_key, delete_on_done=DELETE_ON_DONE, timeoutSecs=timeoutSecs, retryDelaySecs=10, pollTimeoutSecs=120, doSummary=False)
        elapsed = (time.time() - start)
        print 'parse', trial, 'end on ', parseResult['destination_key'], 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        start = time.time()
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], timeoutSecs=360)
        print 'Inspect:', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
        h2o_cmd.infoFromInspect(inspect, csvPathname)
        numRows = inspect['numRows']
        numCols = inspect['numCols']
        self.assertEqual(numCols, 542)
        self.assertEqual(numRows, 100000)
        print '\nTrying StoreView after the parse'
        for node in h2o.nodes:
            h2o_cmd.runStoreView(node=node, timeoutSecs=30, view=10000)
        if DO_EXEC:
            execExpr = ('A.hex=%s' % parseResult['destination_key'])
            h2e.exec_expr(execExpr=execExpr, timeoutSecs=20)
        if DO_DELETE_MYSELF:
            h2o_import.delete_keys_at_all_nodes()
        print 'Trial #', trial, 'completed in', (time.time() - trialStart), 'seconds.'
        trial += 1
