def test_parse_manyfiles_1(self):
    h2o.beta_features = True
    csvDirname = 'manyfiles-nflx-gz'
    timeoutSecs = 600
    trial = 0
    for delete_on_done in [0, 1]:
        csvPathname = (csvDirname + '/file_1.dat.gz')
        trialStart = time.time()
        hex_key = (((csvDirname + '_') + str(trial)) + '.hex')
        start = time.time()
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, schema='local', hex_key=hex_key, delete_on_done=delete_on_done, timeoutSecs=timeoutSecs, retryDelaySecs=10, pollTimeoutSecs=120, doSummary=False)
        elapsed = (time.time() - start)
        print 'parse end on ', parseResult['destination_key'], 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        start = time.time()
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], timeoutSecs=360)
        print 'Inspect:', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
        h2o_cmd.infoFromInspect(inspect, csvPathname)
        numRows = inspect['numRows']
        numCols = inspect['numCols']
        self.assertEqual(numCols, 542)
        self.assertEqual(numRows, 100000)
        goodX = h2o_glm.goodXFromColumnInfo(y=54, key=parseResult['destination_key'], timeoutSecs=300)
        print '\nTrying StoreView after the parse'
        h2o_cmd.runStoreView(timeoutSecs=120)
        execExpr = ('A.hex=%s' % parseResult['destination_key'])
        h2e.exec_expr(execExpr=execExpr, timeoutSecs=60)
        execExpr = 'A.hex[,378+1]=(A.hex[,378+1]>15)'
        h2e.exec_expr(execExpr=execExpr, timeoutSecs=60)
        aHack = {'destination_key': 'A.hex', }
        print 'Trial #', trial, 'completed in', (time.time() - trialStart), 'seconds.'
        trial += 1
