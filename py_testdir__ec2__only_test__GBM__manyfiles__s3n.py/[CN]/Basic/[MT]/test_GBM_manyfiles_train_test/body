def test_GBM_manyfiles_train_test(self):
    bucket = 'home-0xdiag-datasets'
    modelKey = 'GBMModelKey'
    if h2o.localhost:
        files = [('manyfiles-nflx-gz', 'file_1[0-9][0-9].dat.gz', 'file_100.hex', 1800, None, 'file_1.dat.gz', 'file_1_test.hex')]
    else:
        files = [('manyfiles-nflx-gz', 'file_[0-9].dat.gz', 'file_10.hex', 1800, None, 'file_1[0-9].dat.gz', 'file_10_test.hex')]
    for (importFolderPath, trainFilename, trainKey, timeoutSecs, response, testFilename, testKey) in files:
        start = time.time()
        xList = []
        eList = []
        fList = []
        csvPathname = ((importFolderPath + '/') + trainFilename)
        parseTrainResult = h2i.import_parse(bucket=bucket, path=csvPathname, schema='s3n', hex_key=trainKey, timeoutSecs=timeoutSecs, doSummary=False)
        elapsed = (time.time() - start)
        print 'train parse end on ', trainFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'train parse result:', parseTrainResult['destination_key']
        inspect = h2o_cmd.runInspect(key=parseTrainResult['destination_key'])
        print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
        num_rows = inspect['num_rows']
        num_cols = inspect['num_cols']
        execExpr = ('%s[,378] = %s[,378]>15 ? 1 : 0' % (trainKey, trainKey))
        resultExec = h2o_cmd.runExec(str=execExpr, timeoutSecs=500)
        parseTestResult = h2i.import_parse(bucket=bucket, path=((importFolderPath + '/') + testFilename), schema='local', hex_key=testKey, timeoutSecs=timeoutSecs, doSummary=False)
        elapsed = (time.time() - start)
        print 'test parse end on ', testFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'test parse result:', parseTestResult['destination_key']
        print 'Slow! exec is converting all imported keys?, not just what was parsed'
        execExpr = ('%s[,378] = %s[,378]>15 ? 1 : 0' % (testKey, testKey, testKey))
        resultExec = h2o_cmd.runExec(str=execExpr, timeoutSecs=300)
        response = 378
        print ('Using the same response %s for train and test (which should have a output value too)' % response)
        ntrees = 10
        for max_depth in [5, 10, 20, 40]:
            params = {'learn_rate': 0.2, 'nbins': 1024, 'ntrees': ntrees, 'max_depth': max_depth, 'min_rows': 10, 'response': response, }
            print 'Using these parameters for GBM: ', params
            kwargs = params.copy()
            trainStart = time.time()
            gbmTrainResult = h2o_cmd.runGBM(parseResult=parseTrainResult, timeoutSecs=timeoutSecs, destination_key=modelKey, **kwargs)
            trainElapsed = (time.time() - trainStart)
            print 'GBM training completed in', trainElapsed, 'seconds. On dataset: ', trainFilename
            gbmTrainView = h2o_cmd.runGBMView(model_key=modelKey)
            errsLast = gbmTrainView['gbm_model']['errs'][(-1)]
            print "GBM 'errsLast'", errsLast
            cm = gbmTrainView['gbm_model']['cm']
            pctWrongTrain = h2o_gbm.pp_cm_summary(cm)
            print 'Last line of this cm might be NAs, not CM'
            print '\nTrain\n==========\n'
            print h2o_gbm.pp_cm(cm)
            if doPredict:
                predictKey = 'Predict.hex'
                start = time.time()
                gbmTestResult = h2o_cmd.runPredict(data_key=parseTestResult['destination_key'], model_key=modelKey, destination_key=predictKey, timeoutSecs=timeoutSecs)
                elapsed = (time.time() - start)
                print 'GBM predict completed in', elapsed, 'seconds. On dataset: ', testFilename
                print 'This is crazy!'
                gbmPredictCMResult = h2o.nodes[0].predict_confusion_matrix(actual=parseTestResult['destination_key'], vactual=response, predict=predictKey, vpredict='predict')
                cm = gbmPredictCMResult['cm']
                pctWrong = h2o_gbm.pp_cm_summary(cm)
                print 'Last line of this cm is really NAs, not CM'
                print '\nTest\n==========\n'
                print h2o_gbm.pp_cm(cm)
                xList.append(max_depth)
                eList.append(pctWrong)
                fList.append(trainElapsed)
        if doPredict:
            xLabel = 'max_depth'
            eLabel = 'pctWrong'
            fLabel = 'trainElapsed'
            eListTitle = ''
            fListTitle = ''
            h2o_gbm.plotLists(xList, xLabel, eListTitle, eList, eLabel, fListTitle, fList, fLabel)
