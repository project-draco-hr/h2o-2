{
  int x=E._x;
  String var=E.isID();
  if (var == null)   return null;
  if (!"function".equals(var)) {
    E._x=x;
    return null;
  }
  E.xpeek('(',E._x,null);
  ArrayList<ASTId> vars=new ArrayList<ASTId>();
  if (!E.peek(')')) {
    while (true) {
      x=E._x;
      var=E.isID();
      if (var == null)       E.throwErr("Invalid var",x);
      for (      ASTId id : vars)       if (var.equals(id._id))       E.throwErr("Repeated argument",x);
      vars.add(new ASTId(Type.unbound(),var,0,vars.size()));
      if (E.peek(')'))       break;
      E.xpeek(',',E._x,null);
    }
  }
  int argcnt=vars.size();
  E._env.push(vars);
  AST body=E.peek('{') ? E.xpeek('}',E._x,ASTStatement.parse(E)) : parseCXExpr(E);
  if (body == null)   E.throwErr("Missing function body",x);
  E._env.pop();
  String xvars[]=new String[argcnt + 1];
  Type types[]=new Type[argcnt + 1];
  xvars[0]="fun";
  types[0]=body._t;
  for (int i=0; i < argcnt; i++) {
    ASTId id=vars.get(i);
    xvars[i + 1]=id._id;
    types[i + 1]=id._t;
  }
  return new ASTFunc(xvars,types,body,vars.size() - argcnt);
}
