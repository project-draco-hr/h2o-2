{
  CtField ctfs[]=cc.getDeclaredFields();
  boolean api=false;
  for (  CtField ctf : ctfs)   if (ctf.getName().equals("API_WEAVER")) {
    api=true;
    break;
  }
  if (api == false)   return;
  CtField fielddoc=null;
  CtField getdoc=null;
  boolean callsuper=true;
  for (  CtClass base : _serBases)   if (cc.getSuperclass() == base)   callsuper=false;
  make_body(cc,ctfs,callsuper,"public water.AutoBuffer writeJSONFields(water.AutoBuffer ab) {\n","  super.writeJSONFields(ab)","  ab.putJSON%z(\"%s\",%s)","  ab.putEnumJSON(\"%s\",%s)","  ab.putJSON%z(\"%s\",%s)",".put1(',');\n",";\n  return ab;\n}",new FieldFilter(){
    @Override boolean filter(    CtField ctf) throws NotFoundException {
      API api=null;
      try {
        api=(API)ctf.getAnnotation(API.class);
      }
 catch (      ClassNotFoundException ex) {
        throw new NotFoundException("getAnnotations throws ",ex);
      }
      return api != null && (api.json() || !isInput(ctf.getType(),api));
    }
  }
);
  StringBuilder sb=new StringBuilder();
  sb.append("new water.api.DocGen$FieldDoc[] {");
  ArrayList<CtClass> classes=new ArrayList<CtClass>();
  CtClass current=cc;
  while (true) {
    classes.add(current);
    current=current.getSuperclass();
    api=false;
    for (    CtField ctf : current.getDeclaredFields())     if (ctf.getName().equals("API_WEAVER"))     api=true;
    if (api == false)     break;
  }
  Collections.reverse(classes);
  boolean first=true;
  for (  CtClass c : classes) {
    for (    CtField ctf : c.getDeclaredFields()) {
      int mods=ctf.getModifiers();
      if (javassist.Modifier.isStatic(mods)) {
        if (c == cc) {
          if (ctf.getName().equals("DOC_FIELDS"))           fielddoc=ctf;
          if (ctf.getName().equals("DOC_GET"))           getdoc=ctf;
        }
        continue;
      }
      first=addDocIfAPI(sb,ctf,cc,first);
    }
  }
  sb.append("}");
  if (fielddoc == null)   throw new CannotCompileException("Did not find static final DocGen.FieldDoc[] DOC_FIELDS field;");
  if (!fielddoc.getType().isArray() || fielddoc.getType().getComponentType() != _fielddoc)   throw new CannotCompileException("DOC_FIELDS not declared static final DocGen.FieldDoc[];");
  cc.removeField(fielddoc);
  cc.addField(fielddoc,CtField.Initializer.byExpr(sb.toString()));
  cc.addMethod(CtNewMethod.make("  public water.api.DocGen$FieldDoc[] toDocField() { return DOC_FIELDS; }",cc));
  if (getdoc != null)   cc.addMethod(CtNewMethod.make("  public String toDocGET() { return DOC_GET; }",cc));
}
