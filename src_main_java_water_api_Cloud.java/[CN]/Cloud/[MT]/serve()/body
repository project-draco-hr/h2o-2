{
  JsonObject response=new JsonObject();
  final H2O cloud=H2O.CLOUD;
  final H2ONode self=H2O.SELF;
  response.addProperty(VERSION,H2O.VERSION);
  response.addProperty(CLOUD_NAME,H2O.NAME);
  response.addProperty(NODE_NAME,self.toString());
  response.addProperty(CLOUD_SIZE,cloud._memary.length);
  JsonArray nodes=new JsonArray();
  for (  H2ONode h2o : cloud._memary) {
    HeartBeat hb=h2o._heartbeat;
    JsonObject node=new JsonObject();
    node.addProperty(NAME,h2o.toString());
    node.addProperty(NUM_KEYS,hb._keys);
    node.addProperty(VALUE_SIZE,hb.get_valsz());
    node.addProperty(FREE_MEM,hb.get_free_mem());
    node.addProperty(TOT_MEM,hb.get_tot_mem());
    node.addProperty(MAX_MEM,hb.get_max_mem());
    node.addProperty(FREE_DISK,hb.get_free_disk());
    node.addProperty(MAX_DISK,hb.get_max_disk());
    node.addProperty(NUM_CPUS,(int)hb._num_cpus);
    node.addProperty(SYSTEM_LOAD,hb._system_load_average);
    JsonArray fjt=new JsonArray();
    JsonArray fjq=new JsonArray();
    if (hb._fjthrds_hi != null) {
      for (int i=0; i < hb._fjthrds_hi.length; i++) {
        fjt.add(new JsonPrimitive(hb._fjthrds_hi[i]));
        fjq.add(new JsonPrimitive(hb._fjqueue_hi[i]));
      }
    }
    node.add(FJ_THREADS_HI,fjt);
    node.add(FJ_QUEUE_HI,fjq);
    node.addProperty(FJ_THREADS_LO,(int)hb._fjthrds_lo);
    node.addProperty(FJ_QUEUE_LO,(int)hb._fjqueue_lo);
    node.addProperty(RPCS,(int)hb._rpcs);
    node.addProperty(TCPS_ACTIVE,(int)hb._tcps_active);
    if (hb._process_num_open_fds >= 0) {
      node.addProperty("open_fds",hb._process_num_open_fds);
    }
 else {
      node.addProperty("open_fds","N/A");
    }
    int my_cpu_pct=-1;
    int sys_cpu_pct=-1;
{
      LastTicksEntry lte=ticksHashMap.get(h2o.toString());
      if (lte != null) {
        long system_total_ticks_delta=hb._system_total_ticks - lte._system_total_ticks;
        if (system_total_ticks_delta > 0) {
          long system_idle_ticks_delta=hb._system_idle_ticks - lte._system_idle_ticks;
          double sys_cpu_frac_double=1 - ((double)(system_idle_ticks_delta) / (double)system_total_ticks_delta);
          if (sys_cpu_frac_double < 0)           sys_cpu_frac_double=0;
 else           if (sys_cpu_frac_double > 1)           sys_cpu_frac_double=1;
          sys_cpu_pct=(int)(sys_cpu_frac_double * 100);
          long process_total_ticks_delta=hb._process_total_ticks - lte._process_total_ticks;
          double process_cpu_frac_double=((double)(process_total_ticks_delta) / (double)system_total_ticks_delta);
          if (process_cpu_frac_double < 0)           process_cpu_frac_double=0;
 else           if (process_cpu_frac_double > 1)           process_cpu_frac_double=1;
          my_cpu_pct=(int)(process_cpu_frac_double * 100);
        }
      }
      LastTicksEntry newLte=new LastTicksEntry(hb);
      ticksHashMap.put(h2o.toString(),newLte);
    }
    if (my_cpu_pct >= 0) {
      node.addProperty("my_cpu_%",my_cpu_pct);
    }
 else {
      node.addProperty("my_cpu_%","N/A");
    }
    if (sys_cpu_pct >= 0) {
      node.addProperty("sys_cpu_%",sys_cpu_pct);
    }
 else {
      node.addProperty("sys_cpu_%","N/A");
    }
    node.addProperty(LAST_CONTACT,h2o._last_heard_from);
    nodes.add(node);
  }
  response.add(NODES,nodes);
  response.addProperty(CONSENSUS,Paxos._commonKnowledge);
  response.addProperty(LOCKED,Paxos._cloudLocked);
  Response r=Response.done(response);
  r.setBuilder(CONSENSUS,new BooleanStringBuilder("","Voting new members"));
  r.setBuilder(LOCKED,new BooleanStringBuilder("Locked","Accepting new members"));
  r.setBuilder(NODES,new MyAryBuilder());
  r.setBuilder(NODES + "." + NAME,new NodeCellBuilder());
  r.setBuilder(NODES + "." + LAST_CONTACT,new LastContactBuilder());
  return r;
}
