def test_PCA_manyfiles(self):
    bucket = 'home-0xdiag-datasets'
    modelKey = 'GBMModelKey'
    files = [('manyfiles-nflx-gz', 'file_1.dat.gz', 'file_1.hex', 1800)]
    for (importFolderPath, csvFilename, hexKey, timeoutSecs) in files:
        h2o.beta_features = False
        start = time.time()
        xList = []
        eList = []
        fList = []
        if h2o.beta_features:
            print 'Parsing to fvec directly! Have to noPoll=true!, and doSummary=False!'
        csvPathname = ((importFolderPath + '/') + csvFilename)
        parseResult = h2i.import_parse(bucket=bucket, path=csvPathname, schema='local', hex_key=hexKey, timeoutSecs=timeoutSecs, noPoll=h2o.beta_features, doSummary=False)
        if h2o.beta_features:
            h2j.pollWaitJobs(timeoutSecs=timeoutSecs, pollTimeoutSecs=timeoutSecs)
            print "Filling in the parseResult['destination_key'] for h2o"
            parseResult['destination_key'] = hexKey
        elapsed = (time.time() - start)
        print 'parse end on ', csvPathname, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseResult['destination_key']
        algo = 'Parse'
        l = '{:d} jvms, {:d}GB heap, {:s} {:s} {:6.2f} secs'.format(len(h2o.nodes), h2o.nodes[0].java_heap_GB, algo, csvFilename, elapsed)
        print l
        h2o.cloudPerfH2O.message(l)
        inspect = h2o_cmd.runInspect(key=parseResult['destination_key'])
        print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
        num_rows = inspect['num_rows']
        num_cols = inspect['num_cols']
        for tolerance in [(i / 10.0) for i in range(11)]:
            params = {'destination_key': modelKey, 'ignore': 0, 'tolerance': tolerance, 'standardize': 1, }
            print 'Using these parameters for PCA: ', params
            kwargs = params.copy()
            pcaResult = h2o_cmd.runPCA(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
            print 'PCA completed in', pcaResult['python_elapsed'], 'seconds. On dataset: ', csvPathname
            print 'Elapsed time was ', pcaResult['python_%timeout'], '% of the timeout'
            print 'Checking PCA results: '
            h2o_pca.simpleCheckPCA(self, pcaResult)
            h2o_pca.resultsCheckPCA(self, pcaResult)
            algo = (('PCA ' + ' tolerance=') + str(tolerance))
            l = '{:d} jvms, {:d}GB heap, {:s} {:s} {:6.2f} secs'.format(len(h2o.nodes), h2o.nodes[0].java_heap_GB, algo, csvFilename, pcaResult['python_elapsed'])
            print l
            h2o.cloudPerfH2O.message(l)
            pcaInspect = h2o_cmd.runInspect(key=modelKey)
            sdevs = pcaInspect['PCAModel']['stdDev']
            print 'PCA: standard deviations are :', sdevs
            print 
            print 
            propVars = pcaInspect['PCAModel']['propVar']
            print 'PCA: Proportions of variance by eigenvector are :', propVars
            print 
            print 
