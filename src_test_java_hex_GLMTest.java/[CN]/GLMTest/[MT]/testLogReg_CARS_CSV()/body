{
  Key k1=loadAndParseFile("h.hex","smalldata/cars.csv");
  ValueArray va=null;
  try {
    int[] cols=new int[]{3,4,5,6,7,2};
    va=DKV.get(k1).get();
    LSMSolver lsmsx=new ADMMSolver(0,0.0);
    JsonObject glm=computeGLM(Family.binomial,lsmsx,va,cols);
    JsonObject coefs=glm.get("coefficients").getAsJsonObject();
    double icept=coefs.get("Intercept").getAsDouble();
    double disp=coefs.get("displacement (cc)").getAsDouble();
    double power=coefs.get("power (hp)").getAsDouble();
    double weight=coefs.get("weight (lb)").getAsDouble();
    double accel=coefs.get("0-60 mph (s)").getAsDouble();
    double year=coefs.get("year").getAsDouble();
    AutoBuffer ab=va.getChunk(0);
    ROWS:     for (int i=0; i < va._numrows; i++) {
      for (int j=2; j < 8; j++)       if (va.isNA(ab,i,j))       continue ROWS;
      double x=disp * va.datad(ab,i,3) + power * va.datad(ab,i,4) + weight * va.datad(ab,i,5) + accel * va.datad(ab,i,6) + year * va.datad(ab,i,7) + icept;
      double p=1.0 / (1.0 + Math.exp(-x));
      double cyl=va.data(ab,i,2);
      assertEquals(cyl,p,0.005);
    }
    GLMModel glmmodel=DKV.get(Key.make(glm.get(Constants.MODEL_KEY).getAsString())).get();
    glmmodel.delete();
  }
  finally {
    if (va != null)     va.delete();
  }
}
