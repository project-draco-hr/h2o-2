{
  Key datakey=Key.make("datakey");
  ValueArray va=va_maker(datakey,new byte[]{0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9},new float[]{0.0f,0.1f,0.2f,0.3f,0.4f,0.5f,0.6f,0.7f,0.8f,0.9f,0f,0f,0f,0f,0f,0f,0f,0f,0f,0f});
  try {
    LSMSolver lsms=new ADMMSolver(0,0);
    double[] var_powers=new double[]{1.5,1.1,1.9};
    double[] beta0s=new double[]{3.643,1.318,9.154};
    double[] beta1s=new double[]{-0.260,-0.0284,-0.853};
    for (int test=0; test < var_powers.length; test++) {
      Family family=Family.tweedie;
      family.tweedieVariancePower=var_powers[test];
      family.defaultLink=Link.tweedie;
      family.defaultLink.tweedieLinkPower=1. - var_powers[test];
      JsonObject glm=computeGLM(family,lsms,va,null);
      JsonObject coefs=glm.get("coefficients").getAsJsonObject();
      assertEquals("tweedie test variance power = " + var_powers[test],beta0s[test],coefs.get("Intercept").getAsDouble(),0.001);
      assertEquals("tweedie test variance power = " + var_powers[test],beta1s[test],coefs.get("C1").getAsDouble(),0.001);
      GLMModel glmmodel=DKV.get(Key.make(glm.get(Constants.MODEL_KEY).getAsString())).get();
      glmmodel.delete();
    }
  }
  finally {
    va.delete();
  }
}
