def test_RF_mnist_fvec(self):
    h2o.beta_features = True
    importFolderPath = 'mnist'
    csvFilelist = [('mnist_training.csv.gz', 'mnist_testing.csv.gz', 600)]
    trial = 0
    for (trainCsvFilename, testCsvFilename, timeoutSecs) in csvFilelist:
        trialStart = time.time()
        testKey2 = (((testCsvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=((importFolderPath + '/') + testCsvFilename), hex_key=testKey2, timeoutSecs=timeoutSecs)
        elapsed = (time.time() - start)
        print 'parse end on ', testCsvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseResult['destination_key']
        print "We won't use this pruning of x on test data. See if it prunes the same as the training"
        y = 0
        print 'y:'
        trainKey2 = (((trainCsvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=((importFolderPath + '/') + trainCsvFilename), schema='local', hex_key=trainKey2, timeoutSecs=timeoutSecs)
        elapsed = (time.time() - start)
        print 'parse end on ', trainCsvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseResult['destination_key']
        print "This is the 'ignore=' we'll use"
        x = range(1, 50)

        def cit(i):
            return ('C' + str(i))
        cols = ','.join(map(cit, x))
        print 'cols:', cols
        ntree = 10
        params = {'response': ('C' + str(y)), 'cols': cols, 'ignored_cols_by_name': None, 'classification': None, 'validation': None, 'ntrees': 2, 'max_depth': None, 'min_rows': None, 'nbins': 10000, 'mtries': None, 'sample_rate': 0.66, 'seed': None, }
    rfViewInitial = []
    for jobDispatch in range(1):
        params['destination_key'] = ('RFModel_' + str('jobDispatch'))
        kwargs = params.copy()
        timeoutSecs = (30 + (kwargs['ntrees'] * 20))
        start = time.time()
        rfResult = h2o_cmd.runRF(parseResult=parseResult, timeoutSecs=timeoutSecs, noPoll=True, rfView=False, **kwargs)
        elapsed = (time.time() - start)
        print h2o.dump_json(rfResult)
        print 'rf job dispatch end on ', trainCsvFilename, 'took', (time.time() - start), 'seconds'
        print '\njobDispatch #', jobDispatch
        rfView = {}
        rfView['data_key'] = trainKey2
        rfView['model_key'] = kwargs['destination_key']
        rfView['ntrees'] = kwargs['ntrees']
        rfViewInitial.append(rfView)
        h2o_jobs.pollWaitJobs(timeoutSecs=300, pollTimeoutSecs=120, retryDelaySecs=5)
        print 'rfViewInitial', rfViewInitial
        for rfView in rfViewInitial:
            print 'Checking completed job:', rfView
            print 'rfView', h2o.dump_json(rfView)
            data_key = rfView['data_key']
            model_key = rfView['model_key']
            ntrees = rfView['ntrees']
            rfView = h2o_cmd.runRFView(None, model_key=model_key, timeoutSecs=60, noPoll=True, doSimpleCheck=False)
            h2o_jobs.pollWaitJobs(timeoutSecs=300, pollTimeoutSecs=300, retryDelaySecs=5)
            print 'rfView:', h2o.dump_json(rfView)
            rf_model = rfView['drf_model']
            cm = rf_model['cm']
            ntrees = rf_model['N']
            errs = rf_model['errs']
            N = rf_model['N']
            predict = h2o.nodes[0].generate_predictions(model_key=model_key, data_key=data_key)
