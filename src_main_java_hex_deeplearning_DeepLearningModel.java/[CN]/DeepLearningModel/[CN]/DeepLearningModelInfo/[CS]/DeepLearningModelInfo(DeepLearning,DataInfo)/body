{
  data_info=dinfo;
  final int num_input=dinfo.fullN();
  final int num_output=params.classification ? dinfo._adaptedFrame.lastVec().domain().length : 1;
  assert(num_input > 0);
  assert(num_output > 0);
  parameters=params;
  if (has_momenta() && adaDelta())   throw new IllegalArgumentException("Cannot have non-zero momentum and adaptive rate at the same time.");
  final int layers=parameters.hidden.length;
  units=new int[layers + 2];
  units[0]=num_input;
  System.arraycopy(parameters.hidden,0,units,1,layers);
  units[layers + 1]=num_output;
  weights=new float[layers + 1][];
  for (int i=0; i <= layers; ++i)   weights[i]=new float[units[i] * units[i + 1]];
  biases=new float[layers + 1][];
  for (int i=0; i <= layers; ++i)   biases[i]=new float[units[i + 1]];
  fillHelpers();
  mean_rate=new float[units.length];
  rms_rate=new float[units.length];
  mean_bias=new float[units.length];
  rms_bias=new float[units.length];
  mean_weight=new float[units.length];
  rms_weight=new float[units.length];
}
