{
  if (_key == null) {
    DocGen.HTML.title(sb,"No model yet");
    return true;
  }
  final String mse_format="%g";
  final Errors error=last_scored();
  DocGen.HTML.title(sb,title);
  job().toHTML(sb);
  final Key val_key=get_params().validation != null ? get_params().validation._key : null;
  final Key bestModelKey=_actual_best_model_key;
  sb.append("<div class='alert'>Actions: " + (jobKey != null && UKV.get(jobKey) != null && Job.isRunning(jobKey) ? "<i class=\"icon-stop\"></i>" + Cancel.link(jobKey,"Stop training") + ", " : "") + Inspect2.link("Inspect training data (" + _dataKey + ")",_dataKey)+ ", "+ (val_key != null ? (Inspect2.link("Inspect validation data (" + val_key + ")",val_key) + ", ") : "")+ water.api.Predict.link(_key,"Score on dataset")+ ", "+ DeepLearning.link(_dataKey,"Compute new model",null,responseName(),val_key)+ (bestModelKey != null && UKV.get(bestModelKey) != null && bestModelKey != _key ? ", " + DeepLearningModelView.link("Go to best model",bestModelKey) : "")+ (jobKey == null || (UKV.get(jobKey) != null && Job.isEnded(jobKey)) ? ", <i class=\"icon-play\"></i>" + DeepLearning.link(_dataKey,"Continue training this model",_key,responseName(),val_key) : "")+ "</div>");
  DocGen.HTML.paragraph(sb,"Model Key: " + _key);
  if (jobKey != null)   DocGen.HTML.paragraph(sb,"Job Key: " + jobKey);
  DocGen.HTML.paragraph(sb,"Model type: " + (get_params().classification ? " Classification" : " Regression") + ", predicting: "+ responseName());
  DocGen.HTML.paragraph(sb,"Number of model parameters (weights/biases): " + String.format("%,d",model_info().size()));
  if (model_info.unstable()) {
    final String msg="Job was aborted due to observed numerical instability (exponential growth)." + " Try a bounded activation function or regularization with L1, L2 or max_w2 and/or use a smaller learning rate or faster annealing.";
    DocGen.HTML.section(sb,"=======================================================================================");
    DocGen.HTML.section(sb,msg);
    DocGen.HTML.section(sb,"=======================================================================================");
  }
  DocGen.HTML.title(sb,"Progress");
  epoch_counter=training_rows > 0 ? (float)model_info().get_processed_total() / training_rows : 0;
  final double progress=get_params().progress();
  if (get_params() != null && get_params().diagnostics) {
    DocGen.HTML.section(sb,"Status of Neuron Layers");
    sb.append("<table class='table table-striped table-bordered table-condensed'>");
    sb.append("<tr>");
    sb.append("<th>").append("#").append("</th>");
    sb.append("<th>").append("Units").append("</th>");
    sb.append("<th>").append("Type").append("</th>");
    sb.append("<th>").append("Dropout").append("</th>");
    sb.append("<th>").append("L1").append("</th>");
    sb.append("<th>").append("L2").append("</th>");
    if (get_params().adaptive_rate) {
      sb.append("<th>").append("Rate (Mean, RMS)").append("</th>");
    }
 else {
      sb.append("<th>").append("Rate").append("</th>");
      sb.append("<th>").append("Momentum").append("</th>");
    }
    sb.append("<th>").append("Weight (Mean, RMS)").append("</th>");
    sb.append("<th>").append("Bias (Mean, RMS)").append("</th>");
    sb.append("</tr>");
    Neurons[] neurons=DeepLearningTask.makeNeuronsForTesting(model_info());
    for (int i=0; i < neurons.length; ++i) {
      sb.append("<tr>");
      sb.append("<td>").append("<b>").append(i + 1).append("</b>").append("</td>");
      sb.append("<td>").append("<b>").append(neurons[i].units).append("</b>").append("</td>");
      sb.append("<td>").append(neurons[i].getClass().getSimpleName()).append("</td>");
      if (i == 0) {
        sb.append("<td>");
        sb.append(formatPct(neurons[i].params.input_dropout_ratio));
        sb.append("</td>");
        sb.append("<td></td>");
        sb.append("<td></td>");
        sb.append("<td></td>");
        if (!get_params().adaptive_rate)         sb.append("<td></td>");
        sb.append("<td></td>");
        sb.append("<td></td>");
        sb.append("</tr>");
        continue;
      }
 else       if (i < neurons.length - 1) {
        sb.append("<td>");
        sb.append(formatPct(neurons[i].params.hidden_dropout_ratios[i - 1]));
        sb.append("</td>");
      }
 else {
        sb.append("<td></td>");
      }
      final String format="%g";
      sb.append("<td>").append(neurons[i].params.l1).append("</td>");
      sb.append("<td>").append(neurons[i].params.l2).append("</td>");
      if (get_params().adaptive_rate) {
        sb.append("<td>(").append(String.format(format,model_info.mean_rate[i])).append(", ").append(String.format(format,model_info.rms_rate[i])).append(")</td>");
      }
 else {
        sb.append("<td>").append(String.format("%.5g",neurons[i].rate(error.training_samples))).append("</td>");
        sb.append("<td>").append(String.format("%.5f",neurons[i].momentum(error.training_samples))).append("</td>");
      }
      sb.append("<td>(").append(String.format(format,model_info.mean_weight[i])).append(", ").append(String.format(format,model_info.rms_weight[i])).append(")</td>");
      sb.append("<td>(").append(String.format(format,model_info.mean_bias[i])).append(", ").append(String.format(format,model_info.rms_bias[i])).append(")</td>");
      sb.append("</tr>");
    }
    sb.append("</table>");
  }
  if (isClassifier()) {
    DocGen.HTML.section(sb,"Classification error on training data: " + formatPct(error.train_err));
    if (error.validation) {
      DocGen.HTML.section(sb,"Classification error on validation data: " + formatPct(error.valid_err));
    }
 else     if (error.num_folds > 0) {
      DocGen.HTML.section(sb,"Classification error on " + error.num_folds + "-fold cross-validated training data"+ (_have_cv_results ? ": " + formatPct(error.valid_err) : " is being computed - please reload this page later."));
    }
  }
 else {
    DocGen.HTML.section(sb,"MSE on training data: " + String.format(mse_format,error.train_mse));
    if (error.validation) {
      DocGen.HTML.section(sb,"MSE on validation data: " + formatPct(error.valid_err));
    }
 else     if (error.num_folds > 0) {
      DocGen.HTML.section(sb,"MSE on " + error.num_folds + "-fold cross-validated training data"+ (_have_cv_results ? ": " + String.format(mse_format,error.valid_mse) : " is being computed - please reload this page later."));
    }
  }
  DocGen.HTML.paragraph(sb,"Training samples: " + String.format("%,d",model_info().get_processed_total()));
  DocGen.HTML.paragraph(sb,"Epochs: " + String.format("%.3f",epoch_counter) + " / "+ String.format("%.3f",get_params().epochs));
  int cores=0;
  for (  H2ONode n : H2O.CLOUD._memary)   cores+=n._heartbeat._num_cpus;
  DocGen.HTML.paragraph(sb,"Number of compute nodes: " + (model_info.get_params().single_node_mode ? ("1 (" + H2O.NUMCPUS + " threads)") : (H2O.CLOUD.size() + " (" + cores+ " threads)")));
  DocGen.HTML.paragraph(sb,"Training samples per iteration: " + String.format("%,d",get_params().actual_train_samples_per_iteration));
  final boolean isEnded=get_params().self() == null || (UKV.get(get_params().self()) != null && Job.isEnded(get_params().self()));
  final long time_so_far=isEnded ? run_time : run_time + System.currentTimeMillis() - _timeLastScoreEnter;
  if (time_so_far > 0) {
    DocGen.HTML.paragraph(sb,"Training speed: " + String.format("%,d",model_info().get_processed_total() * 1000 / time_so_far) + " samples/s");
  }
  DocGen.HTML.paragraph(sb,"Training time: " + PrettyPrint.msecs(time_so_far,true));
  if (progress > 0 && !isEnded)   DocGen.HTML.paragraph(sb,"Estimated time left: " + PrettyPrint.msecs((long)(time_so_far * (1 - progress) / progress),true));
  long score_train=error.score_training_samples;
  long score_valid=error.score_validation_samples;
  final boolean fulltrain=score_train == 0 || score_train == training_rows;
  final boolean fullvalid=error.validation && get_params().n_folds == 0 && (score_valid == 0 || score_valid == get_params().validation.numRows());
  final String toolarge=" Confusion matrix not shown here - too large: number of classes (" + model_info.units[model_info.units.length - 1] + ") is greater than the specified limit of "+ get_params().max_confusion_matrix_size+ ".";
  boolean smallenough=model_info.units[model_info.units.length - 1] <= get_params().max_confusion_matrix_size;
  if (!error.validation) {
    if (_have_cv_results) {
      RString v_rs=new RString("<a href='Inspect2.html?src_key=%$key'>%key</a>");
      v_rs.replace("key",get_params().source._key);
      String cmTitle="<div class=\"alert\">Scoring results reported for " + error.num_folds + "-fold cross-validated training data "+ v_rs.toString()+ ":</div>";
      sb.append("<h5>" + cmTitle);
      sb.append("</h5>");
    }
 else {
      RString t_rs=new RString("<a href='Inspect2.html?src_key=%$key'>%key</a>");
      t_rs.replace("key",get_params().source._key);
      String cmTitle="<div class=\"alert\">Scoring results reported on training data " + t_rs.toString() + (fulltrain ? "" : " (" + score_train + " samples)")+ ":</div>";
      sb.append("<h5>" + cmTitle);
      sb.append("</h5>");
    }
  }
 else {
    RString v_rs=new RString("<a href='Inspect2.html?src_key=%$key'>%key</a>");
    v_rs.replace("key",get_params().validation._key != null ? get_params().validation._key : "");
    String cmTitle="<div class=\"alert\">Scoring results reported on validation data " + v_rs.toString() + (fullvalid ? "" : " (" + score_valid + " samples)")+ ":</div>";
    sb.append("<h5>" + cmTitle);
    sb.append("</h5>");
  }
  if (isClassifier()) {
    if (error.validAUC != null) {
      error.validAUC.toHTML(sb);
    }
 else     if (error.trainAUC != null) {
      error.trainAUC.toHTML(sb);
    }
 else {
      if (error.validation) {
        if (error.valid_confusion_matrix != null && smallenough) {
          error.valid_confusion_matrix.toHTML(sb);
        }
 else         if (smallenough)         sb.append("<h5>Confusion matrix on validation data is not yet computed.</h5>");
 else         sb.append(toolarge);
      }
 else       if (_have_cv_results) {
        if (error.valid_confusion_matrix != null && smallenough) {
          error.valid_confusion_matrix.toHTML(sb);
        }
 else         if (smallenough)         sb.append("<h5>Confusion matrix on " + error.num_folds + "-fold cross-validated training data is not yet computed.</h5>");
 else         sb.append(toolarge);
      }
 else {
        if (error.train_confusion_matrix != null && smallenough) {
          error.train_confusion_matrix.toHTML(sb);
        }
 else         if (smallenough)         sb.append("<h5>Confusion matrix on training data is not yet computed.</h5>");
 else         sb.append(toolarge);
      }
    }
  }
  if (error.valid_hitratio != null) {
    error.valid_hitratio.toHTML(sb);
  }
 else   if (error.train_hitratio != null) {
    error.train_hitratio.toHTML(sb);
  }
  if (error.variable_importances != null) {
    error.variable_importances.toHTML(this,sb);
  }
  printCrossValidationModelsHTML(sb);
  DocGen.HTML.title(sb,"Scoring history");
  if (errors.length > 1) {
    DocGen.HTML.paragraph(sb,"Time taken for last scoring and diagnostics: " + PrettyPrint.msecs(errors[errors.length - 1].scoring_time,true));
{
      final long pts=fulltrain ? training_rows : score_train;
      String training="Number of training data samples for scoring: " + (fulltrain ? "all " : "") + pts;
      if (pts < 1000 && training_rows >= 1000)       training+=" (low, scoring might be inaccurate -> consider increasing this number in the expert mode)";
      if (pts > 100000 && errors[errors.length - 1].scoring_time > 10000)       training+=" (large, scoring can be slow -> consider reducing this number in the expert mode or scoring manually)";
      DocGen.HTML.paragraph(sb,training);
    }
    if (error.validation) {
      final long ptsv=fullvalid ? get_params().validation.numRows() : score_valid;
      String validation="Number of validation data samples for scoring: " + (fullvalid ? "all " : "") + ptsv;
      if (ptsv < 1000 && get_params().validation.numRows() >= 1000)       validation+=" (low, scoring might be inaccurate -> consider increasing this number in the expert mode)";
      if (ptsv > 100000 && errors[errors.length - 1].scoring_time > 10000)       validation+=" (large, scoring can be slow -> consider reducing this number in the expert mode or scoring manually)";
      DocGen.HTML.paragraph(sb,validation);
    }
    if (isClassifier() && nclasses() != 2) {
      float[] err=new float[errors.length];
      float[] samples=new float[errors.length];
      for (int i=0; i < err.length; ++i) {
        err[i]=(float)errors[i].train_err;
        samples[i]=errors[i].training_samples;
      }
      new D3Plot(samples,err,"training samples","classification error","classification error on training data").generate(sb);
      if (get_params().validation != null) {
        for (int i=0; i < err.length; ++i) {
          err[i]=(float)errors[i].valid_err;
        }
        new D3Plot(samples,err,"training samples","classification error","classification error on validation set").generate(sb);
      }
    }
 else     if (!isClassifier()) {
      float[] err=new float[errors.length - 1];
      float[] samples=new float[errors.length - 1];
      for (int i=0; i < err.length; ++i) {
        err[i]=(float)errors[i + 1].train_mse;
        samples[i]=errors[i + 1].training_samples;
      }
      new D3Plot(samples,err,"training samples","MSE","regression error on training data").generate(sb);
      if (get_params().validation != null) {
        for (int i=0; i < err.length; ++i) {
          err[i]=(float)errors[i + 1].valid_mse;
        }
        new D3Plot(samples,err,"training samples","MSE","regression error on validation data").generate(sb);
      }
    }
  }
  if (error.validation) {
  }
  sb.append("<table class='table table-striped table-bordered table-condensed'>");
  sb.append("<tr>");
  sb.append("<th>Training Time</th>");
  sb.append("<th>Training Epochs</th>");
  sb.append("<th>Training Samples</th>");
  if (isClassifier()) {
    sb.append("<th>Training Error</th>");
    if (nclasses() == 2)     sb.append("<th>Training AUC</th>");
  }
 else {
    sb.append("<th>Training MSE</th>");
  }
  if (error.validation) {
    if (isClassifier()) {
      sb.append("<th>Validation Error</th>");
      if (nclasses() == 2)       sb.append("<th>Validation AUC</th>");
    }
 else {
      sb.append("<th>Validation MSE</th>");
    }
  }
 else   if (error.num_folds > 0) {
    if (isClassifier()) {
      sb.append("<th>Cross-Validation Error</th>");
      if (nclasses() == 2)       sb.append("<th>Cross-Validation AUC</th>");
    }
 else {
      sb.append("<th>Cross-Validation MSE</th>");
    }
  }
  sb.append("</tr>");
  for (int i=errors.length - 1; i >= 0; i--) {
    final Errors e=errors[i];
    sb.append("<tr>");
    sb.append("<td>" + PrettyPrint.msecs(e.training_time_ms,true) + "</td>");
    sb.append("<td>" + String.format("%g",e.epoch_counter) + "</td>");
    sb.append("<td>" + String.format("%,d",e.training_samples) + "</td>");
    if (isClassifier()) {
      sb.append("<td>" + formatPct(e.train_err) + "</td>");
      if (nclasses() == 2) {
        if (e.trainAUC != null)         sb.append("<td>" + formatPct(e.trainAUC.AUC()) + "</td>");
 else         sb.append("<td>" + "N/A" + "</td>");
      }
    }
 else {
      sb.append("<td>" + String.format(mse_format,e.train_mse) + "</td>");
    }
    if (e.validation) {
      if (isClassifier()) {
        sb.append("<td>" + formatPct(e.valid_err) + "</td>");
        if (nclasses() == 2) {
          if (e.validAUC != null)           sb.append("<td>" + formatPct(e.validAUC.AUC()) + "</td>");
 else           sb.append("<td>" + "N/A" + "</td>");
        }
      }
 else {
        sb.append("<td>" + String.format(mse_format,e.valid_mse) + "</td>");
      }
    }
 else     if (e.num_folds > 0) {
      if (i == errors.length - 1 && _have_cv_results) {
        if (isClassifier()) {
          sb.append("<td>" + formatPct(e.valid_err) + "</td>");
          if (nclasses() == 2) {
            if (e.validAUC != null)             sb.append("<td>" + formatPct(e.validAUC.AUC()) + "</td>");
 else             sb.append("<td>" + "N/A" + "</td>");
          }
        }
 else {
          sb.append("<td>" + String.format(mse_format,e.valid_mse) + "</td>");
        }
      }
 else {
        sb.append("<td>N/A</td>");
        if (nclasses() == 2)         sb.append("<td>N/A</td>");
      }
    }
    sb.append("</tr>");
  }
  sb.append("</table>");
  return true;
}
