{
  SB model=new SB();
  bodySb.i().p("java.util.Arrays.fill(preds,0f);").nl();
  if (model_info().data_info()._nums > 0)   bodySb.i().p("java.util.Arrays.fill(NUMS,0f);").nl();
  if (model_info().data_info()._cats > 0)   bodySb.i().p("java.util.Arrays.fill(CATS,0);").nl();
  bodySb.i().p("int i = 0, ncats = 0;").nl();
  final int cats=model_info().data_info()._cats;
  if (cats > 0) {
    bodySb.i().p("for(; i<" + cats + "; ++i) {").nl();
    bodySb.i(1).p("if (!Double.isNaN(data[i])) {").nl();
    bodySb.i(2).p("int c = (int) data[i];").nl();
    if (model_info().data_info()._useAllFactorLevels)     bodySb.i(2).p("CATS[ncats++] = c + CATOFFSETS[i];").nl();
 else     bodySb.i(2).p("if (c != 0) CATS[ncats++] = c + CATOFFSETS[i] - 1;").nl();
    bodySb.i(1).p("}").nl();
    bodySb.i().p("}").nl();
  }
  bodySb.i().p("final int n = data.length;").nl();
  bodySb.i().p("for(; i<n; ++i) {").nl();
  bodySb.i(1).p("NUMS[i" + (cats > 0 ? "-" + cats : "") + "] = Double.isNaN(data[i]) ? 0 : ");
  if (model_info().data_info()._normMul != null) {
    bodySb.p("(data[i] - NORMSUB[i" + (cats > 0 ? "-" + cats : "") + "])*NORMMUL[i"+ (cats > 0 ? "-" + cats : "")+ "];").nl();
  }
 else {
    bodySb.i(1).p("data[i];").nl();
  }
  bodySb.i(0).p("}").nl();
  if (model_info().data_info()._cats > 0) {
    bodySb.i().p("for (i=0; i<ncats; ++i) ACTIVATION[0][CATS[i]] = 1f;").nl();
  }
  if (model_info().data_info()._nums > 0) {
    bodySb.i().p("for (i=0; i<NUMS.length; ++i) {").nl().i(1).p("ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0f : (float) NUMS[i];").nl();
    bodySb.i().p("}").nl();
  }
  bodySb.i().p("for (i=1; i<ACTIVATION.length; ++i) {").nl();
  bodySb.i(1).p("java.util.Arrays.fill(ACTIVATION[i],0f);").nl();
  bodySb.i(1).p("for (int r=0; r<ACTIVATION[i].length; ++r) {").nl();
  bodySb.i(2).p("final int cols = ACTIVATION[i-1].length;").nl();
  bodySb.i(2).p("for (int c = 0; c < cols; ++c) {").nl();
  bodySb.i(3).p("ACTIVATION[i][r] += ACTIVATION[i-1][c] * WEIGHT[i][r*cols+c];").nl();
  bodySb.i(2).p("}").nl();
  bodySb.i(2).p("ACTIVATION[i][r] += BIAS[i][r];").nl();
  bodySb.i(1).p("}").nl();
  bodySb.i(1).p("if (i<ACTIVATION.length-1) {").nl();
  bodySb.i(2).p("for (int r=0; r<ACTIVATION[i].length; ++r) {").nl();
  if (get_params().activation == DeepLearning.Activation.Tanh || get_params().activation == DeepLearning.Activation.TanhWithDropout)   bodySb.i(3).p("ACTIVATION[i][r] = 1f - 2f / (1f + (float)Math.exp(2*ACTIVATION[i][r]));").nl();
 else   if (get_params().activation == DeepLearning.Activation.Rectifier || get_params().activation == DeepLearning.Activation.RectifierWithDropout)   bodySb.i(3).p("ACTIVATION[i][r] = Math.max(0f, ACTIVATION[i][r]);").nl();
 else   throw new UnsupportedOperationException("Maxout POJO scoring is not yet implemented.");
  bodySb.i(2).p("}").nl();
  bodySb.i(1).p("}").nl();
  if (isClassifier()) {
    bodySb.i(1).p("else {").nl();
    bodySb.i(2).p("float max = ACTIVATION[i][0];").nl();
    bodySb.i(2).p("for (int r = 1; r < ACTIVATION[i].length; r++) {").nl();
    bodySb.i(3).p("if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];").nl();
    bodySb.i(2).p("}").nl();
    bodySb.i(2).p("float scale = 0f;").nl();
    bodySb.i(2).p("for (int r = 0; r < ACTIVATION[i].length; r++) {").nl();
    bodySb.i(3).p("ACTIVATION[i][r] = (float) Math.exp(ACTIVATION[i][r] - max);").nl();
    bodySb.i(3).p("scale += ACTIVATION[i][r];").nl();
    bodySb.i(2).p("}").nl();
    bodySb.i(2).p("for (int r = 0; r < ACTIVATION[i].length; r++) {").nl();
    bodySb.i(3).p("if (Float.isNaN(ACTIVATION[i][r]))").nl();
    bodySb.i(4).p("throw new RuntimeException(\"Numerical instability, predicted NaN.\");").nl();
    bodySb.i(3).p("ACTIVATION[i][r] /= scale;").nl();
    bodySb.i(3).p("preds[r+1] = ACTIVATION[i][r];").nl();
    bodySb.i(2).p("}").nl();
    bodySb.i(1).p("}").nl();
    bodySb.i().p("}").nl();
  }
 else {
    bodySb.i().p("}").nl();
    if (model_info().data_info()._normRespMul != null) {
      bodySb.i().p("preds[1] = (float) (ACTIVATION[ACTIVATION.length-1][0] / NORMRESPMUL[0] + NORMRESPSUB[0]);").nl();
    }
 else     bodySb.i().p("preds[1] = ACTIVATION[ACTIVATION.length-1][0];").nl();
    bodySb.i().p("if (Float.isNaN(preds[1])) throw new RuntimeException(\"Predicted regression target NaN!\");").nl();
  }
  fileCtxSb.p(model);
  toJavaUnifyPreds(bodySb);
  toJavaFillPreds0(bodySb);
}
