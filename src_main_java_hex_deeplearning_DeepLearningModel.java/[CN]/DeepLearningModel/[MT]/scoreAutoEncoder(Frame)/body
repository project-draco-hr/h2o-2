{
  Frame fr=frame;
  boolean adapt=true;
  int ridx=fr.find(responseName());
  if (ridx != -1) {
    fr=new Frame(fr);
    fr.remove(ridx);
  }
  Frame[] adaptFrms=adapt ? adapt(fr,false) : null;
  Frame adaptFrm=adapt ? adaptFrms[0] : fr;
  Frame onlyAdaptFrm=adapt ? adaptFrms[1] : null;
  final int len=_names.length - 1;
  adaptFrm.add("L2",adaptFrm.anyVec().makeZero());
  final double[] normMul=model_info().data_info()._normMul;
  new MRTask2(){
    @Override public void map(    Chunk chks[]){
      double tmp[]=new double[len];
      float preds[]=new float[len];
      for (int row=0; row < chks[0]._len; row++) {
        for (int i=0; i < _names.length - 1; i++)         tmp[i]=chks[i].at0(row);
        score0(tmp,preds);
        double l2=0;
        for (int i=0; i < len; ++i)         l2+=Math.pow((preds[i] - tmp[i]) * normMul[i],2);
        chks[len].set0(row,l2);
      }
    }
  }
.doAll(adaptFrm);
  int x=_names.length - 1, y=adaptFrm.numCols();
  final Frame l2=adaptFrm.extractFrame(x,y);
  if (adapt)   onlyAdaptFrm.delete();
  return l2;
}
