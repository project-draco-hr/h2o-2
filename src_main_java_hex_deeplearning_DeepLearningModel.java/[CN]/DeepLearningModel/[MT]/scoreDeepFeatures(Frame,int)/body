{
  assert(layer >= 0 && layer < model_info().get_params().hidden.length);
  final int len=nfeatures();
  Vec resp=null;
  if (isSupervised()) {
    int ridx=frame.find(responseName());
    if (ridx != -1) {
      frame=new Frame(frame);
      resp=frame.vecs()[ridx];
      frame.remove(ridx);
    }
  }
  Frame[] adaptFrms=adapt(frame,false,false);
  Frame adaptFrm=adaptFrms[0];
  Frame onlyAdaptFrm=adaptFrms[1];
  final int features=model_info().get_params().hidden[layer];
  Vec[] vecs=adaptFrm.anyVec().makeZeros(features);
  for (int j=0; j < features; ++j) {
    adaptFrm.add("DF.C" + (j + 1),vecs[j]);
  }
  new MRTask2(){
    @Override public void map(    Chunk chks[]){
      double tmp[]=new double[len];
      float df[]=new float[features];
      final Neurons[] neurons=DeepLearningTask.makeNeuronsForTesting(model_info);
      for (int row=0; row < chks[0]._len; row++) {
        for (int i=0; i < len; i++)         tmp[i]=chks[i].at0(row);
        ((Neurons.Input)neurons[0]).setInput(-1,tmp);
        DeepLearningTask.step(-1,neurons,model_info,false,null);
        float[] out=neurons[layer + 1]._a.raw();
        for (int c=0; c < df.length; c++)         chks[_names.length + c].set0(row,out[c]);
      }
    }
  }
.doAll(adaptFrm);
  int x=_names.length, y=adaptFrm.numCols();
  Frame ret=adaptFrm.extractFrame(x,y);
  onlyAdaptFrm.delete();
  if (resp != null)   ret.prepend(responseName(),resp);
  return ret;
}
