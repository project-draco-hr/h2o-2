{
  if (!get_params().autoencoder)   return super.scoreImpl(adaptFrm);
 else {
    final int len=_names.length - 1;
    String prefix="reconstr_";
    for (int c=0; c < len; c++)     adaptFrm.add(prefix + adaptFrm.names()[c],adaptFrm.anyVec().makeZero());
    new MRTask2(){
      @Override public void map(      Chunk chks[]){
        double tmp[]=new double[len];
        float preds[]=new float[len];
        for (int row=0; row < chks[0]._len; row++) {
          float p[]=score0(chks,row,tmp,preds);
          for (int c=0; c < preds.length; c++)           chks[len + c].set0(row,p[c]);
        }
      }
    }
.doAll(adaptFrm);
    int x=_names.length - 1, y=adaptFrm.numCols();
    return adaptFrm.extractFrame(x,y);
  }
}
