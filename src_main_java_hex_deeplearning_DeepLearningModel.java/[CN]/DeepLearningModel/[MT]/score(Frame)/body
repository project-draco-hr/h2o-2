{
  if (!get_params().autoencoder) {
    return super.score(frame);
  }
 else {
    Frame fr=new Frame(frame);
    final int len=model_info().data_info().fullN();
    String prefix="reconstr_";
    assert(model_info().data_info()._responses == 0);
    String[] coefnames=model_info().data_info().coefNames();
    assert(len == coefnames.length);
    for (int c=0; c < len; c++)     fr.add(prefix + coefnames[c],fr.anyVec().makeZero());
    new MRTask2(){
      @Override public void map(      Chunk chks[]){
        double tmp[]=new double[_names.length];
        float preds[]=new float[len];
        final Neurons[] neurons=DeepLearningTask.makeNeuronsForTesting(model_info);
        for (int row=0; row < chks[0]._len; row++) {
          float p[]=score_autoencoder(chks,row,tmp,preds,neurons);
          for (int c=0; c < preds.length; c++)           chks[_names.length + c].set0(row,p[c]);
        }
      }
    }
.doAll(fr);
    int x=_names.length, y=fr.numCols();
    return fr.extractFrame(x,y);
  }
}
