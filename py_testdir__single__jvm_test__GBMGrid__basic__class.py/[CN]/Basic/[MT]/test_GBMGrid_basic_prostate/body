def test_GBMGrid_basic_prostate(self):
    csvFilename = 'prostate.csv'
    print '\nStarting', csvFilename
    csvPathname = ('logreg/' + csvFilename)
    parseResult = h2i.import_parse(bucket='smalldata', path=csvPathname, hex_key=(csvFilename + '.hex'), schema='put')
    colNames = ['ID', 'CAPSULE', 'AGE', 'RACE', 'DPROS', 'DCAPS', 'PSA', 'VOL', 'GLEASON']
    modelKey = 'GBMGrid_prostate'
    params = {'destination_key': modelKey, 'ignored_cols_by_name': 'ID', 'learn_rate': 0.1, 'ntrees': '2,4', 'max_depth': 8, 'min_rows': 1, 'response': 'CAPSULE', 'classification': (1 if DO_CLASSIFICATION else 0), }
    kwargs = params.copy()
    timeoutSecs = 1800
    start = time.time()
    GBMFirstResult = h2o_cmd.runGBM(parseResult=parseResult, noPoll=True, **kwargs)
    print '\nGBMFirstResult:', h2o.dump_json(GBMFirstResult)
    h2o_jobs.pollWaitJobs(pattern=None, timeoutSecs=300, pollTimeoutSecs=10, retryDelaySecs=5)
    elapsed = (time.time() - start)
    print 'GBM training completed in', elapsed, 'seconds.'
    gbmGridView = h2o.nodes[0].gbm_grid_view(job_key=GBMFirstResult['job_key'], destination_key=modelKey)
    print h2o.dump_json(gbmGridView)
    if (1 == 0):
        gbmTrainView = h2o_cmd.runGBMView(model_key=modelKey)
        errsLast = gbmTrainView['gbm_model']['errs'][(-1)]
        print "GBM 'errsLast'", errsLast
        if DO_CLASSIFICATION:
            cm = gbmTrainView['gbm_model']['cm']
            pctWrongTrain = h2o_gbm.pp_cm_summary(cm)
            print '\nTrain\n==========\n'
            print h2o_gbm.pp_cm(cm)
        else:
            print 'GBMTrainView:', h2o.dump_json(gbmTrainView['gbm_model']['errs'])
