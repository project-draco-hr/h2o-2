{
  Futures fs=new Futures();
  Key xParsed=Key.make("xParsed"), hParsed=Key.make("hParsed"), mParsed=Key.make("mParsed");
  Frame X=getFrameForFile(xParsed,"smalldata/sparse_matrices/X2.svmlight");
  X.remove(0).remove(fs);
  Frame H=getFrameForFile(hParsed,"smalldata/sparse_matrices/H2.svmlight");
  H.remove(0).remove(fs);
  Frame M=getFrameForFile(mParsed,"smalldata/sparse_matrices/M2.svmlight");
  M.remove(0).remove(fs);
  Frame X2=DMatrix.mmul(H,M);
  double[][] x=Utils.asDoubles(X);
  double[][] y=Utils.asDoubles(X2);
  for (int i=0; i < x.length; ++i)   for (int j=0; j < y.length; ++j)   assertEquals("@ " + i + ", "+ j+ " "+ x[i][j]+ " != "+ y[i][j],x[i][j],y[i][j],1e-3);
  X.delete();
  H.delete();
  M.delete();
  for (  Vec v : X2.vecs())   v.remove(fs);
  fs.blockForPending();
  checkLeakedKeys();
}
