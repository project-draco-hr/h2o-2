{
  Futures fs=new Futures();
  Key parsed=Key.make("arcene_parsed");
  GLMModel model=null;
  String[] data=new String[]{"1 2:.2 5:.5 9:.9\n-1 1:.1 4:.4 8:.8\n","1 2:.2 5:.5 9:.9\n1 3:.3 6:.6\n","-1 7:.7 8:.8 9:.9\n1 20:2.\n","+1 1:.1 5:.5 6:.6 10:1\n1 19:1.9\n","1 2:.2 5:.5 9:.9\n-1 1:.1 4:.4 8:.8\n","1 2:.2 5:.5 9:.9\n1 3:.3 6:.6\n","-1 7:.7 8:.8 9:.9\n1 20:2.\n","+1 1:.1 5:.5 6:.6 10:1\n1 19:1.9\n","1 2:.2 5:.5 9:.9\n-1 1:.1 4:.4 8:.8\n","1 2:.2 5:.5 9:.9\n1 3:.3 6:.6\n","-1 7:.7 8:.8 9:.9\n1 20:2.\n","+1 1:.1 5:.5 60:.6 10:1\n1 19:1.9\n","+1 11:.1 53:.5 6:.6 10:1\n1 190:1.9\n","+1 11:.1 53:.5 76:.6 10:1\n1 133:1\n"};
  Key k=FVecTest.makeByteVec(Key.make("svmtest_bits").toString(),data);
  Frame fr=ParseDataset2.parse(parsed,new Key[]{k});
  Frame tr=DMatrix.transpose(fr);
  tr.reloadVecs();
  Frame z=DMatrix.mmul(tr,fr);
  DataInfo dinfo=new DataInfo(fr,0,false,false,DataInfo.TransformType.NONE);
  GramTask gt=new GramTask(null,dinfo,false,false).doAll(dinfo._adaptedFrame);
  gt._gram.mul(gt._nobs);
  double[][] gram=gt._gram.getDenseXX();
  for (int i=0; i < gram.length; ++i)   for (int j=0; j < gram[i].length; ++j)   assertEquals("position " + i + ", "+ j,gram[i][j],z.vec(j).at(i),1e-4);
  fr.delete();
  for (  Vec v : tr.vecs())   v.remove(fs);
  for (  Vec v : z.vecs())   v.remove(fs);
  fs.blockForPending();
}
