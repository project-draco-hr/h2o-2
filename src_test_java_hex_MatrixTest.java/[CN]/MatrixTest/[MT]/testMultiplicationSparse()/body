{
  Futures fs=new Futures();
  Key xParsed=Key.make("xParsed"), hParsed=Key.make("hParsed"), mParsed=Key.make("mParsed");
  Frame X=getFrameForFile(xParsed,"smalldata/sparse_matrices/X2.svmlight");
  X.remove(0).remove(fs);
  Frame H=getFrameForFile(hParsed,"smalldata/sparse_matrices/H2.svmlight");
  H.remove(0).remove(fs);
  Frame M=getFrameForFile(mParsed,"smalldata/sparse_matrices/M2.svmlight");
  M.remove(0).remove(fs);
  Frame X2=DMatrix.mmul(H,M);
  for (int i=0; i < X.numRows(); ++i)   for (int j=0; j < X.numCols(); ++j)   assertEquals("@ " + i + ", "+ j+ " "+ X.vec(j).at(i)+ " != "+ X2.vec(j).at(i),X.vec(j).at(i),X2.vec(j).at(i),1e-3);
  X.delete();
  H.delete();
  M.delete();
  for (  Vec v : X2.vecs())   v.remove(fs);
  fs.blockForPending();
  checkLeakedKeys();
}
