{
  Key parsed=Key.make("prostate_parsed");
  GLMModel model=null;
  File f=TestUtil.find_test_file("smalldata/arcene/arcene_train.data");
  Key k=NFSFileVec.make(f);
  Frame fr=ParseDataset2.parse(parsed,new Key[]{k});
  k=Key.make("rebalanced");
  H2O.submitTask(new RebalanceDataSet(fr,k,64)).join();
  fr.delete();
  fr=DKV.get(k).get();
  Frame tr=DMatrix.transpose(fr);
  tr.reloadVecs();
  for (int i=0; i < fr.numRows(); ++i)   for (int j=0; j < fr.numCols(); ++j)   assertEquals("at " + i + ", "+ j+ ":",fr.vec(j).at(i),tr.vec(i).at(j),1e-4);
  fr.delete();
  Futures fs=new Futures();
  for (  Vec v : tr.vecs())   v.remove(fs);
  fs.blockForPending();
  String[] data=new String[]{"1 2:.2 5:.5 9:.9\n-1 1:.1 4:.4 8:.8\n","1 2:.2 5:.5 9:.9\n1 3:.3 6:.6\n","-1 7:.7 8:.8 9:.9\n1 20:2.\n","+1 1:.1 5:.5 6:.6 10:1\n1 19:1.9\n","1 2:.2 5:.5 9:.9\n-1 1:.1 4:.4 8:.8\n","1 2:.2 5:.5 9:.9\n1 3:.3 6:.6\n","-1 7:.7 8:.8 9:.9\n1 20:2.\n","+1 1:.1 5:.5 6:.6 10:1\n1 19:1.9\n","1 2:.2 5:.5 9:.9\n-1 1:.1 4:.4 8:.8\n","1 2:.2 5:.5 9:.9\n1 3:.3 6:.6\n","-1 7:.7 8:.8 9:.9\n1 20:2.\n","+1 1:.1 5:.5 6:.6 10:1\n1 19:1.9\n"};
  k=FVecTest.makeByteVec(Key.make("svmtest_bits").toString(),data);
  fr=ParseDataset2.parse(parsed,new Key[]{k});
  tr=DMatrix.transpose(fr);
  tr.reloadVecs();
  for (int i=0; i < fr.numRows(); ++i)   for (int j=0; j < fr.numCols(); ++j)   assertEquals("at " + i + ", "+ j+ ":",fr.vec(j).at(i),tr.vec(i).at(j),1e-4);
  fr.delete();
  fs=new Futures();
  for (  Vec v : tr.vecs())   v.remove(fs);
  fs.blockForPending();
}
