def simpleCheckKMeans(self, kmeans, **kwargs):
    warnings = None
    if ('warnings' in kmeans):
        warnings = kmeans['warnings']
        x = re.compile('[Ff]ailed')
        for w in warnings:
            print '\nwarning:', w
            if re.search(x, w):
                raise Exception(w)
    if h2o.beta_features:
        destination_key = kmeans['model']['_selfKey']
        kmeansResult = kmeans
    else:
        destination_key = kmeans['destination_key']
        kmeansResult = h2o_cmd.runInspect(key=destination_key)
    if h2o.beta_features:
        model = kmeansResult['model']
        clusters = model['clusters']
        cluster_variances = model['within_cluster_variances']
        error = model['total_within_SS']
        iterations = model['iterations']
        normalized = model['normalized']
        max_iter = model['max_iter']
    else:
        model = kmeansResult['KMeansModel']
        clusters = model['clusters']
        error = model['error']
    for (i, c) in enumerate(clusters):
        for n in c:
            if math.isnan(float(n)):
                raise Exception('center', i, 'has NaN:', n, 'center:', c)
    h2o.check_sandbox_for_errors()
    return warnings
