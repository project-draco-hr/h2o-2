def bigCheckResults(self, kmeans, csvPathname, parseResult, applyDestinationKey, **kwargs):
    simpleCheckKMeans(self, kmeans, **kwargs)
    if h2o.beta_features:
        model = kmeans['model']
        model_key = model['_selfKey']
        centers = model['clusters']
        error = model['error']
        kmeansResult = kmeans
    else:
        model_key = kmeans['destination_key']
        kmeansResult = h2o_cmd.runInspect(key=model_key)
        model = kmeansResult['KMeansModel']
        centers = model['clusters']
        error = model['error']
    if h2o.beta_features:
        pass
        predictKey = applyDestinationKey
        predictResult = h2o.nodes[0].generate_predictions(data_key=parseResult['destination_key'], model_key=model_key, destination_key=predictKey)
        summaryResult = h2o.nodes[0].summary_page(key=predictKey)
        hcnt = summaryResult['summaries'][0]['hcnt']
        rows_per_cluster = hcnt
        sqr_error_per_cluster = [0 for h in hcnt]
    else:
        kmeansApplyResult = h2o.nodes[0].kmeans_apply(data_key=parseResult['destination_key'], model_key=model_key, destination_key=applyDestinationKey)
        inspect = h2o_cmd.runInspect(None, applyDestinationKey)
        h2o_cmd.infoFromInspect(inspect, csvPathname)
        summaryResult = h2o_cmd.runSummary(key=applyDestinationKey)
        h2o_cmd.infoFromSummary(summaryResult, noPrint=False)
        kmeansScoreResult = h2o.nodes[0].kmeans_score(key=parseResult['destination_key'], model_key=model_key)
        score = kmeansScoreResult['score']
        rows_per_cluster = score['rows_per_cluster']
        sqr_error_per_cluster = score['sqr_error_per_cluster']
    tupleResultList = []
    print '\nerror: ', error
    for (i, c) in enumerate(centers):
        print (('\ncenters[' + str(i)) + ']: '), [round(c, 2) for c in centers[i]]
        print (('rows_per_cluster[' + str(i)) + ']: '), rows_per_cluster[i]
        print (('sqr_error_per_cluster[' + str(i)) + ']: '), sqr_error_per_cluster[i]
        tupleResultList.append((centers[i], rows_per_cluster[i], sqr_error_per_cluster[i]))
    return (centers, tupleResultList)
