def bigCheckResults(self, kmeans, csvPathname, parseResult, applyDestinationKey, **kwargs):
    simpleCheckKMeans(self, kmeans, **kwargs)
    model = kmeans['model']
    model_key = model['_key']
    centers = model['centers']
    cluster_variances = model['within_cluster_variances']
    error = model['total_within_SS']
    kmeansResult = kmeans
    predictKey = applyDestinationKey
    predictResult = h2o.nodes[0].generate_predictions(data_key=parseResult['destination_key'], model_key=model_key, destination_key=predictKey)
    summaryResult = h2o.nodes[0].summary_page(key=predictKey)
    hcnt = summaryResult['summaries'][0]['hcnt']
    rows_per_cluster = hcnt
    sqr_error_per_cluster = cluster_variances
    tupleResultList = []
    print '\nerror: ', error
    if ((len(centers) != len(rows_per_cluster)) or (len(centers) != len(sqr_error_per_cluster))):
        raise Exception(('centers, rows_per_cluster, sqr_error_per_cluster should all be same length %s, %s, %s' % (len(centers), len(rows_per_cluster), len(sqr_error_per_cluster))))
    for (i, c) in enumerate(centers):
        print ('\ncenters[%s]: ' % i), [round(c, 2) for c in centers[i]]
        print ('rows_per_cluster[%s]: ' % i), rows_per_cluster[i]
        print ('sqr_error_per_cluster[%s]: ' % i), sqr_error_per_cluster[i]
        tupleResultList.append((centers[i], rows_per_cluster[i], sqr_error_per_cluster[i]))
    return (centers, tupleResultList)
