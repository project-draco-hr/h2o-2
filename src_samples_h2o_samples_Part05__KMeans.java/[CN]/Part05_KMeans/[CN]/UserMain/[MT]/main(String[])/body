{
  H2O.main(args);
  Key key=TestUtil.loadAndParseFile("test","smalldata/gaussian/sdss174052.csv.gz");
  ValueArray va=DKV.get(key).get();
  int[] cols=new int[va._cols.length - 1];
  for (int i=0; i < cols.length; i++)   cols[i]=i + 1;
  int k=3;
  double[][] clusters=new double[k][va._cols.length];
  Random rand=new Random();
  long row=Math.max(0,(long)(rand.nextDouble() * va._numrows) - 1);
  AutoBuffer bits=va.getChunk(va.chknum(row));
  fill(clusters[0],va,bits,va.rowInChunk(va.chknum(row),row),cols);
  for (int i=0; i < 100; i++) {
    KMeans task=new KMeans();
    task._mainKey=key;
    task._cols=cols;
    task._clusters=clusters;
    task.invoke(key);
    System.out.println("Error is " + task._error);
    for (int cluster=0; cluster < clusters.length; cluster++) {
      if (task._counts[cluster] > 0) {
        for (int column=0; column < cols.length; column++) {
          double value=task._sums[cluster][column] / task._counts[cluster];
          clusters[cluster][column]=value;
        }
      }
    }
  }
  DecimalFormat df=new DecimalFormat("#.00");
  System.out.println("Clusters:");
  for (int cluster=0; cluster < clusters.length; cluster++) {
    for (int column=0; column < cols.length; column++)     System.out.print(df.format(clusters[cluster][column]) + ", ");
    System.out.println("");
  }
}
