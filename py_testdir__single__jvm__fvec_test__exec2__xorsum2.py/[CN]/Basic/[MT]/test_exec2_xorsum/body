def test_exec2_xorsum(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(10000, 1, 'r1', 0, 10, None)]
    ullResultList = []
    for (rowCount, colCount, hex_key, expectedMin, expectedMax, expected) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        maxDelta = (expectedMax - expectedMin)
        csvFilename = (((('syn_real_' + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        csvPathnameFull = h2i.find_folder_and_filename(None, csvPathname, returnFullPath=True)
        print 'Creating random', csvPathname
        (expectedUll, expectedFpSum) = write_syn_dataset(csvPathname, rowCount, colCount, expectedMin, expectedMax, SEEDPERFILE)
        parseResult = h2i.import_parse(path=csvPathname, schema='local', hex_key=hex_key, timeoutSecs=3000, retryDelaySecs=2)
        inspect = h2o_cmd.runInspect(key=hex_key)
        print 'numRows:', inspect['numRows']
        print 'numCols:', inspect['numCols']
        inspect = h2o_cmd.runInspect(key=hex_key, offset=(-1))
        print 'inspect offset = -1:', h2o.dump_json(inspect)
        for execExpr in exprList:
            start = time.time()
            (execResult, fpResult) = h2e.exec_expr(h2o.nodes[0], execExpr, resultKey=None, timeoutSecs=300)
            print 'exec took', (time.time() - start), 'seconds'
            print 'execResult:', h2o.dump_json(execResult)
            print ''
            print ('%30s' % 'fpResult:'), ('%.15f' % fpResult)
            ullResult = h2o_util.doubleToUnsignedLongLong(fpResult)
            print ('%30s' % 'bitResult (0.16x):'), ('0x%0.16x' % ullResult)
            print ('%30s' % 'expectedUll (0.16x):'), ('0x%0.16x' % expectedUll)
            ullResultList.append((ullResult, fpResult))
        h2o.check_sandbox_for_errors()
        print 'first result was from a sum. others are xorsum'
        print 'ullResultList:'
        for (ullResult, fpResult) in ullResultList:
            print ('%30s' % 'ullResult (0.16x):'), ('0x%0.16x   %s' % (ullResult, fpResult))
        expectedUllAsDouble = h2o_util.unsignedLongLongToDouble(expectedUll)
        print ('%30s' % 'expectedUll (0.16x):'), ('0x%0.16x   %s' % (expectedUll, expectedUllAsDouble))
        expectedFpSumAsLongLong = h2o_util.doubleToUnsignedLongLong(expectedFpSum)
        print ('%30s' % 'expectedFpSum (0.16x):'), ('0x%0.16x   %s' % (expectedFpSumAsLongLong, expectedFpSum))
