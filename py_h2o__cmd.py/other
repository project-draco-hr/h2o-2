import os, json, unittest, time, shutil, sys, socket
import h2o
import h2o_browse as h2b, h2o_rf as h2f
'\nRF scoring \ndef runRFView(node=None, parseKey=None, modelKey=None, ntree=None,\n        timeoutSecs=20, retryDelaySecs=2, **kwargs):\n    if not parseKey: raise Exception(\'No parse key for RFView specified\')\n    if not modelKey: raise Exception(\'No model key for RFView specified\')\n    if not ntree: raise Exception(\'No number of trees for RFView specified\')\n    if not node: node = h2o.nodes[0]\n    \n    dataKey = parseKey[\'destination_key\']\n    h2o.verboseprint("runRFView dataKey: {0}, modelKey: {1}".format(modelKey, dataKey))\n\n    def testRFProgress(n):\n        rfView = n.random_forest_view(dataKey, modelKey, timeoutSecs, **kwargs)\n        status = rfView[\'response\'][\'status\']\n        numberBuilt = rfView[\'trees\'][\'number_built\']\n\n        if status == \'done\': \n            if numberBuilt!=ntree: \n                raise Exception("RFview done but number_built!=ntree: %s %s", \n                    numberBuilt, ntree)\n            return True\n        if status != \'poll\': raise Exception(\'Unexpected status: \' + status)\n\n        progress = rfView[\'response\'][\'progress\']\n        progressTotal = rfView[\'response\'][\'progress_total\']\n\n        # don\'t print the useless first poll. ma\n        if (status!=\'done\'):\n            if numberBuilt==0:\n                h2o.verboseprint(".")\n            else:\n                h2o.verboseprint("\nRFView polling. Status: %s. %s trees done of %s desired" % \n                    (status, numberBuilt, ntree))\n\n        return (status==\'done\')\n\n    node.stabilize(\n            testRFProgress,\n            \'random forest reporting %d trees\' % ntree,\n            timeoutSecs=timeoutSecs, retryDelaySecs=retryDelaySecs)\n\n    # Re-read results \n    rfView = node.random_forest_view(dataKey, modelKey, timeoutSecs, **kwargs)\n    h2f.simpleCheckRFView(node, rfView)\n\n    return rfView\n'
