def infoFromSummary(summaryResult, noPrint=False):
    if h2o.beta_features:
        names = summaryResult['names']
        means = summaryResult['means']
        summaries = summaryResult['summaries']
        for column in summaries:
            rows = column['rows']
            start = column['start']
            zeros = column['zeros']
            bins = column['bins']
            binsz = column['binsz']
            domains = column['domains']
            maxs = column['maxs']
            mins = column['mins']
            percentileValues = column['percentileValues']
        if (not noPrint):
            print '\n\n************************'
            print 'rows:', rows
            print 'start:', start
            print 'zeros:', zeros
            print 'len(names):', len(names)
            print 'len(means):', len(means)
    else:
        summary = summaryResult['summary']
        columnsList = summary['columns']
        for columns in columnsList:
            N = columns['N']
            name = columns['name']
            stype = columns['type']
            histogram = columns['histogram']
            bin_size = histogram['bin_size']
            bin_names = histogram['bin_names']
            bins = histogram['bins']
            nbins = histogram['bins']
            if (not noPrint):
                print '\n\n************************'
                print 'N:', N
                print 'name:', name
                print 'type:', stype
                print 'bin_size:', bin_size
                print 'len(bin_names):', len(bin_names), bin_names
                print 'len(bins):', len(bins), bins
                print 'len(nbins):', len(nbins), nbins
            if (stype != 'enum'):
                zeros = columns['zeros']
                na = columns['na']
                smax = columns['max']
                smin = columns['min']
                mean = columns['mean']
                sigma = columns['sigma']
                if (not noPrint):
                    print 'zeros:', zeros
                    print 'na:', na
                    print 'smax:', smax
                    print 'smin:', smin
                    print 'mean:', mean
                    print 'sigma:', sigma
                if (len(bins) >= 2):
                    percentiles = columns['percentiles']
                    thresholds = percentiles['thresholds']
                    values = percentiles['values']
                    if (not noPrint):
                        print 'len(max):', len(smax), smax
                        print 'len(min):', len(smin), smin
                        print 'len(thresholds):', len(thresholds), thresholds
                        print 'len(values):', len(values), values
                    for v in values:
                        if (not (v >= smin[0])):
                            m = ('Percentile value %s should all be >= the min dataset value %s' % (v, smin[0]))
                            raise Exception(m)
                        if (not (v <= smax[0])):
                            m = ('Percentile value %s should all be <= the max dataset value %s' % (v, smax[0]))
                            raise Exception(m)
