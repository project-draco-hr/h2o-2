def createTestTrain(srcKey, trainDstKey, testDstKey, trainPercent, outputClass, outputCol, changeToBinomial=False):
    print 'train: get random', trainPercent
    print 'test: get remaining', (100 - trainPercent)
    if changeToBinomial:
        print 'change class', outputClass, 'to 1, everything else to 0. factor() to turn real to int (for rf)'
    execExpr = ''
    execExpr += ('cct.hex=runif(%s);' % srcKey)
    execExpr += ('%s=%s[cct.hex%s,];' % (trainDstKey, srcKey, '<=0.9'))
    if changeToBinomial:
        execExpr += ('%s[,%s]=%s[,%s]==%s;' % (trainDstKey, (outputCol + 1), trainDstKey, (outputCol + 1), outputClass))
        execExpr += ('factor(%s[, %s]);' % (trainDstKey, (outputCol + 1)))
    h2o_exec.exec_expr(None, execExpr, resultKey=trainDstKey, timeoutSecs=15)
    inspect = runInspect(key=trainDstKey)
    infoFromInspect(inspect, ('%s after mungeDataset on %s' % (trainDstKey, srcKey)))
    print 'test: same, but use the same runif() random result, complement'
    execExpr = ('cct.hex=runif(%s);' % srcKey)
    execExpr += ('%s=%s[cct.hex%s,];' % (testDstKey, srcKey, '>0.9'))
    if changeToBinomial:
        execExpr += ('%s[,%s]=%s[,%s]==%s;' % (testDstKey, (outputCol + 1), testDstKey, (outputCol + 1), outputClass))
        execExpr += ('factor(%s[, %s])' % (testDstKey, (outputCol + 1)))
    h2o_exec.exec_expr(None, execExpr, resultKey=testDstKey, timeoutSecs=10)
    inspect = runInspect(key=testDstKey)
    infoFromInspect(inspect, ('%s after mungeDataset on %s' % (testDstKey, srcKey)))
