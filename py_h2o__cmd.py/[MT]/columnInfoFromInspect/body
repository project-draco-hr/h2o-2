def columnInfoFromInspect(parseKey, exceptionOnMissingValues=True, **kwargs):
    inspect = runInspect(key=parseKey['destination_key'], **kwargs)
    num_rows = inspect['num_rows']
    num_cols = inspect['num_cols']
    cols = inspect['cols']
    missingValuesDict = {}
    constantValuesDict = {}
    enumSizeDict = {}
    colNameDict = {}
    colTypeDict = {}
    for (k, c) in enumerate(cols):
        colNameDict[k] = c['name']
        colTypeDict[k] = c['type']
        msg = ('column %s %d' % (c['name'], k))
        msg += (' type: %s' % c['type'])
        if (c['type'] == 'enum'):
            msg += (' enum_domain_size: %d' % c['enum_domain_size'])
            enumSizeDict[k] = c['enum_domain_size']
        if (c['num_missing_values'] != 0):
            msg += (' num_missing_values: %s' % c['num_missing_values'])
            missingValuesDict[k] = c['num_missing_values']
        print msg
        if (c['min'] == c['max']):
            constantValuesDict[k] = c['min']
    if missingValuesDict:
        print len(missingValuesDict), 'columns with missing values'
        m = [((str(k) + ':') + str(v)) for (k, v) in missingValuesDict.iteritems()]
        print ('Maybe columns got flipped to NAs: ' + ', '.join(m))
    if constantValuesDict:
        print len(constantValuesDict), 'columns with constant values'
        m = [((str(k) + ':') + str(v)) for (k, v) in constantValuesDict.iteritems()]
        print ('constant columns: ' + ', '.join(m))
    print ('\n' + parseKey['destination_key']), '    num_rows:', '{:,}'.format(num_rows), '    num_cols:', '{:,}'.format(num_cols)
    if (missingValuesDict and exceptionOnMissingValues):
        m = [((str(k) + ':') + str(v)) for (k, v) in missingValuesDict.iteritems()]
        raise Exception(('Looks like columns got flipped to NAs: ' + ', '.join(m)))
    if (num_cols != len(colNameDict)):
        raise Exception(("num_cols doesn't agree with len(colNameDict)" % num_cols), colNameDict)
    return (missingValuesDict, constantValuesDict, enumSizeDict, colTypeDict, colNameDict)
