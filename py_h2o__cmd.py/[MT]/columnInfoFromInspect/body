def columnInfoFromInspect(key, exceptionOnMissingValues=True, **kwargs):
    inspect = runInspect(key=key, **kwargs)
    num_rows = inspect['numRows']
    num_cols = inspect['numCols']
    keyNA = 'naCnt'
    cols = inspect['cols']
    missingValuesDict = {}
    constantValuesDict = {}
    enumSizeDict = {}
    colNameDict = {}
    colTypeDict = {}
    print 'Column Summary:'
    for (k, c) in enumerate(cols):
        colNameDict[k] = c['name']
        colTypeDict[k] = c['type']
        msg = ('%s %d' % (c['name'], k))
        msg += (' type: %s' % c['type'])
        printMsg = False
        if (c['type'] == 'Enum'):
            cardinality = c['cardinality']
            msg += (' cardinality: %d' % cardinality)
            enumSizeDict[k] = cardinality
            printMsg = True
        if (c[keyNA] != 0):
            pct = (((c[keyNA] + 0.0) / num_rows) * 100)
            msg += (' %s: %s (%0.1f%s)' % (keyNA, c[keyNA], pct, '%'))
            missingValuesDict[k] = c[keyNA]
            printMsg = True
        if ((c['min'] == c['max']) and ((c['type'] != 'Enum') and (c['type'] != 'enum'))):
            msg += (' constant value (min=max): %s' % c['min'])
            constantValuesDict[k] = c['min']
            printMsg = True
        if (c[keyNA] == num_rows):
            msg += (' constant value (na count = num rows): %s' % c['min'])
            constantValuesDict[k] = c['min']
            printMsg = True
        if printMsg:
            print msg
    if missingValuesDict:
        m = [((str(k) + ':') + str(v)) for (k, v) in missingValuesDict.iteritems()]
        print len(missingValuesDict), 'columns with missing values', ', '.join(m)
    if constantValuesDict:
        m = [((str(k) + ':') + str(v)) for (k, v) in constantValuesDict.iteritems()]
        print len(constantValuesDict), 'columns with constant values', ', '.join(m)
    print ('\n' + key), '    num_rows:', '{:,}'.format(num_rows), '    num_cols:', '{:,}'.format(num_cols)
    if (missingValuesDict and exceptionOnMissingValues):
        m = [((str(k) + ':') + str(v)) for (k, v) in missingValuesDict.iteritems()]
        raise Exception(('Looks like columns got flipped to NAs: ' + ', '.join(m)))
    if (num_cols != len(colNameDict)):
        raise Exception(("num_cols: %s doesn't agree with len(colNameDict): %s" % (num_cols, len(colNameDict))))
    return (missingValuesDict, constantValuesDict, enumSizeDict, colTypeDict, colNameDict)
