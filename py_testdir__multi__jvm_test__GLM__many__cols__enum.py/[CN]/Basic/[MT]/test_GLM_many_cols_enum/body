def test_GLM_many_cols_enum(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    translateList = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u']
    tryList = [(10000, 100, 'cA', 100), (10000, 200, 'cB', 200), (10000, 300, 'cC', 300)]
    for (rowCount, colCount, key2, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + str(SEEDPERFILE)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print '\nCreating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE, translateList)
        parseKey = h2o_cmd.parseFile(None, csvPathname, key2=key2, timeoutSecs=30)
        print csvFilename, 'parse time:', parseKey['response']['time']
        print "Parse result['destination_key']:", parseKey['destination_key']
        inspect = h2o_cmd.runInspect(None, parseKey['destination_key'])
        print ('\n' + csvFilename)
        y = colCount
        kwargs = {'y': y, 'max_iter': 50, 'case': 1, 'family': 'binomial', 'lambda': 0, 'alpha': 0, 'max_iter': 50, 'weight': 1.0, 'thresholds': 0.5, 'n_folds': 2, 'beta_epsilon': 0.0001, }
        start = time.time()
        glm = h2o_cmd.runGLMOnly(parseKey=parseKey, timeoutSecs=timeoutSecs, **kwargs)
        print 'glm end on ', csvPathname, 'took', (time.time() - start), 'seconds'
        print 'y:', y
        h2o_glm.simpleCheckGLM(self, glm, None, **kwargs)
        if (not h2o.browse_disable):
            h2b.browseJsonHistoryAsUrlLastMatch('GLM')
            time.sleep(10)
            h2b.browseJsonHistoryAsUrlLastMatch('Inspect')
            time.sleep(10)
