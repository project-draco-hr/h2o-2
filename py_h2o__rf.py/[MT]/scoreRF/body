def scoreRF(scoreParseResult, trainResult, vactual=None, timeoutSecs=120, **kwargs):
    parseKey = scoreParseResult['destination_key']
    rfModelKey = trainResult['drf_model']['_key']
    predictKey = 'Predict.hex'
    start = time.time()
    predictResult = h2o_cmd.runPredict(data_key=parseKey, model_key=rfModelKey, destination_key=predictKey, timeoutSecs=timeoutSecs, **kwargs)
    h2o_cmd.runInspect(key='Predict.hex', verbose=True)
    predictCMResult = h2o_nodes.nodes[0].predict_confusion_matrix(actual=parseKey, vactual=vactual, predict=predictKey, vpredict='predict', timeoutSecs=timeoutSecs, **kwargs)
    rftime = (time.time() - start)
    cm = predictCMResult['cm']
    pctWrong = h2o_gbm.pp_cm_summary(cm)
    print '\nTest\n==========\n'
    print h2o_gbm.pp_cm(cm)
    scoreResult = predictCMResult
    rftime = (time.time() - start)
    verboseprint('RF score results: ', scoreResult)
    verboseprint('RF computation took {0} sec'.format(rftime))
    scoreResult['python_call_timer'] = rftime
    return scoreResult
