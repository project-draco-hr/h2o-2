def simpleCheckRF2View(node=None, rfv=None, noPrint=False, **kwargs):
    if (not node):
        node = h2o.nodes[0]
    if ('warnings' in rfv):
        warnings = rfv['warnings']
        for w in warnings:
            if (not noPrint):
                print '\nwarning:', w
            if (('Failed' in w) or ('failed' in w)):
                raise Exception(w)
    rf_model = rfv['drf_model']
    cm = rf_model['cm']
    ntrees = rf_model['N']
    errs = rf_model['errs']
    N = rf_model['N']
    varimp = rf_model['varimp']
    treeStats = rf_model['treeStats']
    print 'maxDepth:', treeStats['maxDepth']
    print 'maxLeaves:', treeStats['maxLeaves']
    print 'minDepth:', treeStats['minDepth']
    print 'minLeaves:', treeStats['minLeaves']
    print 'meanLeaves:', treeStats['meanLeaves']
    print 'meanDepth:', treeStats['meanDepth']
    print 'errs[0]:', errs[0]
    print 'errs[-1]:', errs[(-1)]
    print 'errs:', errs
    totalScores = 0
    totalRight = 0
    classErrorPctList = []
    predictedClassDict = {}
    for (classIndex, s) in enumerate(cm):
        classSum = sum(s)
        if (classSum == 0):
            if (not noPrint):
                print 'class:', classIndex, 'classSum', classSum, '<- why 0?'
        else:
            classRightPct = (((s[classIndex] + 0.0) / classSum) * 100)
            totalRight += s[classIndex]
            classErrorPct = (100 - classRightPct)
            classErrorPctList.append(classErrorPct)
            if (not noPrint):
                print 'class:', classIndex, 'classSum', classSum, 'classErrorPct:', ('%4.2f' % classErrorPct)
            for (pIndex, p) in enumerate(s):
                if (pIndex not in predictedClassDict):
                    predictedClassDict[pIndex] = p
                else:
                    predictedClassDict[pIndex] += p
        totalScores += classSum
    if (not noPrint):
        print 'Predicted summary:'
        for (predictedClass, p) in predictedClassDict.items():
            print (str(predictedClass) + ':'), p
        print 'totalScores:', totalScores
        print 'totalRight:', totalRight
        if (totalScores != 0):
            pctRight = ((100.0 * totalRight) / totalScores)
        else:
            pctRight = 0.0
        print 'pctRight:', ('%5.2f' % pctRight)
        print 'pctWrong:', ('%5.2f' % (100 - pctRight))
    if ((totalScores <= 0) or (totalScores > 5000000000.0)):
        raise Exception('scores in RFView seems wrong. scores:', scoresList)
    h2o.check_sandbox_for_errors()
    return (errs[(-1)], classErrorPctList, totalScores)
