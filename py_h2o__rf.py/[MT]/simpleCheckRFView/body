def simpleCheckRFView(node, rfv, **kwargs):
    if (not node):
        node = h2o.nodes[0]
    if ('warnings' in rfv):
        warnings = rfv['warnings']
        for w in warnings:
            print '\nwarning:', w
            if (('Failed' in w) or ('failed' in w)):
                raise Exception(w)
    oclass = rfv['response_variable']
    if ((oclass < 0) or (oclass > 20000)):
        raise Exception('class in RFView seems wrong. class:', oclass)
    cm = rfv['confusion_matrix']
    header = cm['header']
    classification_error = cm['classification_error']
    print 'classification_error:', classification_error
    rows_skipped = cm['rows_skipped']
    print 'rows_skipped:', rows_skipped
    cm_type = cm['type']
    print 'type:', cm_type
    used_trees = cm['used_trees']
    if (used_trees <= 0):
        raise Exception('used_trees should be >0. used_trees:', used_trees)
    ntree = kwargs.get('ntree', None)
    if ((ntree is not None) and (used_trees != ntree)):
        raise Exception('used_trees should == ntree. used_trees:', used_trees)
    scoresList = cm['scores']
    totalScores = 0
    for s in scoresList:
        totalScores += sum(s)
    if ((totalScores <= 0) or (totalScores > 5000000000.0)):
        raise Exception('scores in RFView seems wrong. scores:', scoresList)
    type = cm['type']
    used_trees = cm['used_trees']
    if ((used_trees <= 0) or (used_trees > 20000)):
        raise Exception('used_trees in RFView seems wrong. used_trees:', used_trees)
    data_key = rfv['data_key']
    model_key = rfv['model_key']
    ntree = rfv['ntree']
    if ((ntree <= 0) or (ntree > 20000)):
        raise Exception('ntree in RFView seems wrong. ntree:', ntree)
    response = rfv['response']
    rfv_h2o = response['h2o']
    rfv_node = response['node']
    status = response['status']
    time = response['time']
    trees = rfv['trees']
    depth = trees['depth']
    leaves = trees['leaves']
    if (' 0.0 ' in leaves):
        raise Exception('leaves in RFView seems wrong. leaves:', leaves)
    number_built = trees['number_built']
    if ((number_built <= 0) or (number_built > 20000)):
        raise Exception('number_built in RFView seems wrong. number_built:', number_built)
    h2o.verboseprint('RFView response: number_built:', number_built, 'leaves:', leaves, 'depth:', depth)
    confusion_key = rfv['confusion_key']
    dataInspect = node.inspect(data_key)
    return classification_error
