{
  Frame fr=env.ary(-3);
  int cols[];
  if (!env.isAry(-2)) {
    if (Double.isNaN(env.dbl(-2)))     throw new IllegalArgumentException("NA not a valid column");
    cols=new int[]{(int)env.dbl(-2) - 1};
  }
 else {
    Frame cs=env.ary(-2);
    if (cs.numCols() != 1)     throw new IllegalArgumentException("Only one column-of-columns for column selection");
    if (cs.numRows() > 1000)     throw new IllegalArgumentException("Too many columns selected");
    cols=new int[(int)cs.numRows()];
    Vec vec=cs.vecs()[0];
    for (int i=0; i < cols.length; i++)     if (vec.isNA(i))     throw new IllegalArgumentException("NA not a valid column");
 else     cols[i]=(int)vec.at8(i) - 1;
  }
  for (  int c : cols)   if (c < 0 || c >= fr.numCols())   throw new IllegalArgumentException("Column " + (c + 1) + " out of range for frame columns "+ fr.numCols());
  ddplyPass1 p1=new ddplyPass1(true,cols).doAll(fr);
  int numgrps=p1._groups.size();
  int csz=H2O.CLOUD.size();
  ddplyPass2 p2=new ddplyPass2(p1,numgrps,csz).invokeOnAllNodes();
  Vec vecs[]=p2.close();
  Key envkey=Key.make();
  UKV.put(envkey,env);
  int grpnum=0;
  int nlocals[]=new int[csz];
  ArrayList<AppendableVec> grpCols=new ArrayList<AppendableVec>();
  ArrayList<NewChunk> nchks=new ArrayList<NewChunk>();
  for (  int col : cols) {
    AppendableVec av=new AppendableVec(Vec.VectorGroup.VG_LEN1.addVec());
    grpCols.add(av);
    nchks.add(new NewChunk(av,0));
  }
  RemoteExec re=null;
  Futures fs=new Futures();
  int ncols;
  for (  Group g : p1._groups.keySet()) {
    Vec rows=vecs[grpnum++];
    Vec[] data=fr.vecs();
    Vec[] gvecs=new Vec[data.length];
    Key[] keys=rows.group().addVecs(data.length);
    for (int c=0; c < data.length; c++) {
      gvecs[c]=new SubsetVec(rows._key,data[c]._key,keys[c],rows._espc);
      gvecs[c]._domain=data[c]._domain;
      DKV.put(gvecs[c]._key,gvecs[c]);
    }
    Key grpkey=Key.make("ddply_grpkey_" + (grpnum - 1));
    Frame fg=new Frame(grpkey,fr._names,gvecs);
    Futures gfs=new Futures();
    DKV.put(grpkey,fg,gfs);
    gfs.blockForPending();
    fg.anyVec().rollupStats();
    final int nidx=g.hashCode() % csz;
    fs.add(RPC.call(H2O.CLOUD._memary[nidx],(re=new RemoteExec((grpnum - 1),p2._nlocals[nidx],g._ds,fg,envkey))));
  }
  fs.blockForPending();
  grpnum=0;
  for (  Group g : p1._groups.keySet()) {
    int c=0;
    for (    double d : g._ds)     nchks.get(c++).addNum(d);
    Key rez_key=Key.make("ddply_RemoteRez_" + grpnum++);
    Result rg=UKV.get(rez_key);
    if (rg == null)     Log.info("Result was null: grp_id = " + (grpnum - 1) + " rez_key = "+ rez_key);
    ncols=rg.isRow() ? rg.resultR().length : 1;
    if (nchks.size() < ncols + cols.length) {
      for (int i=0; i < ncols; ++i) {
        AppendableVec av=new AppendableVec(Vec.VectorGroup.VG_LEN1.addVec());
        grpCols.add(av);
        nchks.add(new NewChunk(av,0));
      }
    }
    for (int i=0; i < ncols; ++i)     nchks.get(c++).addNum(rg.isRow() ? rg.resultR()[i] : rg.resultD());
    UKV.remove(rez_key);
  }
  Vec vres[]=new Vec[grpCols.size()];
  for (int i=0; i < vres.length; ++i) {
    nchks.get(i).close(0,fs);
    vres[i]=grpCols.get(i).close(fs);
  }
  fs.blockForPending();
  String[] names=new String[grpCols.size()];
  for (int i=0; i < cols.length; i++) {
    names[i]=fr._names[cols[i]];
    vres[i]._domain=fr.vecs()[cols[i]]._domain;
  }
  for (int i=cols.length; i < names.length; i++)   names[i]="C" + (i - cols.length + 1);
  Frame ff=new Frame(names,vres);
  boolean anyNA=false;
  Frame res=ff;
  for (  Vec v : ff.vecs())   if (v.naCnt() != 0) {
    anyNA=true;
    break;
  }
  if (anyNA) {
    res=new MRTask2(){
      @Override public void map(      Chunk[] cs,      NewChunk[] nc){
        int rows=cs[0]._len;
        int cols=cs.length;
        boolean[] NACols=new boolean[cols];
        ArrayList<Integer> xrows=new ArrayList<Integer>();
        for (int i=0; i < cols; ++i)         NACols[i]=(cs[i]._vec.naCnt() != 0);
        for (int r=0; r < rows; ++r)         for (int c=0; c < cols; ++c)         if (NACols[c])         if (cs[c].isNA0(r)) {
          xrows.add(r);
          break;
        }
        for (int r=0; r < rows; ++r) {
          if (xrows.contains(r))           continue;
          for (int c=0; c < cols; ++c) {
            if (cs[c]._vec.isEnum())             nc[c].addEnum((int)cs[c].at80(r));
 else             nc[c].addNum(cs[c].at0(r));
          }
        }
      }
    }
.doAll(ff.numCols(),ff).outputFrame(null,ff.names(),ff.domains());
    ff.delete();
  }
  UKV.remove(envkey);
  env.poppush(4,res,null);
}
