@unittest.skip('Skip RefCnt Failing Test')
def test_exec2_col_add(self):
    h2o.beta_features = True
    bucket = 'home-0xdiag-datasets'
    if localhost:
        csvPathname = '1B/reals_1000000x1_15f.data'
    else:
        csvPathname = '1B/reals_1000000x1_15f.data'
    hex_key = 'r1'
    parseResult = h2i.import_parse(bucket=bucket, path=csvPathname, schema='local', hex_key=hex_key, timeoutSecs=3000, retryDelaySecs=2, doSummary=False)
    inspect = h2o_cmd.runInspect(key=hex_key)
    print 'numRows:', inspect['numRows']
    print 'numCols:', inspect['numCols']
    inspect = h2o_cmd.runInspect(key=hex_key, offset=(-1))
    print 'inspect offset = -1:', h2o.dump_json(inspect)
    xList = []
    eList = []
    fList = []
    for execExpr in initList:
        (execResult, result) = h2e.exec_expr(h2o.nodes[0], execExpr, resultKey=None, timeoutSecs=300)
    for trial in range(1000):
        for execExpr in exprList:
            execExpr = re.sub('Last.value', ('Last.value%s' % trial), execExpr)
            execExpr = re.sub(',1', (',%s' % trial), execExpr)
            start = time.time()
            (execResult, result) = h2e.exec_expr(h2o.nodes[0], execExpr, resultKey=None, timeoutSecs=300)
            execTime = (time.time() - start)
            print 'exec took', execTime, 'seconds'
            c = h2o.nodes[0].get_cloud()
            c = c['nodes']
            k = [i['num_keys'] for i in c]
            v = [i['value_size_bytes'] for i in c]
            print ('keys: %s' % ' '.join(map(str, k)))
            print ('value_size_bytes: %s' % ' '.join(map(str, v)))
            if (('r1' in execExpr) and (not ('apply' in execExpr))):
                xList.append(trial)
                eList.append(execTime)
            if ('apply' in execExpr):
                fList.append(execTime)
    h2o.check_sandbox_for_errors()
    if DO_PLOT:
        xLabel = 'trial'
        eLabel = ('time: r1[,1] = Last.value = r2',)
        fLabel = ('time: apply(r1, 2, sum)',)
        eListTitle = ''
        fListTitle = ''
        h2o_gbm.plotLists(xList, xLabel, eListTitle, eList, eLabel, fListTitle, fList, fLabel, server=True)
