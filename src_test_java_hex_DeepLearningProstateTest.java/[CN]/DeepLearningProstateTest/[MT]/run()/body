{
  Key file=NFSFileVec.make(find_test_file("smalldata/./logreg/prostate.csv"));
  Frame frame=ParseDataset2.parse(Key.make(),new Key[]{file});
  Key vfile=NFSFileVec.make(find_test_file("smalldata/./logreg/prostate.csv"));
  Frame vframe=ParseDataset2.parse(Key.make(),new Key[]{vfile});
  int count=0;
  for (  boolean replicate : new boolean[]{true}) {
    for (    boolean load_balance : new boolean[]{false}) {
      for (      boolean shuffle : new boolean[]{false}) {
        for (        boolean balance_classes : new boolean[]{true,false}) {
          for (          int resp : new int[]{1,2,8}) {
            for (            DeepLearning.ClassSamplingMethod csm : new DeepLearning.ClassSamplingMethod[]{DeepLearning.ClassSamplingMethod.Stratified}) {
              for (              int scoretraining : new int[]{200}) {
                for (                int scorevalidation : new int[]{200}) {
                  for (                  int vf : new int[]{0,1,-1}) {
                    count++;
                    Log.info("**************************)");
                    Log.info("Starting test #" + count);
                    Log.info("**************************)");
                    Frame valid=null;
                    if (vf == 1)                     valid=frame;
 else                     if (vf == -1)                     valid=vframe;
                    Key dest=Key.make("prostate");
{
                      final long seed=new Random().nextLong();
                      Log.info("Using seed: " + seed);
                      DeepLearning p=new DeepLearning();
                      p.epochs=1.0 + new Random(seed).nextDouble();
                      p.source=frame;
                      p.hidden=new int[]{1 + new Random(seed).nextInt(4),1 + new Random(seed).nextInt(6)};
                      p.response=frame.vecs()[resp];
                      if (resp == 2)                       p.classification=false;
                      p.destination_key=dest;
                      p.seed=seed;
                      p.validation=valid;
                      p.train_samples_per_iteration=0;
                      p.force_load_balance=load_balance;
                      p.replicate_training_data=replicate;
                      p.shuffle_training_data=shuffle;
                      p.score_training_samples=scoretraining;
                      p.score_validation_samples=scorevalidation;
                      p.balance_classes=balance_classes;
                      p.quiet_mode=true;
                      p.score_validation_sampling=csm;
                      DeepLearningModel mymodel=p.initModel();
                      p.trainModel(mymodel);
                      p.trainModel(mymodel,p.epochs);
                      p.delete();
                    }
                    final DeepLearningModel mymodel=UKV.get(dest);
                    if (valid == null)                     valid=frame;
                    if (mymodel.isClassifier()) {
                      Frame pred=mymodel.score(valid);
                      StringBuilder sb=new StringBuilder();
                      AUC auc=new AUC();
                      double threshold=0;
                      double error=0;
                      if (resp == 1) {
                        auc.actual=valid;
                        auc.vactual=valid.vecs()[resp];
                        auc.predict=pred;
                        auc.vpredict=pred.vecs()[2];
                        auc.threshold_criterion=AUC.ThresholdCriterion.maximum_F1;
                        auc.invoke();
                        auc.toASCII(sb);
                        threshold=auc.threshold();
                        error=auc.err();
                        Log.info(sb);
                        Assert.assertEquals(new ConfusionMatrix(auc.cm()).err(),error,1e-15);
                        Assert.assertEquals(mymodel.calcError(valid,pred,pred,"training",false,null,auc,null),error,1e-15);
                      }
                      double CMerrorOrig;
{
                        sb=new StringBuilder();
                        water.api.ConfusionMatrix CM=new water.api.ConfusionMatrix();
                        CM.actual=valid;
                        CM.vactual=valid.vecs()[resp];
                        CM.predict=pred;
                        CM.vpredict=pred.vecs()[0];
                        CM.invoke();
                        sb.append("\n");
                        CM.toASCII(sb);
                        Log.info(sb);
                        CMerrorOrig=new ConfusionMatrix(CM.cm).err();
                      }
                      Frame pred2=new Frame(Key.make("pred2"),pred.names(),pred.vecs());
                      pred2.delete_and_lock(null);
                      pred2.unlock(null);
                      if (resp == 1) {
                        Env ev=Exec2.exec("pred2[,1]=pred2[,3]>=" + 0.5);
                        pred2=ev.popAry();
                        ev.subRef(pred2,"pred2");
                        ev.remove_and_unlock();
                        water.api.ConfusionMatrix CM=new water.api.ConfusionMatrix();
                        CM.actual=valid;
                        CM.vactual=valid.vecs()[1];
                        CM.predict=pred2;
                        CM.vpredict=pred2.vecs()[0];
                        CM.invoke();
                        sb=new StringBuilder();
                        sb.append("\n");
                        CM.toASCII(sb);
                        Log.info(sb);
                        double threshErr=new ConfusionMatrix(CM.cm).err();
                        Assert.assertEquals(threshErr,CMerrorOrig,1e-15);
                        ev=Exec2.exec("pred2[,1]=pred2[,3]>=" + threshold);
                        pred2=ev.popAry();
                        ev.subRef(pred2,"pred2");
                        ev.remove_and_unlock();
                        CM=new water.api.ConfusionMatrix();
                        CM.actual=valid;
                        CM.vactual=valid.vecs()[1];
                        CM.predict=pred2;
                        CM.vpredict=pred2.vecs()[0];
                        CM.invoke();
                        sb=new StringBuilder();
                        sb.append("\n");
                        CM.toASCII(sb);
                        Log.info(sb);
                        double threshErr2=new ConfusionMatrix(CM.cm).err();
                        Assert.assertEquals(threshErr2,error,1e-15);
                      }
                      pred2.delete();
                      pred.delete();
                    }
                    mymodel.delete();
                    UKV.remove(dest);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  frame.delete();
  vframe.delete();
  Log.info("Tested " + count + " parameter combinations.");
}
