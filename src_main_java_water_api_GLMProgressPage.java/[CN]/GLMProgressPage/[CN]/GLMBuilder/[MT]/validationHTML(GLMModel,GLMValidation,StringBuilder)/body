{
  RString valHeader=new RString("<div class='alert'>Validation on dataset <a href='/Inspect.html?" + KEY + "=%dataKey'>%dataKey</a></div>");
  RString xvalHeader=new RString("<div class='alert'>%valName</div>");
  RString R=new RString("<table class='table table-striped table-bordered table-condensed'>" + "<tr><th>Degrees of freedom:</th><td>%DegreesOfFreedom total (i.e. Null);  %ResidualDegreesOfFreedom Residual</td></tr>" + "<tr><th>Null Deviance</th><td>%nullDev</td></tr>"+ "<tr><th>Residual Deviance</th><td>%resDev</td></tr>"+ "<tr><th>AIC</th><td>%AIC</td></tr>"+ "<tr><th>Training Error Rate Avg</th><td>%err</td></tr>"+ "%CM"+ "</table>");
  RString R2=new RString("<tr><th>AUC</th><td>%AUC</td></tr>" + "<tr><th>Best Threshold</th><td>%threshold</td></tr>");
  if (val.fold() > 1) {
    xvalHeader.replace("valName",val.fold() + " fold cross validation");
    sb.append(xvalHeader.toString());
  }
 else {
    valHeader.replace("dataKey",val.dataKey());
    sb.append(valHeader.toString());
  }
  R.replace("DegreesOfFreedom",m._nLines - 1);
  R.replace("ResidualDegreesOfFreedom",m._dof);
  R.replace("nullDev",val._nullDeviance);
  R.replace("resDev",val._deviance);
  R.replace("AIC",dformat(val.AIC()));
  R.replace("err",val.err());
  if (val._cm != null) {
    R2.replace("AUC",dformat(val.AUC()));
    R2.replace("threshold",dformat(val.bestThreshold()));
    R.replace("CM",R2);
  }
  sb.append(R);
  ROCplot(val,sb);
  confusionHTML(val.bestCM(),sb);
  if (val.fold() > 1) {
    int nclasses=2;
    sb.append("<table class='table table-bordered table-condensed'>");
    if (val._cm != null) {
      sb.append("<tr><th>Model</th><th>Best Threshold</th><th>AUC</th>");
      for (int c=0; c < nclasses; ++c)       sb.append("<th>Err(" + c + ")</th>");
      sb.append("</tr>");
      int i=0;
      for (      GLMModel xm : val.models()) {
        String mname="Model " + i++;
        sb.append("<tr>");
        try {
          sb.append("<td>" + "<a href='Inspect.html?" + KEY + "="+ URLEncoder.encode(xm._key.toString(),"UTF-8")+ "'>"+ mname+ "</a></td>");
        }
 catch (        UnsupportedEncodingException e) {
          throw Log.errRTExcept(e);
        }
        sb.append("<td>" + dformat(xm._vals[0].bestThreshold()) + "</td>");
        sb.append("<td>" + dformat(xm._vals[0].AUC()) + "</td>");
        for (        double e : xm._vals[0].classError())         sb.append("<td>" + dformat(e) + "</td>");
        sb.append("</tr>");
      }
    }
 else {
      sb.append("<tr><th>Model</th><th>Error</th>");
      sb.append("</tr>");
      int i=0;
      for (      GLMModel xm : val.models()) {
        String mname="Model " + i++;
        sb.append("<tr>");
        try {
          sb.append("<td>" + "<a href='Inspect.html?" + KEY + "="+ URLEncoder.encode(xm._key.toString(),"UTF-8")+ "'>"+ mname+ "</a></td>");
        }
 catch (        UnsupportedEncodingException e) {
          throw Log.errRTExcept(e);
        }
        sb.append("<td>" + ((xm._vals != null) ? xm._vals[0]._err : Double.NaN) + "</td>");
        sb.append("</tr>");
      }
    }
    sb.append("</table>");
  }
}
