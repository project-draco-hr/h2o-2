{
  JFrame frame=new JFrame("H2O");
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  MnistCanvas canvas=new MnistCanvas(trainer,new Train8mInput());
  frame.setContentPane(canvas.init());
  frame.pack();
  frame.setLocationRelativeTo(null);
  frame.setVisible(true);
  long start=System.nanoTime();
  long lastTime=start;
  int n=0, lastItems=0;
  for (; ; ) {
    try {
      Thread.sleep(3000);
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
    String train=test(_train,100);
    String test=test(_test,100);
    long time=System.nanoTime();
    int items=trainer._count.get();
    int ps=(int)((items - lastItems) * (long)1e9 / (time - lastTime));
    lastTime=time;
    lastItems=items;
    String m=Log.padRight((int)((time - start) / 1e9) + "s ",6);
    m+=Log.padRight("" + trainer._count.get(),8) + " " + Log.padRight(ps + "/s",7);
    m+=", train: " + train + ", test: "+ test;
    Layer layer=_ls[1];
    double sqr=0;
    int zeros=0;
    for (int o=0; o < layer._a.length; o++) {
      for (int i=0; i < layer._in._a.length; i++) {
        float d=layer._gw[o * layer._in._a.length + i];
        sqr+=d * d;
        zeros+=d == 0 ? 1 : 0;
      }
    }
    m+=", gw: " + sqr + " ("+ (zeros * 100 / layer._gw.length)+ "% 0)";
    sqr=0;
    for (int o=0; o < layer._a.length; o++) {
      for (int i=0; i < layer._in._a.length; i++) {
        float d=layer._w[o * layer._in._a.length + i];
        sqr+=d * d;
      }
    }
    m+=", w: " + sqr;
    sqr=0;
    for (int o=0; o < layer._a.length; o++) {
      float d=layer._a[o];
      sqr+=d * d;
    }
    System.out.println(m + ", a: " + sqr);
    if (n != 0 && n % 10 == 0) {
      System.out.println("All: " + test(_test,_test._labels.length));
    }
  }
}
