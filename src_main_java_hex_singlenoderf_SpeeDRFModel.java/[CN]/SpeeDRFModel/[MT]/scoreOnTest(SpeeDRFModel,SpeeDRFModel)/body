{
  Frame scored=m.score(m.test_frame);
  water.api.ConfusionMatrix cm=new water.api.ConfusionMatrix();
  cm.vactual=m.test_frame.lastVec();
  cm.vpredict=scored.anyVec();
  cm.invoke();
  if (m.regression) {
    float mse=(float)cm.mse;
    m.errs=Arrays.copyOf(old.errs,old.errs.length + 1);
    m.errs[m.errs.length - 1]=mse;
    m.cms=Arrays.copyOf(old.cms,old.cms.length + 1);
    m.cms[m.cms.length - 1]=null;
  }
 else {
    _domain=m.cmDomain;
    m.cm=cm.cm;
    m.errs=Arrays.copyOf(old.errs,old.errs.length + 1);
    m.errs[m.errs.length - 1]=-1f;
    m.cms=Arrays.copyOf(old.cms,old.cms.length + 1);
    ConfusionMatrix new_cm=new ConfusionMatrix(m.cm);
    m.cms[m.cms.length - 1]=new_cm;
    if (m.classes() == 2 && !scored.lastVec().isInt()) {
      AUC auc_calc=new AUC();
      auc_calc.vactual=cm.vactual;
      auc_calc.vpredict=scored.lastVec();
      auc_calc.invoke();
      m.validAUC=auc_calc;
    }
    if (m.importance && !m.regression)     m.varimp=m.doVarImpCalc(m);
  }
}
