{
  Futures fs=new Futures();
  final SpeeDRFModel score_model=m;
  CMTask[] cmTask=new CMTask[]{CMTask.scoreTask(score_model.test_frame == null ? score_model.fr : score_model.test_frame,score_model,score_model.size(),score_model.weights,score_model.oobee,score_model._priorClassDist,score_model._modelClassDist)};
  if (m.regression) {
    float mse=cmTask[0]._ss / ((float)(cmTask[0]._rowcnt));
    m.errs=Arrays.copyOf(old.errs,old.errs.length + 1);
    m.errs[m.errs.length - 1]=mse;
    m.cms=Arrays.copyOf(old.cms,old.cms.length + 1);
    m.cms[m.cms.length - 1]=null;
  }
 else {
    _domain=cmTask[0].domain();
    m.confusion=CMTask.CMFinal.make(cmTask[0]._matrix,m,cmTask[0].domain(),cmTask[0]._errorsPerTree,m.oobee,cmTask[0]._sum,cmTask[0]._cms);
    m.cm=cmTask[0]._matrix._matrix;
    m.errorsPerTree=cmTask[0]._errorsPerTree;
    m.errs=Arrays.copyOf(old.errs,old.errs.length + 1);
    m.errs[m.errs.length - 1]=m.confusion.mse();
    m.cms=Arrays.copyOf(old.cms,old.cms.length + 1);
    ConfusionMatrix new_cm=new ConfusionMatrix(m.confusion._matrix);
    m.cms[m.cms.length - 1]=new_cm;
    if (m.classes() == 2) {
      m.validAUC=makeAUC(toCMArray(m.confusion._cms),ModelUtils.DEFAULT_THRESHOLDS,m.cmDomain);
    }
    if (m.importance && !m.regression)     m.varimp=m.doVarImpCalc(m);
  }
}
