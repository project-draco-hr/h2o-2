{
  SpeeDRFModel m=(SpeeDRFModel)old.clone();
  m.t_keys=Arrays.copyOf(old.t_keys,old.t_keys.length + 1);
  m.t_keys[m.t_keys.length - 1]=tkey;
  m.local_forests[nodeIdx]=Arrays.copyOf(old.local_forests[nodeIdx],old.local_forests[nodeIdx].length + 1);
  m.local_forests[nodeIdx][m.local_forests[nodeIdx].length - 1]=tkey;
  boolean shouldScore=shouldDoScore(m);
  if (shouldScore) {
    scoreOnTrain(m,old);
  }
 else {
    m.errs=Arrays.copyOf(old.errs,old.errs.length + 1);
    m.errs[m.errs.length - 1]=-1.f;
    m.cms=Arrays.copyOf(old.cms,old.cms.length + 1);
    m.cms[m.cms.length - 1]=null;
  }
  JsonObject trees=new JsonObject();
  trees.addProperty(Constants.TREE_COUNT,m.size());
  if (m.size() > 0) {
    trees.add(Constants.TREE_DEPTH,m.depth().toJson());
    trees.add(Constants.TREE_LEAVES,m.leaves().toJson());
  }
  TreeStats treeStats=new TreeStats();
  double[] depth_stats=stats(trees.get(Constants.TREE_DEPTH));
  double[] leaf_stats=stats(trees.get(Constants.TREE_LEAVES));
  if (depth_stats != null) {
    treeStats.minDepth=(int)depth_stats[0];
    treeStats.meanDepth=(float)depth_stats[1];
    treeStats.maxDepth=(int)depth_stats[2];
    treeStats.minLeaves=(int)leaf_stats[0];
    treeStats.meanLeaves=(float)leaf_stats[1];
    treeStats.maxLeaves=(int)leaf_stats[2];
  }
 else {
    treeStats=null;
  }
  m.treeStats=treeStats;
  return m;
}
