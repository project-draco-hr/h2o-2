{
  Frame scored=score(fr);
  water.api.ConfusionMatrix cm=new water.api.ConfusionMatrix();
  cm.vactual=fr.lastVec();
  cm.vpredict=scored.anyVec();
  cm.invoke();
  if (regression) {
    float mse=(float)cm.mse;
    errs[errs.length - 1]=mse;
    cms[cms.length - 1]=null;
  }
 else {
    Vec lv=scored.lastVec();
    double mse=CMTask.MSETask.doTask(scored.add("actual",fr.lastVec()));
    this.cm=cm.cm;
    errs[errs.length - 1]=(float)mse;
    ConfusionMatrix new_cm=new ConfusionMatrix(this.cm);
    cms[cms.length - 1]=new_cm;
    if (classes() == 2) {
      Vec v=null;
      Frame fa=null;
      if (lv.isInt()) {
        fa=new MRTask2(){
          @Override public void map(          Chunk[] cs,          NewChunk nchk){
            int rows=cs[0]._len;
            int cols=cs.length - 1;
            for (int r=0; r < rows; ++r) {
              nchk.addNum(cs[cols].at0(r) == 0 ? 1e-10 : 1.0 - 1e-10);
            }
          }
        }
.doAll(1,scored).outputFrame(null,null);
        v=fa.anyVec();
      }
      AUC auc_calc=new AUC();
      auc_calc.vactual=cm.vactual;
      auc_calc.vpredict=v == null ? lv : v;
      auc_calc.invoke();
      validAUC=auc_calc.data();
      if (v != null)       UKV.remove(v._key);
      if (fa != null)       fa.delete();
      UKV.remove(lv._key);
    }
  }
  scored.remove("actual");
  scored.delete();
}
