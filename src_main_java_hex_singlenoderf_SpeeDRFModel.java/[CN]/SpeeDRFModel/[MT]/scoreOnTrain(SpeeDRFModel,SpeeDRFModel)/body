{
  CMTask cmTask=new CMTask(m,m.size(),m.weights,m.oobee,m._priorClassDist,m._modelClassDist);
  cmTask.doAll(m.test_frame == null ? m.fr : m.test_frame,true);
  if (m.regression) {
    float mse=cmTask._ss / ((float)(cmTask._rowcnt));
    m.errs=Arrays.copyOf(old.errs,old.errs.length + 1);
    m.errs[m.errs.length - 1]=mse;
    m.cms=Arrays.copyOf(old.cms,old.cms.length + 1);
    m.cms[m.cms.length - 1]=null;
  }
 else {
    _domain=cmTask.domain();
    m.confusion=CMTask.CMFinal.make(cmTask._matrix,m,cmTask.domain(),cmTask._errorsPerTree,m.oobee,cmTask._sum,cmTask._cms);
    m.cm=cmTask._matrix._matrix;
    m.errs=Arrays.copyOf(old.errs,old.errs.length + 1);
    m.errs[m.errs.length - 1]=m.confusion.mse();
    m.cms=Arrays.copyOf(old.cms,old.cms.length + 1);
    ConfusionMatrix new_cm=new ConfusionMatrix(m.confusion._matrix);
    m.cms[m.cms.length - 1]=new_cm;
    if (m.classes() == 2) {
      m.validAUC=makeAUC(toCMArray(m.confusion._cms),ModelUtils.DEFAULT_THRESHOLDS,m.cmDomain);
    }
    if (m.importance && !m.regression)     m.varimp=m.doVarImpCalc(m);
  }
}
