{
  DocGen.HTML.title(sb,title);
  sb.append("<div class=\"alert\">").append("Actions: ");
  sb.append(Inspect2.link("Inspect training data (" + _dataKey.toString() + ")",_dataKey)).append(", ");
  if (this.test_frame != null)   sb.append(Inspect2.link("Inspect testing data (" + testKey.toString() + ")",testKey)).append(", ");
  sb.append(Predict.link(_key,"Score on dataset"));
  if (this.size() > 0 && this.size() < total_trees) {
    sb.append(", ");
    sb.append("<i class=\"icon-stop\"></i>&nbsp;").append("Continue training this model");
  }
  sb.append("</div>");
  DocGen.HTML.paragraph(sb,"Model Key: " + _key);
  DocGen.HTML.paragraph(sb,"Max depth: " + depth + ", Nbins:"+ bin_limit+ ", Trees: "+ this.size());
  DocGen.HTML.paragraph(sb,"Sample Rate: " + sample + ", Seed: "+ zeed+ ", mtry: "+ mtry);
  sb.append("</pre>");
  if (this.size() > 0 && this.size() < total_trees)   sb.append("Current Status: ").append("Building Random Forest");
 else {
    if (this.size() == total_trees) {
      sb.append("Current Status: ").append("Complete.");
    }
 else {
      sb.append("Current Status: ").append(this.current_status);
    }
  }
  buildCM(sb);
  sb.append("<br />");
  if (errs != null && this.size() > 0) {
    DocGen.HTML.section(sb,"Mean Squared Error by Tree");
    DocGen.HTML.arrayHead(sb);
    sb.append("<tr style='min-width:60px'><th>Trees</th>");
    int last=this.size() - 1;
    for (int i=last; i >= 0; i--)     sb.append("<td style='min-width:60px'>").append(i + 1).append("</td>");
    sb.append("</tr>");
    sb.append("<tr><th class='warning'>MSE</th>");
    for (int i=last; i >= 0; i--)     sb.append((!(Double.isNaN(errs[i]) || errs[i] <= 0.f)) ? String.format("<td style='min-width:60px'>%5.5f</td>",errs[i]) : "<td style='min-width:60px'>---</td>");
    sb.append("</tr>");
    DocGen.HTML.arrayTail(sb);
  }
  sb.append("<br/>");
  JsonObject trees=new JsonObject();
  trees.addProperty(Constants.TREE_COUNT,this.size());
  if (this.size() > 0) {
    trees.add(Constants.TREE_DEPTH,this.depth().toJson());
    trees.add(Constants.TREE_LEAVES,this.leaves().toJson());
  }
  generateHTMLTreeStats(sb,trees);
}
