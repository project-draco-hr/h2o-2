{
  return new ModelAutobufferSerializer(){
    @Override protected AutoBuffer postSave(    Model m,    AutoBuffer ab){
      int ntrees=N;
      ab.put4(ntrees);
      for (int i=0; i < ntrees; ++i) {
        byte[] bits=tree(i);
        ab.putA1(bits);
        for (int j=0; j < nclasses(); ++j) {
          if (dtreeKeys[i][j] == null)           continue;
          Value v=DKV.get(dtreeKeys[i][j]);
          if (v == null)           continue;
          DTree.TreeModel.CompressedTree t=v.get();
          ab.put(t);
        }
      }
      return ab;
    }
    @Override protected AutoBuffer postLoad(    Model m,    AutoBuffer ab){
      int ntrees=ab.get4();
      Futures fs=new Futures();
      for (int i=0; i < ntrees; ++i) {
        DKV.put(t_keys[i],new Value(t_keys[i],ab.getA1()),fs);
        for (int j=0; j < nclasses(); ++j) {
          if (dtreeKeys[i][j] == null)           continue;
          UKV.put(dtreeKeys[i][j],new Value(dtreeKeys[i][j],ab.get(DTree.TreeModel.CompressedTree.class)),fs);
        }
      }
      fs.blockForPending();
      return ab;
    }
  }
;
}
