{
  final CMTask cmTask=CMTask.scoreTask(this,treeCount(),oobee,fr,modelResp);
  if (regression) {
    float mse=cmTask._ss / ((float)(cmTask._rowcnt));
    errs=Arrays.copyOf(errs,errs.length + 1);
    errs[errs.length - 1]=mse;
    cms=Arrays.copyOf(cms,cms.length + 1);
    cms[cms.length - 1]=null;
  }
 else {
    _domain=cmTask.domain(modelResp);
    confusion=CMTask.CMFinal.make(cmTask._matrix,this,_domain,cmTask._errorsPerTree,oobee,cmTask._sum,cmTask._cms);
    this.cm=cmTask._matrix._matrix;
    errorsPerTree=cmTask._errorsPerTree;
    errs=Arrays.copyOf(errs,errs.length + 1);
    errs[errs.length - 1]=confusion.mse();
    cms=Arrays.copyOf(cms,cms.length + 1);
    cms[cms.length - 1]=new ConfusionMatrix(confusion._matrix);
    if (classes() == 2)     validAUC=makeAUC(toCMArray(confusion._cms),ModelUtils.DEFAULT_THRESHOLDS,cmDomain);
    if (importance && !regression)     varimp=doVarImpCalc(fr,this,modelResp);
  }
}
