def createTestTrain(srcKey, trainDstKey, testDstKey, percent, outputClass, numCols):
    print 'train: get random %. change class 4 to 1, everything else to 0. factor() to turn real to int (for rf)'
    execExpr = ''
    STUPID_REPEAT = 20
    for i in range(STUPID_REPEAT):
        execExpr += ('a.hex=runif(%s);' % srcKey)
        execExpr += ('%s=%s[a.hex%s,];' % (trainDstKey, srcKey, '<=0.9'))
        if (not DO_MULTINOMIAL):
            execExpr += ('%s[,%s]=%s[,%s]==%s;' % (trainDstKey, numCols, trainDstKey, numCols, outputClass))
            execExpr += ('factor(%s[, %s]);' % (trainDstKey, numCols))
    h2o_exec.exec_expr(None, execExpr, resultKey=trainDstKey, timeoutSecs=(STUPID_REPEAT * 15))
    inspect = h2o_cmd.runInspect(key=trainDstKey)
    h2o_cmd.infoFromInspect(inspect, ('%s after mungeDataset on %s' % (trainDstKey, srcKey)))
    print 'test: same, but use the same runif() random result, complement'
    execExpr = ('a.hex=runif(%s);' % srcKey)
    execExpr += ('%s=%s[a.hex%s,];' % (testDstKey, srcKey, '>0.9'))
    if (not DO_MULTINOMIAL):
        execExpr += ('%s[,%s]=%s[,%s]==%s;' % (testDstKey, numCols, testDstKey, numCols, outputClass))
        execExpr += ('factor(%s[, %s])' % (testDstKey, numCols))
    h2o_exec.exec_expr(None, execExpr, resultKey=testDstKey, timeoutSecs=10)
    inspect = h2o_cmd.runInspect(key=testDstKey)
    h2o_cmd.infoFromInspect(inspect, ('%s after mungeDataset on %s' % (testDstKey, srcKey)))
