def test_KMeans_winesPCA(self):
    if localhost:
        csvFilenameList = [('winesPCA.csv', 480, 'cA')]
    else:
        csvFilenameList = [('winesPCA.csv', 480, 'cA')]
    importFolderPath = os.path.abspath(h2o.find_file('smalldata'))
    h2i.setupImportFolder(None, importFolderPath)
    for (csvFilename, timeoutSecs, key2) in csvFilenameList:
        csvPathname = ((importFolderPath + '/') + csvFilename)
        start = time.time()
        parseKey = h2i.parseImportFolderFile(None, 'winesPCA.csv', importFolderPath, timeoutSecs=2000, key2=key2)
        print 'parse end on ', csvPathname, 'took', (time.time() - start), 'seconds'
        h2o.check_sandbox_for_errors()
        inspect = h2o_cmd.runInspect(None, parseKey['destination_key'])
        print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
        kwargs = {'cols': None, 'epsilon': 1e-06, 'k': 3, }
        start = time.time()
        kmeans = h2o_cmd.runKMeansOnly(parseKey=parseKey, timeoutSecs=timeoutSecs, retryDelaySecs=2, pollTimeoutSecs=60, **kwargs)
        elapsed = (time.time() - start)
        print 'kmeans end on ', csvPathname, 'took', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
        h2o_kmeans.simpleCheckKMeans(self, kmeans, **kwargs)
        centers = h2o_kmeans.bigCheckResults(self, kmeans, csvPathname, parseKey, 'd', **kwargs)
        print 'Expected centers: [-2.276318, -0.965151], with 59 rows.'
        print '                  [0.0388763, 1.63886039], with 71 rows.'
        print '\t\t     [2.740469, -1.237816], with 48 rows.'
        model_key = kmeans['destination_key']
        kmeansScoreResult = h2o.nodes[0].kmeans_score(key=parseKey['destination_key'], model_key=model_key)
        score = kmeansScoreResult['score']
