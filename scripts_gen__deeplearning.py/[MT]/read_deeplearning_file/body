def read_deeplearning_file(deeplearning_file):
    '\n    Read deep learning file and generate R parameter stub stuff.\n\n    @param deeplearning_file: Java source code file\n    @return: none\n    '
    try:
        nlist = []
        in_api = False
        f = open(deeplearning_file, 'r')
        s = f.readline()
        lineno = 0
        while (len(s) != 0):
            lineno = (lineno + 1)
            stripped = s.strip()
            if (len(stripped) == 0):
                s = f.readline()
                continue
            if stripped.startswith('@API'):
                if in_api:
                    assert False
                in_api = True
                s = f.readline()
                continue
            if in_api:
                skip = False
                if ('checkpoint' in stripped):
                    skip = True
                if ('expert_mode' in stripped):
                    skip = True
                if skip:
                    in_api = False
                    s = f.readline()
                    continue
                match_groups = re.search('public boolean (\\S+) = (\\S+);', s)
                if (match_groups is not None):
                    t = 'boolean'
                    n = match_groups.group(1)
                    v = match_groups.group(2)
                    print '  parms = .addBooleanParm(parms, k="{}", v={})'.format(n, n)
                    nlist.append(n)
                    in_api = False
                    s = f.readline()
                    continue
                match_groups = re.search('public Activation (\\S+) = (\\S+);', s)
                if (match_groups is not None):
                    t = 'string'
                    n = match_groups.group(1)
                    v = match_groups.group(2)
                    print '  parms = .addStringParm(parms, k="{}", v={})'.format(n, n)
                    nlist.append(n)
                    in_api = False
                    s = f.readline()
                    continue
                match_groups = re.search('public int\\[\\] (\\S+) = .*;', s)
                if (match_groups is not None):
                    t = 'int array'
                    n = match_groups.group(1)
                    print '  parms = .addIntArrayParm(parms, k="{}", v={})'.format(n, n)
                    nlist.append(n)
                    in_api = False
                    s = f.readline()
                    continue
                match_groups = re.search('public int (\\S+) = .*;', s)
                if (match_groups is not None):
                    t = 'int'
                    n = match_groups.group(1)
                    print '  parms = .addIntParm(parms, k="{}", v={})'.format(n, n)
                    nlist.append(n)
                    in_api = False
                    s = f.readline()
                    continue
                match_groups = re.search('public double (\\S+) = (\\S+);', s)
                if (match_groups is not None):
                    t = 'double'
                    n = match_groups.group(1)
                    v = match_groups.group(2)
                    print '  parms = .addDoubleParm(parms, k="{}", v={})'.format(n, n)
                    nlist.append(n)
                    in_api = False
                    s = f.readline()
                    continue
                match_groups = re.search('public float (\\S+) = (\\S+);', s)
                if (match_groups is not None):
                    t = 'float'
                    n = match_groups.group(1)
                    v = match_groups.group(2)
                    print '  parms = .addFloatParm(parms, k="{}", v={})'.format(n, n)
                    nlist.append(n)
                    in_api = False
                    s = f.readline()
                    continue
                match_groups = re.search('public double\\[\\] (\\S+);', s)
                if (match_groups is not None):
                    t = 'double array'
                    n = match_groups.group(1)
                    print '  parms = .addDoubleArrayParm(parms, k="{}", v={})'.format(n, n)
                    nlist.append(n)
                    in_api = False
                    s = f.readline()
                    continue
                match_groups = re.search('public long (\\S+) = new Random.*;', s)
                if (match_groups is not None):
                    t = 'long'
                    n = match_groups.group(1)
                    v = (-1)
                    print '  parms = .addLongParm(parms, k="{}", v={})'.format(n, n)
                    nlist.append(n)
                    in_api = False
                    s = f.readline()
                    continue
                match_groups = re.search('public long (\\S+) = (\\S+);', s)
                if (match_groups is not None):
                    t = 'long'
                    n = match_groups.group(1)
                    v = match_groups.group(2)
                    print '  parms = .addLongParm(parms, k="{}", v={})'.format(n, n)
                    nlist.append(n)
                    in_api = False
                    s = f.readline()
                    continue
                if (stripped == 'public InitialWeightDistribution initial_weight_distribution = InitialWeightDistribution.UniformAdaptive;'):
                    t = 'string'
                    n = 'initial_weight_distribution'
                    print '  parms = .addStringParm(parms, k="{}", v={})'.format(n, n)
                    nlist.append(n)
                    in_api = False
                    s = f.readline()
                    continue
                if (stripped == 'public Loss loss = Loss.CrossEntropy;'):
                    t = 'string'
                    n = 'loss'
                    print '  parms = .addStringParm(parms, k="{}", v={})'.format(n, n)
                    nlist.append(n)
                    in_api = False
                    s = f.readline()
                    continue
                if (stripped == 'public ClassSamplingMethod score_validation_sampling = ClassSamplingMethod.Uniform;'):
                    t = 'string'
                    n = 'score_validation_sampling'
                    print '  parms = .addStringParm(parms, k="{}", v={})'.format(n, n)
                    nlist.append(n)
                    in_api = False
                    s = f.readline()
                    continue
                print ('ERROR: No match group found on line ', lineno)
                sys.exit(1)
            s = f.readline()
        f.close()
        for n in nlist:
            print '  {},'.format(n)
    except IOError as e:
        print ''
        print ('ERROR: Failure reading test list: ' + deeplearning_file)
        print '       (errno {0}): {1}'.format(e.errno, e.strerror)
        print ''
        sys.exit(1)
