{
  API_PORT=OPT_ARGS.port != 0 ? OPT_ARGS.port : DEFAULT_PORT;
  while (true) {
    UDP_PORT=API_PORT + 1;
    if (API_PORT < 0 || API_PORT > 65534)     Log.die("Attempting to use system illegal port, either " + API_PORT + " or "+ UDP_PORT);
    try {
      _apiSocket=OPT_ARGS.ip == null ? new ServerSocket(API_PORT) : new ServerSocket(API_PORT,-1,SELF_ADDRESS);
      _apiSocket.setReuseAddress(true);
      _udpSocket=DatagramChannel.open();
      _udpSocket.socket().setReuseAddress(true);
      _udpSocket.socket().bind(new InetSocketAddress(SELF_ADDRESS,UDP_PORT));
      break;
    }
 catch (    IOException e) {
      try {
        if (_apiSocket != null)         _apiSocket.close();
      }
 catch (      IOException ohwell) {
        Log.err(ohwell);
      }
      Utils.close(_udpSocket);
      _apiSocket=null;
      _udpSocket=null;
      if (OPT_ARGS.port != 0)       Log.die("On " + SELF_ADDRESS + " some of the required ports "+ (OPT_ARGS.port + 0)+ ", "+ (OPT_ARGS.port + 1)+ " are not available, change -port PORT and try again.");
    }
    API_PORT+=2;
  }
  SELF=H2ONode.self(SELF_ADDRESS);
  Log.info("Internal communication uses port: ",UDP_PORT,"\nListening for HTTP and REST traffic on  http://",SELF_ADDRESS.getHostAddress(),":" + _apiSocket.getLocalPort() + "/");
  String embeddedConfigFlatfile=null;
  AbstractEmbeddedH2OConfig ec=getEmbeddedH2OConfig();
  if (ec != null) {
    ec.notifyAboutEmbeddedWebServerIpPort(SELF_ADDRESS,API_PORT);
    if (ec.providesFlatfile()) {
      try {
        embeddedConfigFlatfile=ec.fetchFlatfile();
      }
 catch (      Exception e) {
        Log.err("Failed to get embedded config flatfile");
        Log.err(e);
        H2O.exit(1);
      }
    }
  }
  NAME=OPT_ARGS.name == null ? System.getProperty("user.name") : OPT_ARGS.name;
  if (embeddedConfigFlatfile != null) {
    STATIC_H2OS=parseFlatFileFromString(embeddedConfigFlatfile);
  }
 else {
    STATIC_H2OS=parseFlatFile(OPT_ARGS.flatfile);
  }
  int hash=NAME.hashCode() & 0x7fffffff;
  int port=(hash % (0xF0000000 - 0xE1000000)) + 0xE1000000;
  byte[] ip=new byte[4];
  for (int i=0; i < 4; i++)   ip[i]=(byte)(port >>> ((3 - i) << 3));
  try {
    CLOUD_MULTICAST_GROUP=InetAddress.getByAddress(ip);
  }
 catch (  UnknownHostException e) {
    throw Log.errRTExcept(e);
  }
  CLOUD_MULTICAST_PORT=(port >>> 16);
}
