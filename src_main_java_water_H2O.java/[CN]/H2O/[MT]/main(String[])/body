{
  Log.POST(300,"");
  if (IS_SYSTEM_RUNNING)   return;
  IS_SYSTEM_RUNNING=true;
  Arguments arguments=new Arguments(args);
  arguments.extract(OPT_ARGS);
  ARGS=arguments.toStringArray();
  if ((OPT_ARGS.h != null) || (OPT_ARGS.help != null)) {
    printHelp();
    H2O.exit(0);
  }
  if (OPT_ARGS.version != null) {
    sayHi();
    H2O.exit(0);
  }
  sayHi();
  ParseDataset.PLIMIT=OPT_ARGS.pparse_limit;
  Log.POST(310,"");
  String ice=DEFAULT_ICE_ROOT;
  if (OPT_ARGS.ice_root != null)   ice=OPT_ARGS.ice_root.replace("\\","/");
  try {
    ICE_ROOT=new URI(ice);
  }
 catch (  URISyntaxException ex) {
    throw new RuntimeException("Invalid ice_root: " + ice + ", "+ ex.getMessage());
  }
  Log.info("ICE root: '" + ICE_ROOT + "'");
  SELF_ADDRESS=findInetAddressForSelf();
  Log.POST(320,"");
  Log.wrap();
  startLocalNode();
  Log.POST(330,"");
  String logDir=(Log.getLogDir() != null) ? Log.getLogDir() : "(unknown)";
  Log.info("Log dir: '" + logDir + "'");
  initializePersistence();
  Log.POST(340,"");
  startNetworkServices();
  Log.POST(350,"");
  startApiIpPortWatchdog();
  Log.POST(360,"");
  initializeExpressionEvaluation();
  Log.POST(370,"");
  startupFinalize();
  Log.POST(380,"");
}
