{
  List<FlatFileEntry> list=new ArrayList<FlatFileEntry>();
  BufferedReader br=null;
  int port=DEFAULT_PORT;
  try {
    br=new BufferedReader(new InputStreamReader(is));
    String strLine=null;
    while ((strLine=br.readLine()) != null) {
      strLine=strLine.trim();
      if (strLine.startsWith("#") || strLine.isEmpty())       continue;
      String ip=null, portStr=null;
      int slashIdx=strLine.indexOf('/');
      int colonIdx=strLine.indexOf(':');
      if (slashIdx == -1 && colonIdx == -1) {
        ip=strLine;
      }
 else       if (slashIdx == -1) {
        ip=strLine.substring(0,colonIdx);
        portStr=strLine.substring(colonIdx + 1);
      }
 else       if (colonIdx == -1) {
        ip=strLine.substring(slashIdx + 1);
      }
 else       if (slashIdx > colonIdx) {
        Log.die("Invalid format, must be name/ip[:port], not '" + strLine + "'");
      }
 else {
        ip=strLine.substring(slashIdx + 1,colonIdx);
        portStr=strLine.substring(colonIdx + 1);
      }
      InetAddress inet=InetAddress.getByName(ip);
      if (!(inet instanceof Inet4Address))       Log.die("Only IP4 addresses allowed: given " + ip);
      if (portStr != null && !portStr.equals("")) {
        try {
          port=Integer.decode(portStr);
        }
 catch (        NumberFormatException nfe) {
          Log.die("Invalid port #: " + portStr);
        }
      }
      FlatFileEntry entry=new FlatFileEntry();
      entry.inet=inet;
      entry.port=port;
      list.add(entry);
    }
  }
 catch (  Exception e) {
    Log.die(e.toString());
  }
 finally {
    Utils.close(br);
  }
  return list;
}
