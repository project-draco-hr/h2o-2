{
  AbstractBuildVersion abv=getBuildVersion();
  String build_branch=abv.branchName();
  String build_hash=abv.lastCommitHash();
  String build_describe=abv.describe();
  String build_project_version=abv.projectVersion();
  String build_by=abv.compiledBy();
  String build_on=abv.compiledOn();
  Log.info("----- H2O started -----");
  Log.info("Build git branch: " + build_branch);
  Log.info("Build git hash: " + build_hash);
  Log.info("Build git describe: " + build_describe);
  Log.info("Build project version: " + build_project_version);
  Log.info("Built by: '" + build_by + "'");
  Log.info("Built on: '" + build_on + "'");
  Runtime runtime=Runtime.getRuntime();
  double ONE_GB=1024 * 1024 * 1024;
  Log.info("Java availableProcessors: " + runtime.availableProcessors());
  Log.info("Java heap totalMemory: " + String.format("%.2f gb",runtime.totalMemory() / ONE_GB));
  Log.info("Java heap maxMemory: " + String.format("%.2f gb",runtime.maxMemory() / ONE_GB));
  Log.info("Java version: " + String.format("Java %s (from %s)",System.getProperty("java.version"),System.getProperty("java.vendor")));
  Log.info("OS   version: " + String.format("%s %s (%s)",System.getProperty("os.name"),System.getProperty("os.version"),System.getProperty("os.arch")));
  long totalMemory=OSUtils.getTotalPhysicalMemory();
  Log.info("Machine physical memory: " + (totalMemory == -1 ? "NA" : String.format("%.2f gb",totalMemory / ONE_GB)));
}
