{
  _numSplits=1;
  final int ncols=fr._vecs.length;
  Vec vsplit=Vec.makeZero(fr._vecs[0]);
  double mins[]=new double[ncols], maxs[]=new double[ncols];
  boolean isInts[]=new boolean[ncols];
  for (int i=0; i < ncols; i++) {
    mins[i]=fr._vecs[i].min();
    maxs[i]=fr._vecs[i].max();
    isInts[i]=fr._vecs[i]._isInt;
  }
  Histogram hist=new Histogram(fr._names,fr._vecs[0].length(),mins,maxs,isInts);
  Log.unwrap(System.out,hist.toString() + "\n");
  double[] ds=new double[ncols];
  for (int j=0; j < fr._vecs[0].length(); j++) {
    for (int i=0; i < ncols; i++)     ds[i]=fr._vecs[i].at(j);
    hist.incr(ds);
  }
  Log.unwrap(System.out,hist.toString() + "\n");
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < ncols - 1; i++)   sb.append(i).append("=").append(hist.score(i)).append("  ");
  Log.unwrap(System.out,sb.toString());
  int scol=hist.bestSplit();
  int nsplits=hist._mins[scol].length;
  Log.unwrap(System.out,"Best split is column " + scol);
  double mins2[][]=new double[nsplits][ncols];
  double maxs2[][]=new double[nsplits][ncols];
  for (int i=0; i < nsplits; i++) {
    Arrays.fill(mins2[i],Double.MAX_VALUE);
    Arrays.fill(maxs2[i],-Double.MAX_VALUE);
  }
  for (int j=0; j < fr._vecs[0].length(); j++) {
    double d=fr._vecs[scol].at(j);
    int bin=hist.bin(scol,d);
    vsplit.set8(j,bin);
    for (int i=0; i < ncols; i++) {
      double d2=fr._vecs[i].at(j);
      if (d2 < mins2[bin][i])       mins2[bin][i]=d2;
      if (d2 > maxs2[bin][i])       maxs2[bin][i]=d2;
    }
  }
  for (int i=0; i < vsplit.nChunks(); i++)   vsplit.elem2BV(i).close(i,null);
  Tree t=new Tree(hist,scol);
  Histogram hs[]=new Histogram[nsplits];
  for (int i=0; i < nsplits; i++) {
    hs[i]=new Histogram(fr._names,hist._bins[scol][i],mins2[i],maxs2[i],isInts);
    Log.unwrap(System.out,hs[i].toString());
  }
  for (int j=0; j < fr._vecs[0].length(); j++) {
    for (int i=0; i < ncols; i++)     ds[i]=fr._vecs[i].at(j);
    hs[(int)vsplit.at8(j)].incr(ds);
  }
  for (int j=0; j < nsplits; j++) {
    Log.unwrap(System.out,hs[j].toString());
    sb=new StringBuilder();
    for (int i=0; i < ncols - 1; i++)     sb.append(i).append("=").append(hs[j].score(i)).append("  ");
    Log.unwrap(System.out,sb.toString());
    int scol2=hs[j].bestSplit();
    Log.unwrap(System.out,"Best split is column " + scol2);
  }
  UKV.remove(vsplit._key);
}
