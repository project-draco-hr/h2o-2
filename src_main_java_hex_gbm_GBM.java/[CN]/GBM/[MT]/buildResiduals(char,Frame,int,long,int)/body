{
  String[] domain=response.domain();
  if (nclass == 1) {
    fr.add("Residual",response.makeCon(response.mean()));
    throw H2O.unimpl();
  }
 else {
    float f=1.0f / nclass;
    for (int i=0; i < nclass; i++)     fr.add("Residual-" + domain[i],response.makeCon(-f));
  }
  for (int i=0; i < nclass; i++)   fr.add("Pred-" + domain[i],response.makeZero());
  new MRTask2(){
    @Override public void map(    Chunk chks[]){
      Chunk cy=DTree.chk_resp(chks,ncols,nclass);
      for (int i=0; i < cy._len; i++) {
        if (cy.isNA0(i))         continue;
        int cls=(int)cy.at80(i) - ymin;
        Chunk res=DTree.chk_work(chks,ncols,nclass,cls);
        res.set0(i,1.0f + (float)res.at0(i));
      }
    }
  }
.doAll(fr);
}
