{
  String[] domain=vresponse.domain();
  float preds[]=new float[nclass];
  if (nclass == 1) {
    fr.add("Residual",vresponse.makeCon(vresponse.mean()));
    throw H2O.unimpl();
  }
 else {
    long cs[]=new ClassDist(nclass,ymin).doAll(vresponse)._cs;
    for (int i=0; i < nclass; i++) {
      preds[i]=(float)cs[i] / nrows;
      fr.add("Residual-" + domain[i],vresponse.makeCon(-preds[i]));
    }
  }
  for (int i=0; i < nclass; i++)   fr.add("Pred-" + domain[i],vresponse.makeZero());
  new MRTask2(){
    @Override public void map(    Chunk chks[]){
      Chunk cy=DTree.chk_resp(chks,ncols,nclass);
      for (int i=0; i < cy._len; i++) {
        if (cy.isNA0(i))         continue;
        int cls=(int)cy.at80(i) - ymin;
        Chunk res=DTree.chk_work(chks,ncols,nclass,cls);
        res.set0(i,1.0f + (float)res.at0(i));
      }
    }
  }
.doAll(fr);
  return preds;
}
