{
  if (family == Family.bernoulli) {
    bodyCtxSB.i().p("// Compute Probabilities for Bernoulli 0-1 classifier").nl();
    bodyCtxSB.i().p("double fx = preds[1] + " + initialPrediction + ";").nl();
    bodyCtxSB.i().p("preds[2] = 1.0f/(float)(1.0f+Math.exp(-fx))").nl();
    bodyCtxSB.i().p("preds[1] = 1.0f-preds[2]").nl();
  }
 else   if (isClassifier()) {
    bodyCtxSB.i().p("// Compute Probabilities for classifier (scale via http://www.hongliangjie.com/2011/01/07/logsum/)").nl();
    bodyCtxSB.i().p("float dsum = 0, maxval = Float.NEGATIVE_INFINITY;").nl();
    if (nclasses() == 2) {
      bodyCtxSB.i().p("preds[2] = -preds[1];").nl();
    }
    bodyCtxSB.i().p("for(int i=1; i<preds.length; i++) maxval = Math.max(maxval, preds[i]);").nl();
    bodyCtxSB.i().p("for(int i=1; i<preds.length; i++) dsum += (preds[i]=(float) Math.exp(preds[i] - maxval));").nl();
    bodyCtxSB.i().p("for(int i=1; i<preds.length; i++) preds[i] = preds[i] / dsum;").nl();
  }
 else {
    bodyCtxSB.i().p("// Compute Regression").nl();
    bodyCtxSB.i().p("preds[1] += " + initialPrediction + ";").nl();
  }
}
