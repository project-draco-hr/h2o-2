def test_GLM_100Mx70_hosts(self):
    if (1 == 0):
        SYNDATASETS_DIR = h2o.make_syn_dir()
        createList = [(100000000, 70, 'cA', 10000)]
        for (rowCount, colCount, hex_key, timeoutSecs) in createList:
            csvFilename = (((((('syn_' + str(SEEDPERFILE)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
            csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
            print 'Creating random', csvPathname
            SEEDPERFILE = random.randint(0, sys.maxint)
            write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
    if localhost:
        csvFilenameList = [('rand_logreg_100000000x70.csv.gz', 500, 'rand_100Mx70.hex')]
    else:
        csvFilenameList = [('rand_logreg_100000000x70.csv.gz', 500, 'rand_100Mx70.hex')]
    lenNodes = len(h2o.nodes)
    importFolderPath = 'standard'
    for (csvFilename, timeoutSecs, hex_key) in csvFilenameList:
        csvPathname = ((importFolderPath + '/') + csvFilename)
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, hex_key=hex_key, timeoutSecs=2000, retryDelaySecs=5, initialDelaySecs=10, pollTimeoutSecs=60)
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        csvPathname = ((importFolderPath + '/') + csvFilename)
        num_rows = inspect['num_rows']
        num_cols = inspect['num_cols']
        print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(num_rows), '    num_cols:', '{:,}'.format(num_cols)
        y = (num_cols - 1)
        kwargs = {'family': 'binomial', 'link': 'logit', 'y': y, 'max_iter': 8, 'n_folds': 0, 'beta_epsilon': 0.0001, 'alpha': 0, 'lambda': 0, }
        for trial in range(3):
            start = time.time()
            glm = h2o_cmd.runGLMOnly(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
            elapsed = (time.time() - start)
            print 'glm', trial, 'end on ', csvPathname, 'took', elapsed, 'seconds.',
            print ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
            h2o_glm.simpleCheckGLM(self, glm, None, **kwargs)
