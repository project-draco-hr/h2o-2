def test_GLM2_binomial_goalies(self):
    csvPathname = 'poisson/Goalies.csv'
    print '\nParsing', csvPathname
    parseResult = h2i.import_parse(bucket='smalldata', path=csvPathname, schema='put', hex_key='A.hex')
    inspect = h2o_cmd.runInspect(None, 'A.hex')
    h2o_cmd.infoFromInspect(inspect, csvPathname)
    case = 20
    execExpr = ('A.hex[,%s]=(A.hex[,%s]>%s)' % ((6 + 1), (6 + 1), case))
    h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
    paramDict = define_params()
    for trial in range(5):
        params = {'response': 6, 'n_folds': 1, 'family': 'binomial', 'alpha': 0, 'lambda': 0.0001, 'beta_epsilon': 0.001, 'max_iter': 8, }
        colX = h2o_glm.pickRandGlmParams(paramDict, params)
        kwargs = params.copy()
        timeoutSecs = (180 + (kwargs['n_folds'] * 30))
        timeoutSecs = max(timeoutSecs, (8 * (kwargs['max_iter'] + 1)))
        start = time.time()
        print 'May not solve. Expanded categorical columns causing a large # cols, small # of rows'
        glm = h2o_cmd.runGLM(timeoutSecs=timeoutSecs, parseResult={'destination_key': 'A.hex', }, **kwargs)
        elapsed = (time.time() - start)
        print 'glm end on ', csvPathname, 'Trial #', trial, 'completed in', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        h2o_glm.simpleCheckGLM(self, glm, None, **kwargs)
        print 'Trial #', trial, 'completed\n'
