{
  Key skey=Key.make(input("src_key"));
  long naCnt=0;
  boolean enumCol=false;
  for (int i=0; i < cols.length; i++) {
    naCnt+=cols[i].naCnt;
    enumCol|=cols[i].type == ColType.Enum;
  }
  Vec svecs[]=src_key.vecs();
  DocGen.HTML.title(sb,skey.toString());
  DocGen.HTML.section(sb,"" + String.format("%,d",numCols) + " columns, "+ String.format("%,d",numRows)+ " rows, "+ PrettyPrint.bytes(byteSize)+ " bytes (compressed), "+ (naCnt == 0 ? "no" : PrettyPrint.bytes(naCnt))+ " missing elements");
  sb.append("<div class='alert'>" + "<br/>Build models using " + DRF.link(skey,"Distributed Random Forest") + ", "+ GBM.link(skey,"Distributed GBM")+ ", "+ GLM2.link(skey,"Generalized Linear Modeling (beta)")+ ", "+ DeepLearning.link(skey,"Deep Learning (beta)")+ ", "+ hex.LR2.link(skey,"Linear Regression")+ ",<br>"+ SummaryPage2.link(skey,"Summary")+ ", "+ DownloadDataset.link(skey,"Download as CSV")+ "</div>");
  String _scrollto=String.valueOf(offset - 1);
  sb.append(" <script>$(document).ready(function(){ " + " $('html, body').animate({ scrollTop: $('#row_" + _scrollto + "').offset().top"+ "}, 2000);"+ "return false;"+ "});</script>");
  sb.append("<form class='well form-inline' action='Inspect2.html' id='inspect'>" + " <input type='hidden' name='src_key' value=" + skey.toString() + ">"+ " <input type='text' class='input-small span5' placeholder='filter' "+ "    name='offset' id='offset' value='"+ offset+ "' maxlength='512'>"+ " <button type='submit' class='btn btn-primary'>Jump to row!</button>"+ "</form>");
  sb.append(pagination(src_key.numRows(),skey));
  DocGen.HTML.arrayHead(sb);
  sb.append("<tr class='warning'>");
  sb.append("<td>").append("Row").append("</td>");
  for (int i=0; i < cols.length; i++)   sb.append("<td><b>").append(cols[i].name).append("</b></td>");
  sb.append("</tr>");
  sb.append("<tr class='warning'>");
  sb.append("<td>").append("Change Type").append("</td>");
  for (int i=0; i < cols.length; i++) {
    if (cols[i].type == ColType.Int) {
      String btn="<a href='ToEnum2.html?src_key=" + src_key._key.toString() + "&column_index="+ (i + 1)+ "'>"+ "<button type='submit' class='btn btn-custom'>As Factor</button>";
      sb.append("<td><b>").append(btn).append("</b></td>");
      continue;
    }
    if (src_key.vecs()[i] instanceof TransfVec) {
      String btn2="<a href='ToInt2.html?src_key=" + src_key._key.toString() + "&column_index="+ (i + 1)+ "'>"+ "<button type='submit' class='btn btn-custom'>As Integer</button>";
      sb.append("<td><b>").append(btn2).append("</b></td>");
      continue;
    }
    if (cols[i].type != ColType.Int) {
      sb.append("<td><b>").append("").append("</b></td>");
      continue;
    }
  }
  sb.append("</tr>");
  sb.append("<tr class='warning'>");
  sb.append("<td>").append("Type").append("</td>");
  for (int i=0; i < cols.length; i++)   sb.append("<td><b>").append(cols[i].type).append("</b></td>");
  sb.append("</tr>");
  sb.append("<tr class='warning'>");
  sb.append("<td>").append("Min").append("</td>");
  for (int i=0; i < cols.length; i++)   sb.append("<td>").append(cols[i].type == ColType.Enum ? NA : x1(svecs[i],-1,cols[i].min)).append("</td>");
  sb.append("</tr>");
  sb.append("<tr class='warning'>");
  sb.append("<td>").append("Max").append("</td>");
  for (int i=0; i < cols.length; i++)   sb.append("<td>").append(cols[i].type == ColType.Enum ? NA : x1(svecs[i],-1,cols[i].max)).append("</td>");
  sb.append("</tr>");
  sb.append("<tr class='warning'>");
  sb.append("<td>").append("Mean").append("</td>");
  for (int i=0; i < cols.length; i++)   sb.append("<td>").append(cols[i].type == ColType.Enum ? NA : x1(svecs[i],-1,cols[i].mean)).append("</td>");
  sb.append("</tr>");
  if (enumCol) {
    sb.append("<tr class='warning'>");
    sb.append("<td>").append("Cardinality").append("</td>");
    for (int i=0; i < cols.length; i++)     sb.append("<td>").append(cols[i].type == ColType.Enum ? String.format("%d",cols[i].cardinality) : NA).append("</td>");
    sb.append("</tr>");
  }
  if (naCnt > 0) {
    sb.append("<tr class='warning'>");
    sb.append("<td>").append("Missing").append("</td>");
    for (int i=0; i < cols.length; i++)     sb.append("<td>").append(cols[i].naCnt > 0 ? Long.toString(cols[i].naCnt) : NA).append("</td>");
    sb.append("</tr>");
  }
  if (offset == -1) {
    sb.append("<tr class='warning'>");
    sb.append("<td>").append("Size").append("</td>");
    for (int i=0; i < cols.length; i++)     sb.append("<td>").append(PrettyPrint.bytes(svecs[i].byteSize())).append("</td>");
    sb.append("</tr>");
    Vec c0=src_key.anyVec();
    int N=c0.nChunks();
    for (int j=0; j < N; j++) {
      sb.append("<tr>");
      sb.append("<td>").append(c0.chunkKey(j).home_node()).append(", ").append(c0.chunk2StartElem(j)).append("</td>");
      for (int i=0; i < cols.length; i++) {
        String clazz=svecs[i].elem2BV(j).getClass().getSimpleName();
        String trim=clazz.replaceAll("Chunk","");
        sb.append("<td>").append(trim).append("</td>");
      }
      sb.append("</tr>");
    }
  }
 else {
    int N=(int)Math.min(100,numRows - offset);
    for (int j=0; j < N; j++) {
      sb.append("<tr id='row_" + String.valueOf(offset + j) + "'>");
      sb.append("<td>").append(offset + j).append("</td>");
      for (int i=0; i < cols.length; i++)       sb.append("<td>").append(x0(svecs[i],offset + j)).append("</td>");
      sb.append("</tr>");
    }
  }
  DocGen.HTML.arrayTail(sb);
  return true;
}
