def test_fp_many_cols(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    if H2O_SUPPORTS_OVER_50K_COLS:
        tryList = [(100, 200000, 'cG', 120, 120), (100, 300000, 'cH', 120, 120), (100, 400000, 'cI', 120, 120), (100, 500000, 'cJ', 120, 120), (100, 700000, 'cL', 120, 120), (100, 800000, 'cM', 120, 120), (100, 900000, 'cN', 120, 120), (100, 1000000, 'cO', 120, 120), (100, 1200000, 'cK', 120, 120)]
    else:
        print 'Restricting number of columns tested to 50,000'
        tryList = [(100, 200000, 'cG', 200, 200), (100, 300000, 'cH', 200, 200), (100, 400000, 'cI', 200, 200), (100, 500000, 'cJ', 200, 200)]
    for (rowCount, colCount, hex_key, timeoutSecs, timeoutSecs2) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        sel = 0
        csvFilename = ('syn_%s_%s_%s_%s.csv' % (SEEDPERFILE, sel, rowCount, colCount))
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print 'Creating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE, sel)
        start = time.time()
        print csvFilename, 'parse starting'
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=timeoutSecs, doSummary=False)
        h2o.check_sandbox_for_errors()
        print csvFilename, 'parse time:', parseResult['response']['time']
        print 'Parse and summary:', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
        start = time.time()
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], timeoutSecs=timeoutSecs2)
        print 'Inspect:', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
        h2o_cmd.infoFromInspect(inspect, csvPathname)
        print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
        self.assertEqual(inspect['num_cols'], colCount, ('parse created result with the wrong number of cols %s %s' % (inspect['num_cols'], colCount)))
        self.assertEqual(inspect['num_rows'], rowCount, ("parse created result with the wrong number of rows (header shouldn't count) %s %s" % (inspect['num_rows'], rowCount)))
