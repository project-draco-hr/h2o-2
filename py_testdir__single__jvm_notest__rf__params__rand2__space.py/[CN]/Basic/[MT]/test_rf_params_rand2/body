def test_rf_params_rand2(self):
    csvPathname = 'space_shuttle_damage.csv'
    for trial in range(10):
        params = {'sample': 80, 'stat_type': 'ENTROPY', 'class_weights': 'yes=1000', 'ntree': 50, 'parallel': 1, 'response_variable': 'damage', 'ignore': 'flight', 'ntree': 25, 'out_of_bag_error_estimate': 1, }
        print 'params:', params
        colX = h2o_rf.pickRandRfParams(paramDict, params)
        print 'params:', params
        kwargs = params.copy()
        timeoutSecs = (30 + (15 * ((kwargs['parallel'] and 6) or 10)))
        start = time.time()
        parseResult = h2i.import_parse(bucket='smalldata', path=csvPathname, schema='put')
        rfView = h2o_cmd.runRF(parseResult=parseResult, timeoutSecs=timeoutSecs, retryDelaySecs=1, **kwargs)
        elapsed = (time.time() - start)
        (classification_error, classErrorPctList, totalScores) = h2o_rf.simpleCheckRFView(None, rfView, noPrint=True)
        print 'Trial #', trial, 'completed in', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs)), '\n'
        self.assertAlmostEqual(totalScores, 23, delta=1)
        self.assertLess(classErrorPctList[0], 95)
        self.assertLess(classErrorPctList[1], 29)
        self.assertLess(classification_error, 61)
