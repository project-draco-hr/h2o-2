def test_exec2_quant_cmp_uniform(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(500000, 1, 'x.hex', 1, 20000, ('C1', 1.1, 5000.0, 10000.0, 15000.0, 20000.0)), (500000, 1, 'x.hex', (-5000), 0, ('C1', (-5001.0), (-3750.0), (-2445), (-1200.0), 99)), (100000, 1, 'x.hex', (-100000), 100000, ('C1', (-100001.0), (-50000.0), 1613.0, 50000.0, 100000.0)), (100000, 1, 'x.hex', (-1), 1, ('C1', (-1.05), (-0.48), 0.0087, 0.5, 1.0)), (100000, 1, 'A.hex', 1, 100, ('C1', 1.05, 26.0, 51.0, 76.0, 100.0)), (100000, 1, 'A.hex', (-99), 99, ('C1', (-99), (-50.0), 0, 50.0, 99)), (100000, 1, 'B.hex', 1, 10000, ('C1', 1.05, 2501.0, 5001.0, 7501.0, 10000.0)), (100000, 1, 'B.hex', (-100), 100, ('C1', (-100.1), (-50.0), 0.85, 51.7, 100, 0)), (100000, 1, 'C.hex', 1, 100000, ('C1', 1.05, 25002.0, 50002.0, 75002.0, 100000.0)), (100000, 1, 'C.hex', (-101), 101, ('C1', (-100.1), (-50.45), (-1.18), 49.28, 100.0))]
    timeoutSecs = 10
    trial = 1
    n = h2o.nodes[0]
    lenNodes = len(h2o.nodes)
    x = 0
    timeoutSecs = 60
    for (rowCount, colCount, hex_key, expectedMin, expectedMax, expected) in tryList:
        maxDelta = (((expectedMax - expectedMin) / 20.0) / 2.0)
        maxDelta = (1.05 * maxDelta)
        SEEDPERFILE = random.randint(0, sys.maxint)
        x += 1
        csvFilename = (((((('syn_' + 'binary') + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print 'Creating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, expectedMin, expectedMax, SEEDPERFILE)
        csvPathnameFull = h2i.find_folder_and_filename(None, csvPathname, returnFullPath=True)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=30, doSummary=False)
        print "Parse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvFilename)
        numRows = inspect['numRows']
        numCols = inspect['numCols']
        summaryResult = h2o_cmd.runSummary(key=hex_key)
        h2o.verboseprint('summaryResult:', h2o.dump_json(summaryResult))
        column = summaryResult['summaries'][0]
        colname = column['colname']
        self.assertEqual(colname, expected[0])
        coltype = column['type']
        nacnt = column['nacnt']
        stats = column['stats']
        stattype = stats['type']
        mean = stats['mean']
        sd = stats['sd']
        print 'colname:', colname, 'mean (2 places):', h2o_util.twoDecimals(mean)
        print 'colname:', colname, 'std dev. (2 places):', h2o_util.twoDecimals(sd)
        zeros = stats['zeros']
        mins = stats['mins']
        h2o_util.assertApproxEqual(mins[0], expected[1], tol=maxDelta, msg='min is not approx. expected')
        maxs = stats['maxs']
        h2o_util.assertApproxEqual(maxs[0], expected[5], tol=maxDelta, msg='max is not approx. expected')
        pct = stats['pct']
        expectedPct = [0.001, 0.01, 0.1, 0.25, 0.33, 0.5, 0.66, 0.75, 0.9, 0.99, 0.999]
        pctile = stats['pctile']
        h2o_util.assertApproxEqual(pctile[3], expected[2], tol=maxDelta, msg='25th percentile is not approx. expected')
        h2o_util.assertApproxEqual(pctile[5], expected[3], tol=maxDelta, msg='50th percentile (median) is not approx. expected')
        h2o_util.assertApproxEqual(pctile[7], expected[4], tol=maxDelta, msg='75th percentile is not approx. expected')
        hstart = column['hstart']
        hstep = column['hstep']
        hbrk = column['hbrk']
        hcnt = column['hcnt']
        print 'pct:', pct
        print 'hcnt:', hcnt
        print 'len(hcnt)', len(hcnt)
        for b in hcnt[1:(-1)]:
            e = (numRows / len(hcnt))
        pt = h2o_util.twoDecimals(pctile)
        mx = h2o_util.twoDecimals(maxs)
        mn = h2o_util.twoDecimals(mins)
        print 'colname:', colname, 'pctile (2 places):', pt
        print 'colname:', colname, 'maxs: (2 places):', mx
        print 'colname:', colname, 'mins: (2 places):', mn
        compareActual = (mn[0], pt[3], pt[5], pt[7], mx[0])
        print 'min/25/50/75/max colname:', colname, '(2 places):', compareActual
        print 'maxs colname:', colname, '(2 places):', mx
        print 'mins colname:', colname, '(2 places):', mn
        trial += 1
        h2p.blue_print('\nTrying exec quantile')
        print 'Comparing (two places) each of the summary2 threshold quantile results, to single exec quantile'
        for (i, threshold) in enumerate(thresholds):
            if (i != 0):
                execExpr = ('r2=c(1); r2=quantile(%s[,1], c(%s,%s));' % (hex_key, threshold, threshold))
                (resultExec, result) = h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
                h2p.green_print(('\nresultExec: %s' % h2o.dump_json(resultExec)))
                h2p.blue_print(('\nthreshold: %.2f Exec quantile: %s Summary2: %s' % (threshold, result, pt[i])))
                if (not result):
                    raise Exception(('exec result: %s for quantile: %s is bad' % (result, threshold)))
                h2o_util.assertApproxEqual(result, pctile[i], tol=maxDelta, msg=('exec percentile: %s too different from expected: %s' % (result, pctile[i])))
            else:
                if (1 == 0):
                    execExpr = ('r2=c(1); r2=quantile(%s[,1], c(%s));' % (hex_key, ','.join(map(str, thresholds))))
                else:
                    execExpr = ('r2=c(1); r2=quantile(%s$C1, c(%s));' % (hex_key, ','.join(map(str, thresholds))))
                (resultExec, result) = h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
                inspect = h2o_cmd.runInspect(key='r2')
                numCols = inspect['numCols']
                numRows = inspect['numRows']
                self.assertEqual(numCols, 1)
                self.assertEqual(numRows, len(thresholds))
        if (colname != ''):
            h2o_summ.quantile_comparisons(csvPathnameFull, col=0, datatype='float', quantile=thresholds[(-1)], h2oExecQuantiles=result)
        h2o.nodes[0].remove_all_keys()
