def test_parse_10k_files(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    csvFilename = 'syn.csv.gz'
    headerData = 'ID,CAPSULE,AGE,RACE,DPROS,DCAPS,PSA,VOL,GLEASON'
    totalRows = 10
    maxFilenum = 10000
    for filenum in range(maxFilenum):
        rowData = rand_rowData()
        filePrefix = ('%04d' % filenum)
        csvPathname = ((((SYNDATASETS_DIR + '/') + filePrefix) + '_') + csvFilename)
        write_syn_dataset_gz(csvPathname, totalRows, headerData, rowData)
    avgFileSize = os.path.getsize(csvPathname)
    importFolderPath = SYNDATASETS_DIR
    print '\nimportFolderPath:', importFolderPath
    csvFilenameList = [('*[1][0-9][0-9][0-9]_syn.csv.gz', 'syn_all.1000.csv', (maxFilenum * avgFileSize), 1200), ('*[1-2][0-9][0-9][0-9]_syn.csv.gz', 'syn_all.2000.csv', (maxFilenum * avgFileSize), 1200)]
    trialMax = 1
    base_port = 54321
    tryHeap = 4
    DO_GLM = True
    noPoll = False
    benchmarkLogging = ['cpu', 'disk', 'iostats']
    benchmarkLogging = ['cpu', 'disk']
    pollTimeoutSecs = 120
    retryDelaySecs = 10
    for (i, (csvFilepattern, csvFilename, totalBytes, timeoutSecs)) in enumerate(csvFilenameList):
        localhost = h2o.decide_if_localhost()
        if localhost:
            h2o.build_cloud(3, java_heap_GB=tryHeap, base_port=base_port, enable_benchmark_log=True)
        else:
            h2o_hosts.build_cloud_with_hosts(1, java_heap_GB=tryHeap, base_port=base_port, enable_benchmark_log=True)
        print ('This test creates files in syn_datasets for import folder\n' + 'so h2o and python need to be same machine')
        h2o.nodes[0].redirect_import_folder_to_s3_path = False
        h2o.nodes[0].redirect_import_folder_to_s3n_path = False
        for trial in range(trialMax):
            importFolderResult = h2i.setupImportFolder(None, importFolderPath)
            importFullList = importFolderResult['files']
            print 'importFullList:', importFullList
            importFailList = importFolderResult['fails']
            print 'importFailList:', importFailList
            print '\n Problem if this is not empty: importFailList:', h2o.dump_json(importFailList)
            h2o.cloudPerfH2O.change_logfile(csvFilename)
            h2o.cloudPerfH2O.message('')
            h2o.cloudPerfH2O.message((('Parse ' + csvFilename) + ' Start--------------------------------'))
            start = time.time()
            parseKey = h2i.parseImportFolderFile(None, csvFilepattern, importFolderPath, key2=(csvFilename + '.hex'), timeoutSecs=timeoutSecs, retryDelaySecs=retryDelaySecs, pollTimeoutSecs=pollTimeoutSecs, noPoll=noPoll, benchmarkLogging=benchmarkLogging)
            elapsed = (time.time() - start)
            print 'Parse #', trial, 'completed in', ('%6.2f' % elapsed), 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
            if noPoll:
                time.sleep(2)
                h2o_jobs.pollWaitJobs(pattern=csvFilename, timeoutSecs=timeoutSecs, benchmarkLogging=benchmarkLogging)
                totalBytes += (totalBytes2 + totalBytes3)
                elapsed = (time.time() - start)
                h2o.check_sandbox_for_errors()
            if (totalBytes is not None):
                fileMBS = ((totalBytes / 1000000.0) / elapsed)
                l = '{!s} jvms, {!s}GB heap, {:s} {:s} {:6.2f} MB/sec for {:.2f} secs'.format(len(h2o.nodes), tryHeap, csvFilepattern, csvFilename, fileMBS, elapsed)
                print l
                h2o.cloudPerfH2O.message(l)
            print csvFilepattern, 'parse time:', parseKey['response']['time']
            print "Parse result['destination_key']:", parseKey['destination_key']
            if (not noPoll):
                h2o_cmd.get_columnInfoFromInspect(parseKey['destination_key'], exceptionOnMissingValues=True)
            print ('\n' + csvFilepattern)
            if DO_GLM:
                GLMkwargs = {'y': 0, 'case': 1, 'case_mode': '>', 'max_iter': 10, 'n_folds': 1, 'alpha': 0.2, 'lambda': 1e-05, }
                start = time.time()
                glm = h2o_cmd.runGLMOnly(parseKey=parseKey, timeoutSecs=timeoutSecs, **GLMkwargs)
                h2o_glm.simpleCheckGLM(self, glm, None, **GLMkwargs)
                elapsed = (time.time() - start)
                h2o.check_sandbox_for_errors()
                l = '{:d} jvms, {:d}GB heap, {:s} {:s} GLM: {:6.2f} secs'.format(len(h2o.nodes), tryHeap, csvFilepattern, csvFilename, elapsed)
                print l
                h2o.cloudPerfH2O.message(l)
            h2o_cmd.checkKeyDistribution()
            h2o_cmd.deleteCsvKey(csvFilename, importFolderResult)
            h2o.tear_down_cloud()
            if (not localhost):
                print 'Waiting 30 secs before building cloud again (sticky ports?)'
                time.sleep(30)
            sys.stdout.write('.')
            sys.stdout.flush()
