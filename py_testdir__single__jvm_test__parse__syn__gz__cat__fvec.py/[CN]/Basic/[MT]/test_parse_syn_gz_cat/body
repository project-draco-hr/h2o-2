def test_parse_syn_gz_cat(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(100, 100, 'cF', 600), (100, 5000, 'cF', 600), (100, 10000, 'cF', 600), (100, 20000, 'cF', 600), (100, 40000, 'cF', 600)]
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + str(SEEDPERFILE)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print 'Creating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        csvFilenamegz = (csvFilename + '.gz')
        csvPathnamegz = ((SYNDATASETS_DIR + '/') + csvFilenamegz)
        h2o_util.file_gzip(csvPathname, csvPathnamegz)
        start = time.time()
        print 'Parse start:', csvPathnamegz
        parseResult = h2i.import_parse(path=csvPathnamegz, schema='put', hex_key=hex_key, timeoutSecs=timeoutSecs, doSummary=DOSUMMARY)
        if DOSUMMARY:
            algo = 'Parse and Summary:'
        else:
            algo = 'Parse:'
        print algo, parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
        print 'Inspecting..'
        start = time.time()
        inspect = h2o_cmd.runInspect(key=parseResult['destination_key'], timeoutSecs=timeoutSecs)
        print 'Inspect:', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
        numRows = inspect['numRows']
        numCols = inspect['numCols']
        missingValuesList = h2o_cmd.infoFromInspect(inspect, csvPathnamegz)
        print ('\n' + csvPathnamegz), '\n    numRows:', '{:,}'.format(numRows), '\n    numCols:', '{:,}'.format(numCols)
        self.assertEqual(len(missingValuesList), 0, ("Don't expect any missing values. These cols had some: %s" % missingValuesList))
        self.assertEqual(inspect['numCols'], colCount, ('parse created result with the wrong number of cols %s %s' % (inspect['numCols'], colCount)))
        self.assertEqual(inspect['numRows'], rowCount, ("parse created result with the wrong number of rows (header shouldn't count) %s %s" % (inspect['numRows'], rowCount)))
