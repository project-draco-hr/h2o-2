{
  Timer t_drf=new Timer();
  final String names[]=fr._names;
  Vec vs[]=fr._vecs;
  final int ncols=vs.length - 1;
  Vec vresponse=vs[ncols];
  final long nrows=vresponse.length();
  int ymin=(int)vresponse.min();
  int numClasses=vresponse._isInt ? ((int)vresponse.max() - ymin + 1) : 0;
  Vec vnids=Vec.makeZero(vs[0]);
  fr.add("NIDs",vnids);
  Random rand=new MersenneTwisterRNG(new int[]{1,2});
  DRFTree tree=new DRFTree(names,mtrys,rand);
  new Tree.UndecidedNode(tree,-1,Histogram.initialHist(fr,ncols));
  int leaf=0;
  int depth=0;
  for (; depth < maxDepth; depth++) {
    Tree.ScoreBuildHistogram sbh=new Tree.ScoreBuildHistogram(tree,leaf,ncols,numClasses,ymin).doAll(fr);
    final int tmax=tree._len;
    for (int i=leaf; i < tmax; i++)     tree.undecided(i)._hs=sbh.getFinalHisto(i);
    for (; leaf < tmax; leaf++) {
      new DRFDecidedNode(tree.undecided(leaf));
    }
    if (tmax == tree._len)     break;
  }
  Log.info(Sys.DRF__,"DRF done in " + t_drf);
  Timer t_score=new Timer();
  new Tree.BulkScore(tree,numClasses,ymin).doAll(fr).report(Sys.DRF__,nrows,depth);
  Log.info(Sys.DRF__,"DRF score done in " + t_score);
  UKV.remove(fr.remove("NIDs")._key);
}
