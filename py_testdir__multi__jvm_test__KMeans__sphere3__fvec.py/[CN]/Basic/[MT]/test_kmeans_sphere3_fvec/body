def test_kmeans_sphere3_fvec(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    csvFilename = (('syn_spheres3_' + str(SEED)) + '.csv')
    csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
    write_syn_dataset(csvPathname, 1000000, SEED)
    print '\nStarting', csvFilename
    hex_key = (csvFilename + '.hex')
    parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key)
    for trial in range(10):
        kwargs = {'k': 3, 'max_iter': 25, 'initialization': 'Furthest', 'destination_key': 'spheres3.hex', 'seed': 0, }
        timeoutSecs = 90
        start = time.time()
        kmeans = h2o_cmd.runKMeans(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
        elapsed = (time.time() - start)
        print 'kmeans end on ', csvPathname, 'took', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
        (centers, tupleResultList) = h2o_kmeans.bigCheckResults(self, kmeans, csvPathname, parseResult, 'd', **kwargs)
        expected = [([100, 100, 100], 1000000, 60028168), ([200, 200, 200], 2000000, 479913618), ([300, 300, 300], 3000000, 1619244994)]
        allowedDelta = (0.01, 0.01, 0.01)
        h2o_kmeans.compareResultsToExpected(self, tupleResultList, expected, allowedDelta, trial=trial)
