{
  ArrayList<String> lines=new ArrayList();
  int offset=0;
  while (offset < bits.length && lines.size() < 10) {
    int lineStart=offset;
    while ((offset < bits.length) && (bits[offset] != CHAR_CR) && (bits[offset] != CHAR_LF))     ++offset;
    int lineEnd=offset;
    ++offset;
    if ((offset < bits.length) && (bits[offset] == CHAR_LF))     ++offset;
    if (bits[lineStart] == '#')     continue;
    if (bits[lineStart] == '@')     continue;
    if (lineEnd > lineStart)     lines.add(new String(bits,lineStart,lineEnd - lineStart));
  }
  final String[][] data=new String[lines.size()][];
  if (lines.size() < 2) {
    byte sep=setup._separator;
    if (sep == AUTO_SEP) {
      if (lines.get(0).split(",").length > 2)       sep=(byte)',';
 else       if (lines.get(0).split(" ").length > 2)       sep=' ';
 else       return null;
    }
    if (lines.size() == 1)     data[0]=determineTokens(lines.get(0),sep);
    boolean hasHeader=(checkHeader && allStrings(data[0])) || setup._header;
    return new ParserSetup(ParserType.CSV,sep,hasHeader,data);
  }
  byte sep=setup._separator;
  if (setup._separator == AUTO_SEP)   sep=guessSeparator(lines.get(0),lines.get(1));
  for (int i=0; i < lines.size(); ++i)   data[i]=determineTokens(lines.get(i),sep);
  boolean hasHeader=(checkHeader && hasHeader(data[0],data[1])) || setup._header;
  return new ParserSetup(ParserType.CSV,sep,hasHeader,data);
}
