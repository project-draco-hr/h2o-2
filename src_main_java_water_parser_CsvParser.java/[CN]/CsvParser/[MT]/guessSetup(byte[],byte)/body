{
  ArrayList<String> lines=new ArrayList();
  int offset=0;
  int numlines=0;
  while (offset < bits.length) {
    int lineStart=offset;
    while ((offset < bits.length) && (bits[offset] != CHAR_CR) && (bits[offset] != CHAR_LF))     ++offset;
    int lineEnd=offset;
    ++offset;
    if ((offset < bits.length) && (bits[offset] == CHAR_LF))     ++offset;
    if (bits[lineStart] == '#')     continue;
    if (bits[lineStart] == '@')     continue;
    if (lineEnd > lineStart) {
      numlines++;
      if (lines.size() < 5)       lines.add(new String(bits,lineStart,lineEnd - lineStart));
    }
  }
  if (lines.size() < 2)   return CustomParser.ParserSetup.makeCSVSetup(separator == NO_SEPARATOR ? (byte)' ' : separator,false,null,0);
  if (separator != NO_SEPARATOR) {
    try {
      String[] t1=determineTokens(lines.get(0),separator);
      String[] t2=determineTokens(lines.get(1),separator);
      if (t1.length == t2.length)       return guessColumnNames(t1,t2,separator,lines,numlines,bits);
    }
 catch (    Exception e) {
    }
  }
 else {
    int[] s1=determineSeparatorCounts(lines.get(0));
    int[] s2=determineSeparatorCounts(lines.get(1));
    for (int i=0; i < s1.length; ++i)     if (((s1[i] == s2[i]) && (s1[i] != 0)) || (i == separators.length - 1)) {
      try {
        String[] t1=determineTokens(lines.get(0),separators[i]);
        String[] t2=determineTokens(lines.get(1),separators[i]);
        if (t1.length != t2.length)         continue;
        return guessColumnNames(t1,t2,separators[i],lines,numlines,bits);
      }
 catch (      Exception e) {
      }
    }
  }
  return CustomParser.ParserSetup.makeCSVSetup((byte)' ',false,null,0);
}
