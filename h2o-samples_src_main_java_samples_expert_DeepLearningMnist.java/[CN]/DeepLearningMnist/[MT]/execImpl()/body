{
  Log.info("Parsing data.");
  long seed=new Random().nextLong();
  double fraction=1.0;
  Frame trainf=sampleFrame(TestUtil.parseFromH2OFolder("smalldata/mnist/train.csv.gz"),(long)(60000 * fraction),seed);
  Frame testf=sampleFrame(TestUtil.parseFromH2OFolder("smalldata/mnist/test.csv.gz"),(long)(10000 * fraction),seed + 1);
  Log.info("Done.");
  DeepLearning p=new DeepLearning();
  p.seed=seed;
  p.hidden=new int[]{1024,1024,2048};
  p.rate=0.01;
  p.rate_annealing=1e-6;
  p.activation=DeepLearning.Activation.RectifierWithDropout;
  p.loss=DeepLearning.Loss.CrossEntropy;
  p.input_dropout_ratio=0.2;
  p.max_w2=15;
  p.epochs=10000;
  p.l1=1e-5;
  p.l2=0;
  p.adaptive_rate=false;
  p.momentum_start=0.5;
  p.momentum_ramp=1800000;
  p.momentum_stable=0.99;
  p.initial_weight_distribution=DeepLearning.InitialWeightDistribution.UniformAdaptive;
  p.classification=true;
  p.diagnostics=true;
  p.expert_mode=true;
  p.score_training_samples=1000;
  p.score_validation_samples=10000;
  p.validation=testf;
  p.source=trainf;
  p.response=trainf.lastVec();
  p.ignored_cols=null;
  p.classification_stop=-1;
  p.train_samples_per_iteration=-1;
  p.score_interval=30;
  p.variable_importances=false;
  p.fast_mode=true;
  p.ignore_const_cols=true;
  p.shuffle_training_data=false;
  p.force_load_balance=true;
  p.replicate_training_data=true;
  p.quiet_mode=false;
  p.execImpl();
}
