def test_GLM2_many_enums(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    n = 200
    tryList = [(n, 1, 'cD', 300), (n, 2, 'cE', 300), (n, 3, 'cF', 300), (n, 4, 'cG', 300), (n, 5, 'cH', 300), (n, 6, 'cI', 300)]
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        colSepCase = random.randint(0, 1)
        colSepCase = 1
        if (colSepCase == 0):
            colSepHexString = '01'
            quoteChars = ',\'"'
        else:
            colSepHexString = '2c'
            quoteChars = ''
        colSepChar = colSepHexString.decode('hex')
        colSepInt = int(colSepHexString, base=16)
        print 'colSepChar:', colSepChar
        print 'colSepInt', colSepInt
        rowSepCase = random.randint(0, 1)
        if (rowSepCase == 0):
            rowSepHexString = '0a'
        else:
            rowSepHexString = '0d0a'
        rowSepChar = rowSepHexString.decode('hex')
        print 'rowSepChar:', rowSepChar
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((('syn_enums_' + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print 'Creating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE, colSepChar=colSepChar, rowSepChar=rowSepChar, quoteChars=quoteChars)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=30, separator=colSepInt)
        print "Parse result['destination_key']:", parseResult['destination_key']
        print ('\n' + csvFilename)
        (missingValuesDict, constantValuesDict, enumSizeDict, colTypeDict, colNameDict) = h2o_cmd.columnInfoFromInspect(parseResult['destination_key'], exceptionOnMissingValues=True)
        y = colCount
        kwargs = {'response': y, 'max_iter': 1, 'n_folds': 1, 'alpha': 0.2, 'lambda': 1e-05, }
        start = time.time()
        print 'glm end on ', csvPathname, 'took', (time.time() - start), 'seconds'
