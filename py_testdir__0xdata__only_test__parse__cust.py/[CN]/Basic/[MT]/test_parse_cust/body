def test_parse_cust(self):
    importFolderPath = '/mnt/0xcustomer-datasets'
    pollTimeoutSecs = 120
    retryDelaySecs = 30
    timeoutSecs = 300
    (importResult, importPattern) = h2i.import_only(path=(importFolderPath + '/*'))
    importFileList = importResult['files']
    importFailList = importResult['fails']
    importKeyList = importResult['keys']
    importDelList = importResult['dels']
    if (len(importDelList) != 0):
        raise Exception(("import shouldn't have any deletes. importDelList: %s" % h2o.dump_json(importDelList)))
    if (len(importFileList) < MINFILES):
        raise Exception(("Didn't import successfully. importFileList: %s" % h2o.dump_json(importFileList)))
    if (len(importKeyList) < MINFILES):
        raise Exception(("Didn't import successfully. importKeyList: %s" % h2o.dump_json(importKeyList)))
    if (len(importFailList) != 0):
        raise Exception(("Didn't import successfully. importFailList: %s" % h2o.dump_json(importFailList)))
    goodKeyList = [key for key in importKeyList if (('.csv' in key) or ('.tsv' in key))]
    trial = 0
    for (i, importKey) in enumerate(random.sample(goodKeyList, 3)):
        print 'importKey:', importKey
        trial += 1
        start = time.time()
        parseResult = h2i.parse_only(pattern=importKey, header=0, timeoutSecs=timeoutSecs, retryDelaySecs=retryDelaySecs, pollTimeoutSecs=pollTimeoutSecs)
        elapsed = (time.time() - start)
        print 'Parse #', trial, 'completed in', ('%6.2f' % elapsed), 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print "Parse result['destination_key']:", parseResult['destination_key']
        origKey = parseResult['destination_key']
        inspect = h2o_cmd.runInspect(key=origKey)
        h2o_cmd.infoFromInspect(inspect, origKey)
        execExpr = (('newKey = ' + origKey) + '[1,1]')
        h2e.exec_expr(h2o.nodes[0], execExpr, 'a', timeoutSecs=30)
        newParseKey = {'destination_key': 'newKey', }
        h2o_cmd.checkKeyDistribution()
        h2o.nodes[0].remove_key(key=origKey)
    self.assertGreater(trial, (MINDONE - 1), msg=('There should be more than %s parsed files' % MINDONE))
