def test_rf_big_rand_tree_fvec(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    csvFilename = 'syn.csv'
    csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
    rowCount = 5000
    colCount = 1000
    write_syn_dataset(csvPathname, rowCount, colCount)
    for trial in range(1):
        src_key = ((csvFilename + '_') + str(trial))
        hex_key = (((csvFilename + '_') + str(trial)) + '.hex')
        seed = random.randint(0, sys.maxint)
        kwargs = {'ntrees': 3, 'max_depth': 20, 'seed': seed, }
        start = time.time()
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=90)
        h2o_cmd.runRF(parseResult=parseResult, timeoutSecs=600, pollTimeoutSecs=180, **kwargs)
        print 'trial #', trial, 'rowCount:', rowCount, 'colCount:', colCount, 'RF end on ', csvFilename, 'took', (time.time() - start), 'seconds'
        inspect = h2o_cmd.runInspect(key=hex_key)
        h2o_cmd.infoFromInspect(inspect, csvPathname)
        cols = inspect['cols']
        numCols = inspect['numCols']
        for (i, c) in enumerate(cols):
            colType = c['type']
            self.assertEqual(colType, 'Int', msg=('col %d should be type in: %s' % (i, colType)))
        h2o.check_sandbox_for_errors()
