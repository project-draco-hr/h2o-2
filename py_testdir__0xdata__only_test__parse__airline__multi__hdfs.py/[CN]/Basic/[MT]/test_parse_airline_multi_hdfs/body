def test_parse_airline_multi_hdfs(self):
    h2o.beta_features = True
    csvFilename = 'hex_10'
    csvFilePattern = '*'
    trialMax = 2
    for tryHeap in [24]:
        print '\n', tryHeap, 'GB heap, 1 jvm per host, import mr-0x6 hdfs, then parse'
        localhost = h2o.decide_if_localhost()
        if localhost:
            h2o.build_cloud(java_heap_GB=tryHeap, random_udp_drop=RANDOM_UDP_DROP, base_port=55930, disable_assertions=DISABLE_ASSERTIONS, use_hdfs=True, hdfs_name_node=NAME_NODE, hdfs_version=VERSION)
        else:
            h2o_hosts.build_cloud_with_hosts(java_heap_GB=tryHeap, random_udp_drop=RANDOM_UDP_DROP, base_port=55604, disable_assertions=DISABLE_ASSERTIONS, use_hdfs=True, hdfs_name_node=NAME_NODE, hdfs_version=VERSION)
        timeoutSecs = 3600
        importFolderPath = 'datasets/airlines_multi'
        for trial in range(trialMax):
            hex_key = (((csvFilename + '_') + str(trial)) + '.hex')
            csvPathname = ((importFolderPath + '/') + csvFilePattern)
            start = time.time()
            importResult = h2i.import_only(path=csvPathname, schema='hdfs', timeoutSecs=timeoutSecs, retryDelaySecs=10, pollTimeoutSecs=60)
            print 'importResult:', h2o.dump_json(importResult)
            parseResult = h2i.parse_only(pattern='*csv', hex_key=hex_key, timeoutSecs=timeoutSecs, retryDelaySecs=10, pollTimeoutSecs=60)
            elapsed = (time.time() - start)
            print 'parse result:', parseResult['destination_key']
            print 'Parse #', trial, 'completed in', ('%6.2f' % elapsed), 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
            h2o_cmd.runStoreView()
        h2o.tear_down_cloud()
        time.sleep(5)
