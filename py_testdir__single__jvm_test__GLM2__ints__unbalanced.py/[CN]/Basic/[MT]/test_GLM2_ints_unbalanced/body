def test_GLM2_ints_unbalanced(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    n = 2000
    tryList = [(n, 1, 'cD', 300), (n, 2, 'cE', 300), (n, 4, 'cF', 300), (n, 8, 'cG', 300), (n, 16, 'cH', 300), (n, 32, 'cI', 300)]
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        colSepHexString = '2c'
        colSepChar = colSepHexString.decode('hex')
        colSepInt = int(colSepHexString, base=16)
        print 'colSepChar:', colSepChar
        rowSepHexString = '0a'
        rowSepChar = rowSepHexString.decode('hex')
        print 'rowSepChar:', rowSepChar
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((('syn_enums_' + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        csvScoreFilename = (((('syn_enums_score_' + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvScorePathname = ((SYNDATASETS_DIR + '/') + csvScoreFilename)
        enumList = create_enum_list()
        enumListForScore = random.sample(enumList, 5)
        print 'Creating random', csvPathname, 'for glm model building'
        write_syn_dataset(csvPathname, enumList, rowCount, colCount, SEEDPERFILE, colSepChar=colSepChar, rowSepChar=rowSepChar)
        print 'Creating random', csvScorePathname, 'for glm scoring with prior model (using enum subset)'
        write_syn_dataset(csvScorePathname, enumListForScore, rowCount, colCount, SEEDPERFILE, colSepChar=colSepChar, rowSepChar=rowSepChar)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=30, separator=colSepInt)
        print "Parse result['destination_key']:", parseResult['destination_key']
        print ('\n' + csvFilename)
        (missingValuesDict, constantValuesDict, enumSizeDict, colTypeDict, colNameDict) = h2o_cmd.columnInfoFromInspect(parseResult['destination_key'], exceptionOnMissingValues=True)
        y = colCount
        modelKey = 'xyz'
        kwargs = {'n_folds': 0, 'destination_key': modelKey, 'response': y, 'max_iter': 200, 'family': 'binomial', 'alpha': 0, 'lambda': 0, }
        start = time.time()
        updateList = [{'alpha': 0.5, 'lambda': 1e-05, }]
        for updateDict in updateList:
            print '\n#################################################################'
            print updateDict
            kwargs.update(updateDict)
            glm = h2o_cmd.runGLM(parseResult=parseResult, timeoutSecs=timeoutSecs, pollTimeoutSecs=180, **kwargs)
            print 'glm end on ', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
            h2o_glm.simpleCheckGLM(self, glm, None, **kwargs)
            parseResult = h2i.import_parse(path=csvScorePathname, schema='put', hex_key='B.hex', timeoutSecs=30, separator=colSepInt)
            h2o_cmd.runScore(dataKey='B.hex', modelKey=modelKey, vactual=('C' + str((y + 1))), vpredict=1, expectedAuc=0.45)
