def test_GLM_covtype20x(self):
    if localhost:
        csvFilenameList = [('covtype20x.data', 480)]
    else:
        csvFilenameList = [('covtype20x.data', 480)]
    importFolderPath = 'standard'
    for (csvFilename, timeoutSecs) in csvFilenameList:
        csvPathname = ((importFolderPath + '/') + csvFilename)
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, timeoutSecs=2000)
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
        if (1 == 0):
            print 'WARNING: just doing the first 33 features, for comparison to allstate numbers'
            x = ','.join(map(str, range(33)))
        else:
            x = ''
        print 'WARNING: max_iter set to 8 for benchmark comparisons'
        max_iter = 8
        y = '54'
        kwargs = {'x': x, 'y': y, 'family': 'poisson', 'link': 'log', 'n_folds': 0, 'max_iter': max_iter, 'beta_epsilon': 0.001, }
        kwargs.update({'alpha': 0, 'lambda': 0, })
        start = time.time()
        glm = h2o_cmd.runGLM(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
        print 'glm (L2) end on ', csvPathname, 'took', (time.time() - start), 'seconds'
        h2o_glm.simpleCheckGLM(self, glm, 13, **kwargs)
        kwargs.update({'alpha': 0.5, 'lambda': 0.0001, })
        start = time.time()
        glm = h2o_cmd.runGLM(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
        print 'glm (Elastic) end on ', csvPathname, 'took', (time.time() - start), 'seconds'
        h2o_glm.simpleCheckGLM(self, glm, 13, **kwargs)
        kwargs.update({'alpha': 1.0, 'lambda': 0.0001, })
        start = time.time()
        glm = h2o_cmd.runGLM(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
        print 'glm (L1) end on ', csvPathname, 'took', (time.time() - start), 'seconds'
        h2o_glm.simpleCheckGLM(self, glm, 13, **kwargs)
