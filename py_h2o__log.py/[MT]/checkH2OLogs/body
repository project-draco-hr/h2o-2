def checkH2OLogs(timeoutSecs=3, expectedMinLines=12, suffix='-1-trace'):
    h2o.nodes[0].log_download(timeoutSecs=timeoutSecs)

    def checkit(suffix, expectedMinLines):
        logNameList = [((((('h2o_' + str(n.http_addr)) + '_') + str(n.port)) + suffix) + '.log') for n in h2o.nodes]
        lineCountList = []
        for logName in logNameList:
            lineCount = h2o_util.file_line_count(((h2o.LOG_DIR + '/') + logName))
            print logName, 'lineCount:', lineCount
            lineCountList.append(lineCount)
        print logNameList
        if (len(h2o.nodes) != len(logNameList)):
            raise Exception(('Should be %d logs, are %d' % len(h2o.nodes)), len(logNameList))
        for (i, l) in enumerate(lineCountList):
            if (l < expectedMinLines):
                raise Exception(('node %d %s log is too small' % (i, logNameList[i])))
        return (logNameList, lineCountList)
    (logNameList, lineCountList) = checkit('-1-trace', expectedMinLines)
    checkit('-2-debug', expectedMinLines)
    checkit('-3-info', expectedMinLines)
    checkit('-4-warn', 0)
    checkit('-5-error', 0)
    checkit('-6-fatal', 0)
    h2o.check_sandbox_for_errors()
    return (logNameList, lineCountList)
