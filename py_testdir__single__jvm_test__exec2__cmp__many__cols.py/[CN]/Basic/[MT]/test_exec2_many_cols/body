def test_exec2_many_cols(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(10, 10, 'cA', 200, 200), (10, 1000, 'cB', 200, 200), (10, 1000, 'cB', 200, 200)]
    for (rowCount, colCount, hex_key, timeoutSecs, timeoutSecs2) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + str(SEEDPERFILE)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print '\nCreating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        REPEAT = 5
        for i in range(REPEAT):
            hex_key_i = ((hex_key + '_') + str(i))
            start = time.time()
            parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key_i, timeoutSecs=timeoutSecs, doSummary=False)
            print 'Parse:', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
            start = time.time()
            inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], timeoutSecs=timeoutSecs2)
            print 'Inspect:', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
            h2o_cmd.infoFromInspect(inspect, csvPathname)
            print ('\n' + csvPathname), '    numRows:', '{:,}'.format(inspect['numRows']), '    numCols:', '{:,}'.format(inspect['numCols'])
            self.assertEqual(inspect['numCols'], colCount, ('parse created result with the wrong number of cols %s %s' % (inspect['numCols'], colCount)))
            self.assertEqual(inspect['numRows'], rowCount, ("parse created result with the wrong number of rows (header shouldn't count) %s %s" % (inspect['numRows'], rowCount)))
        for i in range(1, REPEAT):
            hex_key_i = ((hex_key + '_') + str(i))
            hex_key_0 = (hex_key + '_0')
            print ('\nComparing %s to %s' % (hex_key_i, hex_key_0))
            if (1 == 0):
                execExpr = ('%s[1,]+%s[1,]' % (hex_key_0, hex_key_i))
                (resultExec, result) = h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
                execExpr = ('%s[,1]+%s[,1]' % (hex_key_0, hex_key_i))
                (resultExec, result) = h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
            execExpr = ('%s+%s' % (hex_key_0, hex_key_i))
            (resultExec, result) = h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
            execExpr = ('%s!=%s' % (hex_key_0, hex_key_i))
            (resultExec, result) = h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
            execExpr = ('%s==%s' % (hex_key_0, hex_key_i))
            (resultExec, result) = h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
            execExpr = ('sum(%s==%s)' % (hex_key_0, hex_key_i))
            (resultExec, result) = h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
            execExpr = ('s=sum(%s==%s)' % (hex_key_0, hex_key_i))
            (resultExec, result) = h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
            execExpr = ('s=c(1); s=c(sum(%s==%s))' % (hex_key_0, hex_key_i))
            (resultExec, result) = h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
            execExpr = ('n=c(1); n=c(nrow(%s)*ncol(%s))' % (hex_key_0, hex_key_i))
            (resultExec, result) = h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
            execExpr = 'r=c(1); r=s==n'
            (resultExec, result, h2e.exec_expr(execExpr=execExpr, timeoutSecs=30))
            print 'result:', result
