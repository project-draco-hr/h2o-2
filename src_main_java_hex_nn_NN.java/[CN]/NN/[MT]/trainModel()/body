{
  final NNModel model=UKV.get(dest());
  final Frame[] adapted=validation == null ? null : model.adapt(validation,false);
  Frame train=_dinfo._adaptedFrame;
  Frame valid=validation == null ? null : adapted[0];
  Frame trainScoreFrame=sampleFrame(train,score_training_samples,seed);
  Frame validScoreFrame=sampleFrame(valid,score_validation_samples,seed + 1);
  if (sync_samples > train.numRows()) {
    sync_samples=train.numRows();
    Log.warn("Setting sync_samples to the number of rows of the training data (" + sync_samples + ").");
  }
  long timeStart=System.currentTimeMillis();
  do {
    final NNTask nntask=new NNTask(_dinfo,model.model_info(),true).doAll(train);
    if (H2O.CLOUD.size() > 1)     Log.info("Synchronizing between nodes.");
    model.set_model_info(nntask.model_info());
  }
 while (model.doDiagnostics(trainScoreFrame,validScoreFrame,timeStart,self()));
  if (adapted != null)   adapted[1].delete();
  model.unlock(self());
  if (validScoreFrame != null && validScoreFrame != adapted[0])   validScoreFrame.delete();
  if (trainScoreFrame != null && trainScoreFrame != train)   trainScoreFrame.delete();
  Log.info("NN training finished.");
  return model;
}
