{
  final NNModel model=UKV.get(dest());
  final Frame[] adapted=validation == null ? null : model.adapt(validation,false);
  final FrameSplit split=new FrameSplit();
  Frame trainScoreFrame=_dinfo._adaptedFrame;
  double fraction=score_training > 0 ? (double)score_training / trainScoreFrame.numRows() : 1.0;
  fraction=Math.max(Math.min(fraction,1),0);
  if (fraction < 1 && fraction > 0) {
    trainScoreFrame=split.splitFrame(trainScoreFrame,new double[]{fraction,1 - fraction},seed)[0];
    if (trainScoreFrame.numRows() == 0)     trainScoreFrame=_dinfo._adaptedFrame;
  }
  Log.info("Scoring on " + trainScoreFrame.numRows() + " rows of training data.");
  Frame validScoreFrame=validation == null ? null : adapted[0];
  if (validScoreFrame != null) {
    fraction=score_validation > 0 ? (double)score_validation / validScoreFrame.numRows() : 1.0;
    fraction=Math.max(Math.min(fraction,1),0);
    if (fraction < 1 && fraction > 0) {
      validScoreFrame=split.splitFrame(validScoreFrame,new double[]{fraction,1 - fraction},seed)[0];
    }
    if (validScoreFrame.numRows() == 0)     validScoreFrame=adapted[0];
    Log.info("Scoring on " + validScoreFrame.numRows() + " rows of validation data.");
  }
  for (int epoch=1; epoch <= epochs; ++epoch) {
    final NNTask nntask=new NNTask(this,_dinfo,model.model_info(),true).doAll(_dinfo._adaptedFrame);
    model.set_model_info(nntask.model_info());
    if (diagnostics)     model.computeDiagnostics();
    model.epoch_counter=epoch;
    if (scorewhiletraining) {
      final String label="Classification error after training for " + epoch + " epochs ("+ model.model_info().get_processed()+ " samples)";
      doScoring(model,trainScoreFrame,validScoreFrame,label,epoch == epochs,score_interval);
    }
    model.update(self());
    if (model.model_info().unstable()) {
      Log.info("Model is unstable (Exponential growth). Aborting." + " Try using L1/L2/max_w2 regularization or a different activation function.");
      break;
    }
  }
  if (adapted != null)   adapted[1].delete();
  model.unlock(self());
  if (validScoreFrame != null)   validScoreFrame.delete();
  Log.info("NN training finished.");
}
