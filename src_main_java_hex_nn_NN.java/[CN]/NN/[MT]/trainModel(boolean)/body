{
  final NNModel model=UKV.get(dest());
  final Frame[] adapted=validation == null ? null : model.adapt(validation,false);
  for (int epoch=1; epoch <= epochs; ++epoch) {
    final NNTask nntask=new NNTask(this,_dinfo,model.model_info(),true).doAll(_dinfo._adaptedFrame);
    model.set_model_info(nntask.model_info());
    if (diagnostics)     model.computeDiagnostics();
    model.epoch_counter=epoch;
    if (scorewhiletraining) {
      final String label=(validation == null ? "Training" : "Validation") + " error after training for " + epoch+ " epochs ("+ model.model_info().processed()+ " samples):";
      doScoring(model,validation == null ? _dinfo._adaptedFrame : adapted[0],label,epoch == epochs);
    }
    model.update(self());
  }
  if (adapted != null)   adapted[1].delete();
  model.unlock(self());
  System.out.println("Job finished.\n\n");
}
