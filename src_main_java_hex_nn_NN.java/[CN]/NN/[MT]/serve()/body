{
  init();
  Frame fr=new Frame(source._names.clone(),source.vecs().clone());
  fr.remove(ignored_cols);
  final Vec[] vecs=fr.vecs();
  ArrayList<Integer> constantOrNAs=new ArrayList<Integer>();
  for (int i=0; i < vecs.length - 1; ++i) {
    if (vecs[i] == response) {
      if (classification) {
        _gen_enum=true;
        fr.add(fr._names[i],fr.remove(i).toEnum());
      }
 else       fr.add(fr._names[i],fr.remove(i));
      break;
    }
  }
  if (classification && !response.isEnum() && vecs[vecs.length - 1] == response) {
    _gen_enum=true;
    vecs[vecs.length - 1]=vecs[vecs.length - 1].toEnum();
  }
  for (int i=0; i < vecs.length - 1; ++i)   if (vecs[i].min() == vecs[i].max() || vecs[i].naCnt() > vecs[i].length() * 0.2)   constantOrNAs.add(i);
  if (!constantOrNAs.isEmpty()) {
    int[] cols=new int[constantOrNAs.size()];
    for (int i=0; i < cols.length; ++i)     cols[i]=constantOrNAs.get(i);
    fr.remove(cols);
  }
  _dinfo=new DataInfo(fr,1,true);
  if (destination_key == null)   destination_key=Key.make("NNModel_" + Key.make());
  if (job_key == null)   job_key=Key.make("NNJob_" + Key.make());
  fork();
  return NNModelView.redirect(this,dest());
}
