{
  Key file=NFSFileVec.make(find_test_file("smalldata/mnist/test.csv.gz"));
  Frame fr=ParseDataset2.parse(Key.make("mnist"),new Key[]{file});
  NN p=new NN();
  p.hidden=new int[]{128,128,256};
  p.activation=NN.Activation.RectifierWithDropout;
  p.input_dropout_ratio=0.4;
  p.validation=null;
  p.source=fr;
  p.response=fr.lastVec();
  p.ignored_cols=null;
  p.ignore_const_cols=true;
  DataInfo dinfo=new FrameTask.DataInfo(FrameTask.DataInfo.prepareFrame(p.source,p.response,p.ignored_cols,true,p.ignore_const_cols),1,true);
  NNModel.NNModelInfo model_info=new NNModel.NNModelInfo(p,dinfo);
  Neurons[] neurons=NNTask.makeNeuronsForTraining(model_info);
  for (long row=0; row < 100; ++row) {
    double[] nums=new double[dinfo._nums];
    for (int i=0; i < dinfo._nums; ++i)     nums[i]=fr.vecs()[i].at(row);
    ((Neurons.Input)neurons[0]).setInput(row,nums,0,null);
    final double[] responses=new double[]{fr.vecs()[p.source.numCols() - 1].at(row)};
    final long seed=row;
    NNTask.step(seed,neurons,model_info,true,responses);
  }
  Neurons[] neurons2=NNTask.makeNeuronsForTesting(model_info);
  for (int i=1; i < neurons.length - 1; ++i) {
    Assert.assertEquals(neurons[i]._w,neurons2[i]._w);
    for (int j=0; j < neurons[i]._w.length; ++j)     Assert.assertEquals(neurons[i]._w[j],neurons2[i]._w[j]);
    Assert.assertEquals(neurons[i]._b,neurons2[i]._b);
    for (int j=0; j < neurons[i]._b.length; ++j)     Assert.assertEquals(neurons[i]._b[j],neurons2[i]._b[j]);
    Assert.assertNotSame(neurons[i]._a,neurons2[i]._a);
    for (int j=0; j < neurons[i]._a.length; ++j)     Assert.assertNotSame(neurons[i]._a[j],neurons2[i]._a[j]);
    if (!(neurons[i] instanceof Neurons.Output)) {
      Assert.assertNotSame(neurons[i]._e,neurons2[i]._e);
      for (int j=0; j < neurons[i]._e.length; ++j)       Assert.assertEquals(neurons[i]._e[j],neurons2[i]._e[j]);
    }
  }
  fr.delete();
  model_info.delete();
}
