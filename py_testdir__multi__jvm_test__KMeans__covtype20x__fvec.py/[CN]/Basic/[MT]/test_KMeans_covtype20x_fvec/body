def test_KMeans_covtype20x_fvec(self):
    if h2o.localhost:
        csvFilenameList = [('covtype20x.data', 1200, 'cA')]
    else:
        csvFilenameList = [('covtype20x.data', 1200, 'cA')]
    importFolderPath = 'standard'
    for (csvFilename, timeoutSecs, hex_key) in csvFilenameList:
        csvPathname = ((importFolderPath + '/') + csvFilename)
        start = time.time()
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, timeoutSecs=2000, hex_key=hex_key)
        print 'parse end on ', csvPathname, 'took', (time.time() - start), 'seconds'
        h2o.check_sandbox_for_errors()
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvPathname), '    numRows:', '{:,}'.format(inspect['numRows']), '    numCols:', '{:,}'.format(inspect['numCols'])
        k = 2
        kwargs = {'max_iter': 25, 'initialization': 'Furthest', 'k': k, 'seed': 265211114317615310, }
        start = time.time()
        kmeans = h2o_cmd.runKMeans(parseResult=parseResult, timeoutSecs=timeoutSecs, retryDelaySecs=2, pollTimeoutSecs=60, **kwargs)
        elapsed = (time.time() - start)
        print 'kmeans end on ', csvPathname, 'took', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
        h2o_kmeans.simpleCheckKMeans(self, kmeans, **kwargs)
        (centers, tupleResultList) = h2o_kmeans.bigCheckResults(self, kmeans, csvPathname, parseResult, 'd', **kwargs)
