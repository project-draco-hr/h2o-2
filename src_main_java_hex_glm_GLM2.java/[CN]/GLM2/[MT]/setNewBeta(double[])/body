{
  final double[] fullBeta=(_activeCols == null) ? newBeta : expandVec(newBeta,_activeCols);
  final double[] newBetaDeNorm;
  if (_dinfo._standardize) {
    newBetaDeNorm=fullBeta.clone();
    double norm=0.0;
    final int numoff=_dinfo.numStart();
    for (int i=numoff; i < fullBeta.length - 1; i++) {
      double b=newBetaDeNorm[i] * _dinfo._normMul[i - numoff];
      norm+=b * _dinfo._normSub[i - numoff];
      newBetaDeNorm[i]=b;
    }
    newBetaDeNorm[newBetaDeNorm.length - 1]-=norm;
  }
 else   newBetaDeNorm=null;
  _model.setLambdaSubmodel(_lambdaIdx,newBetaDeNorm == null ? fullBeta : newBetaDeNorm,newBetaDeNorm == null ? null : fullBeta,(_iter + 1),_dinfo.fullN() >= sparseCoefThreshold);
  return fullBeta;
}
