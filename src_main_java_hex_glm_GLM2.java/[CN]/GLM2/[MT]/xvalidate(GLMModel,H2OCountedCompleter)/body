{
  final Key[] keys=new Key[n_folds];
  H2OCallback callback=new H2OCallback(){
    @Override public void callback(    H2OCountedCompleter t){
      model.setValidation(new GLMXValidation(model,keys));
      DKV.put(model._selfKey,model);
      GLM2.this.remove();
    }
    @Override public boolean onExceptionalCompletion(    Throwable ex,    CountedCompleter caller){
      ex.printStackTrace();
      GLM2.this.cancel(ex);
      return true;
    }
  }
;
  callback.addToPendingCount(n_folds - 1);
  callback.setCompleter(cmp);
  _subjobs=new GLM2[n_folds];
  for (int i=0; i < n_folds; ++i)   _subjobs[i]=new GLM2(this.description + "_xval " + i,keys[i]=Key.make(),source,response,standardize,family,link,alpha,lambda,n_folds,i,false,model.norm_beta,0,case_mode,case_val);
  for (  GLM2 g : _subjobs)   g.run(callback);
}
