def test_parse_bounds_csv_fvec(self):
    h2o.beta_features = True
    print 'Random 0/1 for col1. Last has max col = 1, All have zeros for class.'
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(1000, 50, 'cC', 300), (1000, 999, 'cC', 300), (1000, 1000, 'cA', 300)]
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = ('syn_%s_%s_%s.csv' % (SEEDPERFILE, rowCount, colCount))
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print 'Creating random', csvPathname
        synSumList = write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        parseResult = h2i.import_parse(path=csvPathname, hex_key=hex_key, schema='put', timeoutSecs=timeoutSecs, doSummary=False)
        print "Parse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], timeoutSecs=timeoutSecs)
        numCols = inspect['numCols']
        numRows = inspect['numRows']
        print ('\n' + csvPathname), '    numRows:', '{:,}'.format(numRows), '    numCols:', '{:,}'.format(numCols)
        iCols = inspect['cols']
        iStats = []
        for stats in iCols:
            iName = stats['name']
            iNaCnt = stats['naCnt']
            iMin = float(stats['min'])
            iMax = float(stats['max'])
            iMean = float(stats['mean'])
            iStats.append({'name': iName, 'naCnt': iNaCnt, 'min': iMin, 'max': iMax, 'mean': iMean, })
        summaryResult = h2o_cmd.runSummary(key=hex_key, max_ncols=colCount, timeoutSecs=timeoutSecs)
        h2o_cmd.infoFromSummary(summaryResult, noPrint=True)
        self.assertEqual(rowCount, numRows, msg=('generated %s rows, parsed to %s rows' % (rowCount, numRows)))
        columnsList = summaryResult['summaries']
        self.assertEqual(colCount, len(columnsList), msg=('generated %s cols (including output).  summary has %s columns' % (colCount, len(columnsList))))
        c = 0
        for column in columnsList:
            iMin = iStats[c]['min']
            iMax = iStats[c]['max']
            iMean = iStats[c]['mean']
            iNaCnt = iStats[c]['naCnt']
            c += 1
            colname = column['colname']
            stats = column['stats']
            stype = column['type']
            hstep = column['hstep']
            hbrk = column['hstep']
            hstart = column['hstart']
            smax = stats['maxs']
            smin = stats['mins']
            sd = stats['sd']
            smean = stats['mean']
            zeros = stats['zeros']
            self.assertEqual(iMin, smin[0], ('inspect min %s != summary min %s' % (iMin, smin)))
            self.assertEqual(iMax, smax[0], ('inspect max %s != summary max %s' % (iMax, smax)))
            self.assertEqual(iMean, smean, ('inspect mean %s != summary mean %s' % (iMean, smean)))
            if (colname == 'V1'):
                synNa = 0
                synSum = synSumList[1]
                synZeros = (numRows - synSum)
                synSigma = 0.5
                synMean = ((synSum + 0.0) / numRows)
                synMin = [0.0, 1.0]
                synMax = [1.0, 0.0]
            elif (colname == 'V2'):
                synSum = 0
                synSigma = 0
                synMean = 0
                if DO_NAN:
                    synZeros = 0
                    synNa = numRows
                    synMin = []
                    synMax = []
                else:
                    synZeros = numRows
                    synNa = 0
                    synMin = [0.0]
                    synMax = [0.0]
            elif (colname == ('V' + str((colCount - 1)))):
                synNa = 0
                synSum = synSumList[(colCount - 1)]
                synZeros = (numRows - 1)
                synMean = (1.0 / numRows)
                synSigma = math.sqrt((pow((synMean - 1), 2) / numRows))
                print 'last col with single 1. synSigma:', synSigma
                synMin = [0.0, 1.0]
                synMax = [1.0, 0.0]
            else:
                synNa = 0
                synSum = 0
                synZeros = numRows
                synSigma = 0.0
                synMean = 0.0
                synMin = [0.0]
                synMax = [0.0]
            if DO_MEAN:
                self.assertAlmostEqual(float(smean), synMean, places=6, msg=('col %s mean %s is not equal to generated mean %s' % (colname, smean, synMean)))
            self.assertTrue((smin >= synMin), msg=('col %s min %s is not >= generated min %s' % (colname, smin, synMin)))
            self.assertTrue((smax <= synMax), msg=('col %s max %s is not <= generated max %s' % (colname, smax, synMax)))
            if ((colname == 'V65536') or (colname == 'V65537')):
                print 'columns around possible zeros mismatch:', h2o.dump_json(columns)
            self.assertEqual(zeros, synZeros, msg=('col %s zeros %s is not equal to generated zeros %s' % (colname, zeros, synZeros)))
