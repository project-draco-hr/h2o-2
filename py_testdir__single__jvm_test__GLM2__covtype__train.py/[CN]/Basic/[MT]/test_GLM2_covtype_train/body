def test_GLM2_covtype_train(self):
    h2o.beta_features = True
    importFolderPath = 'standard'
    csvFilename = 'covtype.shuffled.data'
    csvPathname = ((importFolderPath + '/') + csvFilename)
    hex_key = (csvFilename + '.hex')
    parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=180)
    execExpr = ('A.hex=%s' % parseResult['destination_key'])
    h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
    y = 54
    execExpr = ('A.hex[,%s]=(A.hex[,%s]==%s)' % ((y + 1), (y + 1), 4))
    h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
    inspect = h2o_cmd.runInspect(key='A.hex')
    print ('\n' + csvPathname), '    numRows:', '{:,}'.format(inspect['numRows']), '    numCols:', '{:,}'.format(inspect['numCols'])
    numRows = inspect['numRows']
    pct10 = int((numRows * 0.1))
    rowsForPct = [(i * pct10) for i in range(0, 11)]
    last10 = (numRows - rowsForPct[9])
    rowsForPct[10] = last10
    rowsForPct[0] = rowsForPct[10]
    print 'Creating the key of the last 10% data, for scoring'
    trainDataKey = 'rTrain'
    testDataKey = 'rTest'
    kwargs = {'response': ('C' + str(y)), 'max_iter': 20, 'n_folds': 0, 'alpha': 0.1, 'lambda': 1e-05, 'family': 'binomial', }
    timeoutSecs = 60
    for trial in range(10):
        rowsToUse = rowsForPct[(trial % 10)]
        h2o_cmd.createTestTrain(srcKey='A.hex', trainDstKey=trainDataKey, testDstKey=testDataKey, trainPercent=90)
        aHack = {'destination_key': trainDataKey, }
        parseKey = trainDataKey
        start = time.time()
        glm = h2o_cmd.runGLM(parseResult=aHack, timeoutSecs=timeoutSecs, pollTimeoutSecs=180, **kwargs)
        print 'glm end on ', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
        h2o_glm.simpleCheckGLM(self, glm, None, **kwargs)
        modelKey = glm['glm_model']['_key']
        predictKey = 'Predict.hex'
        start = time.time()
        predictResult = h2o_cmd.runPredict(data_key=testDataKey, model_key=modelKey, destination_key=predictKey, timeoutSecs=timeoutSecs)
        predictCMResult = h2o.nodes[0].predict_confusion_matrix(actual=testDataKey, vactual=('C' + str(y)), predict=predictKey, vpredict='predict')
        cm = predictCMResult['cm']
        pctWrong = h2o_gbm.pp_cm_summary(cm)
        self.assertLess(pctWrong, 8, 'Should see less than 7% error (class = 4)')
        print '\nTest\n==========\n'
        print h2o_gbm.pp_cm(cm)
        print 'Trial #', trial, 'completed', ('using %6.2f' % ((rowsToUse * 100.0) / numRows)), 'pct. of all rows'
