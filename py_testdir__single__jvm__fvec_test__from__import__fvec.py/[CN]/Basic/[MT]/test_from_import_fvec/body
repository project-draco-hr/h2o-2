def test_from_import_fvec(self):
    h2o.beta_features = True
    csvFilenameAll = [('covtype.data', 500)]
    for (csvFilename, timeoutSecs) in csvFilenameAll:
        hex_key = (csvFilename + '.hex')
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=('standard/' + csvFilename), schema='local', hex_key=hex_key, timeoutSecs=timeoutSecs, doSummary=False)
        print "Parse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(key=parseResult['destination_key'], verbose=True)
        h2o_cmd.infoFromInspect(inspect, parseResult['destination_key'])
        summaryResult = h2o_cmd.runSummary(key=parseResult['destination_key'])
        trees = 2
        start = time.time()
        rfView = h2o_cmd.runRF(trees=trees, max_depth=20, balance_classes=0, importance=1, parseResult=parseResult, timeoutSecs=timeoutSecs)
        elapsed = (time.time() - start)
        (classification_error, classErrorPctList, totalScores) = h2o_rf.simpleCheckRFView(rfv=rfView, ntree=trees)
        l = '{!s} jvms, {!s}GB heap, {:s} {:s} {:.2f} secs.                 trees: {:} classification_error: {:} classErrorPct: {:} totalScores: {:}'.format(len(h2o.nodes), h2o.nodes[0].java_heap_GB, 'DRF2', csvFilename, elapsed, trees, classification_error, classErrorPctList, totalScores)
        print ('\n' + l)
        h2o.cloudPerfH2O.message(l)
        h2i.delete_keys_at_all_nodes(pattern=hex_key)
