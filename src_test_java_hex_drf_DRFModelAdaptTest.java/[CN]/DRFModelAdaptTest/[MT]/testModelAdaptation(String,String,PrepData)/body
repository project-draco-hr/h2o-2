{
  DRFModel model=null;
  Frame frTest=null;
  Frame frTrain=null;
  Key trainKey=Key.make("train.hex");
  Key testKey=Key.make("test.hex");
  Frame[] frAdapted=null;
  try {
    frTrain=parseFrame(trainKey,train);
    model=runDRF(frTrain,dprep);
    frTest=parseFrame(testKey,test);
    Assert.assertEquals("TEST CONF ERROR: The test dataset should contain 2*<number of input columns>+1!",2 * (frTrain.numCols() - 1) + 1,frTest.numCols());
    frAdapted=model.adapt(frTest,true);
    Assert.assertEquals("Adapt method should return two frames",2,frAdapted.length);
    Assert.assertEquals("Test expects that all columns in  test dataset has to be adapted",dprep.needAdaptation(frTrain),frAdapted[1].numCols());
    Frame adaptedFrame=frAdapted[0];
    for (int av=0; av < frTrain.numCols() - 1; av++) {
      int ev=av + frTrain.numCols();
      Vec actV=adaptedFrame.vecs()[av];
      Vec expV=frTest.vecs()[ev];
      Assert.assertEquals("Different number of rows in test vectors",expV.length(),actV.length());
      for (long r=0; r < expV.length(); r++) {
        if (expV.isNA(r))         Assert.assertTrue("Badly adapted vector - expected NA! Col: " + av + ", row: "+ r,actV.isNA(r));
 else {
          Assert.assertTrue("Badly adapted vector - expected value but get NA! Col: " + av + ", row: "+ r,!actV.isNA(r));
          Assert.assertEquals("Badly adapted vector - wrong values! Col: " + av + ", row: "+ r,expV.at8(r),actV.at8(r));
        }
      }
    }
  }
  finally {
    if (model != null)     UKV.remove(model._selfKey);
    if (frTrain != null)     frTrain.remove();
    UKV.remove(trainKey);
    if (frTest != null)     frTest.remove();
    UKV.remove(testKey);
    if (frAdapted != null)     frAdapted[1].remove();
  }
}
