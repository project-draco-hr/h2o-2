{
  DRF drf=new DRF();
  drf._rfmodel=new RFModel(modelKey,cols,ary._key,new Key[0],ary._cols.length,sample,numSplitFeatures,ntrees);
  drf._job=Jobs.start("RandomForest",modelKey);
  drf._ntrees=ntrees;
  drf._depth=depth;
  drf._sample=sample;
  drf._binLimit=binLimit;
  drf._stat=stat.ordinal();
  drf._classcol=cols[cols.length - 1];
  drf._seed=seed;
  drf._parallel=parallelTrees;
  drf._classWt=classWt;
  drf._numSplitFeatures=numSplitFeatures;
  drf._useStratifySampling=stratify;
  drf._verbose=verbose;
  drf._exclusiveSplitLimit=exclusiveSplitLimit;
  RandomForest.OptArgs _=new RandomForest.OptArgs();
  _.features=numSplitFeatures;
  _.ntrees=ntrees;
  _.depth=depth;
  _.classcol=drf._classcol;
  _.seed=seed;
  _.binLimit=binLimit;
  _.verbose=verbose;
  _.exclusive=exclusiveSplitLimit;
  String w="";
  if (classWt != null)   for (int i=0; i < classWt.length; i++)   w+=i + ":" + classWt[i]+ ",";
  _.weights=w;
  _.parallel=parallelTrees ? 1 : 0;
  _.statType=stat.ordinal() == 1 ? "gini" : "entropy";
  _.sample=(int)(sample * 100);
  _.file="";
  if (verbose > 0)   Utils.pln("Web arguments: " + _ + " key "+ ary._key);
  drf.validateInputData();
  drf._t_main=new Timer();
  if (drf._useStratifySampling)   drf.extractMinorities(ary,strata);
  UKV.put(modelKey,drf._rfmodel);
  DKV.write_barrier();
  drf.fork(ary._key);
  return drf;
}
