import os, sys, time, csv, socket
sys.path.append('../py/')
sys.path.extend(['.', '..'])
import h2o_cmd, h2o, h2o_hosts, h2o_browse as h2b, h2o_import as h2i, h2o_rf, h2o_jobs
csv_header = ('h2o_build', 'nMachines', 'nJVMs', 'Xmx/JVM', 'dataset', 'nTrainRows', 'nTestRows', 'nCols', 'trainParseWallTime', 'nfolds', 'family', 'glmBuildTime', 'testParseWallTime', 'scoreTime', 'AUC', 'AIC', 'error')
files = {'Airlines': {'train': ('AirlinesTrain1x', 'AirlinesTrain10x', 'AirlinesTrain100x'), 'test': 'AirlinesTest', }, 'AllBedrooms': {'train': ('AllBedroomsTrain1x', 'AllBedroomsTrain10x', 'AllBedroomsTrain100x'), 'test': 'AllBedroomsTest', }, }
build = ''
debug = False
if (__name__ == '__main__'):
    dat = sys.argv.pop((-1))
    debug = sys.argv.pop((-1))
    build = sys.argv.pop((-1))
    h2o.parse_our_args()
    h2o_hosts.build_cloud_with_hosts()
    fp = ('Airlines' if ('Air' in dat) else 'AllBedrooms')
    if (dat == 'Air1x'):
        fs = files['Airlines']['train'][0]
    if (dat == 'Air10x'):
        fs = files['Airlines']['train'][1]
    if (dat == 'Air100x'):
        fs = files['Airlines']['train'][2]
    if (dat == 'AllB1x'):
        fs = files['AllBedrooms']['train'][0]
    if (dat == 'AllB10x'):
        fs = files['AllBedrooms']['train'][1]
    if (dat == 'AllB100x'):
        fs = files['AllBedrooms']['train'][2]
    bench = 'bench'
    debug = False
    if debug:
        bench = 'bench/debug'
    if (fp == 'Airlines'):
        airlinesTestParseStart = time.time()
        hK = 'AirlinesHeader.csv'
        headerPathname = (((bench + '/Airlines') + '/') + hK)
        h2i.import_only(bucket='home-0xdiag-datasets', path=headerPathname)
        headerKey = h2i.find_key(hK)
        testFile = h2i.import_parse(bucket='home-0xdiag-datasets', path=(bench + '/Airlines/AirlinesTest.csv'), schema='local', hex_key='atest.hex', header=1, header_from_file=headerKey, separator=44, doSummary=False, timeoutSecs=7200, retryDelaySecs=5, pollTimeoutSecs=7200)
        elapsedAirlinesTestParse = (time.time() - airlinesTestParseStart)
        row = {'testParseWallTime': elapsedAirlinesTestParse, }
        x = 'Year,Month,DayofMonth,DayOfWeek,DepTime,ArrTime,UniqueCarrier,Origin,Dest,Distance'
        doGLM(fs, 'Airlines', 'binomial', 'logit', 1e-05, 0.5, 10, 'IsDepDelayed', x, testFile['destination_key'], row)
    if (fp == 'AllBedrooms'):
        allBedroomsTestParseStart = time.time()
        x = 'areaname,state,metro,count1,count2,count3,count4,count5,count6,count7,count8,count9,count10,count11,count12,count13,count14,count15,count16,count17,count18,count19,count20,count21,count22,count23,count24,count25,count26,count27,count28,count29,count30,count31,count32,count33,count34,count35,count36,count37,count38,count39,count40,count41,count42,count43,count44,count45,count46,count47,count48,count49,count50,count51,count52,count53,count54,count55,count56,count57,count58,count59,count60,count61,count62,count63,count64,count65,count66,count67,count68,count69,count70,count71,count72,count73,count74,count75,count76,count77,count78,count79,count80,count81,count82,count83,count84,count85,count86,count87,count88,count89,count90,count91,count92,count93,count94,count95,count96,count97,count98,count99'
        hK = 'AllBedroomsHeader.csv'
        headerPathname = (((bench + '/AllBedrooms') + '/') + hK)
        h2i.import_only(bucket='home-0xdiag-datasets', path=headerPathname)
        headerKey = h2i.find_key(hK)
        testFile = h2i.import_parse(bucket='home-0xdiag-datasets', path=(bench + '/AllBedrooms/AllBedroomsTest.csv'), schema='local', hex_key='allBtest.hex', header=1, header_from_file=headerKey, separator=44, doSummary=False, timeoutSecs=7200, retryDelaySecs=5, pollTimeoutSecs=7200)
        elapsedAllBedroomsTestParse = (time.time() - allBedroomsTestParseStart)
        row = {'testParseWallTime': elapsedAllBedroomsTestParse, }
        doGLM(fs, 'AllBedrooms', 'gaussian', 'identity', 0.0001, 0.75, 10, 'medrent', x, testFile['destination_key'], row)
    h2o.tear_down_cloud()
