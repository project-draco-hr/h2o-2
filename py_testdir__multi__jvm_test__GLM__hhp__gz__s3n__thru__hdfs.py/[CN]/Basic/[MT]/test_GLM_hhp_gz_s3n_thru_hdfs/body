def test_GLM_hhp_gz_s3n_thru_hdfs(self):
    print 'Trying to load the 100 gz files in the hhp_107_01 dir'
    print 'Should look like hhp_107_01/hhp_107_01.data.gz_00030 in bucket: home-0xdiag-datasets'
    csvFilename = '*gz'
    csvPathname = ('hhp_107_01/' + csvFilename)
    URI = 's3n://home-0xdiag-datasets/'
    s3nKey = (URI + csvPathname)
    trialMax = 1
    for trial in range(trialMax):
        trialStart = time.time()
        importHDFSResult = h2o.nodes[0].import_hdfs(URI)
        s3nFullList = importHDFSResult['succeeded']
        self.assertGreater(len(s3nFullList), 8, "Didn't see more than 8 files in s3n?")
        storeView = h2o.nodes[0].store_view()
        for s in storeView['keys']:
            print '\nkey:', s['key']
            if ('rows' in s):
                print 'rows:', s['rows'], 'value_size_bytes:', s['value_size_bytes']
        key2 = (((csvFilename + '_') + str(trial)) + '.hex')
        print 'Loading s3n key: ', s3nKey, 'thru HDFS'
        timeoutSecs = 500
        start = time.time()
        parseKey = h2o.nodes[0].parse(s3nKey, key2, timeoutSecs=timeoutSecs, retryDelaySecs=10, pollTimeoutSecs=60, noise=('JStack', None))
        elapsed = (time.time() - start)
        print s3nKey, 'h2o reported parse time:', parseKey['response']['time']
        print 'parse end on ', s3nKey, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseKey['destination_key']
        kwargs = {'x': '0,1,2,3,4,5,6,7,8,10,11', 'y': 106, 'family': 'gaussian', 'lambda': 1e-05, 'max_iter': 50, 'weight': 1.0, 'thresholds': 0.5, 'link': 'familyDefault', 'n_folds': 0, 'alpha': 1, 'beta_epsilon': 0.0001, }
        timeoutSecs = 500
        kwargs.update({'alpha': 0, 'lambda': 0, })
        start = time.time()
        glm = h2o_cmd.runGLMOnly(parseKey=parseKey, timeoutSecs=timeoutSecs, pollTimeoutSecs=60, noise=('JStack', None), **kwargs)
        elapsed = (time.time() - start)
        print 'glm (L2) end on ', csvPathname, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        h2o_glm.simpleCheckGLM(self, glm, None, noPrint=True, **kwargs)
        h2o.check_sandbox_for_errors()
        print 'Trial #', trial, 'completed in', (time.time() - trialStart), 'seconds.',
