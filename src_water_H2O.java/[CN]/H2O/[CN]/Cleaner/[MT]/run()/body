{
  while (true) {
    Histo h=_myHisto.histo(false);
    long now=System.currentTimeMillis();
    long dirty=_dirty;
    if (h._cached < DESIRED && (now - dirty < 5000)) {
synchronized (STORE) {
        try {
          STORE.wait(5000);
        }
 catch (        InterruptedException ie) {
        }
      }
      continue;
    }
    now=System.currentTimeMillis();
    _dirty=Long.MAX_VALUE;
    boolean force=(h._cached >= DESIRED);
    long clean_to_age=h.clean_to(force ? DESIRED : (DESIRED >> 1));
    if (!force)     clean_to_age=Math.max(clean_to_age,now - 5000);
    if (VERBOSE)     System.out.println("[clean >>>] " + h + " DESIRED="+ (DESIRED >> 20)+ "M dirtysince="+ (now - dirty)+ " force="+ force+ " clean2age="+ (now - clean_to_age));
    long cleaned=0;
    long freed=0;
    Object[] kvs=STORE.raw_array();
    for (int i=2; i < kvs.length; i+=2) {
      Object ok=kvs[i + 0], ov=kvs[i + 1];
      if (!(ok instanceof Key))       continue;
      Key key=(Key)ok;
      if (!(ov instanceof Value))       continue;
      Value val=(Value)ov;
      byte[] m=val.mem();
      if (m == null)       continue;
      if (val._isArray != 0 && (val._persist & Value.BACKEND_MASK) != Value.ICE)       continue;
      long touched=val._lastAccessedTime;
      if (touched > clean_to_age) {
        dirty_store(touched);
        continue;
      }
      if (force || lazy_clean(key)) {
        if (VERBOSE && !val.isPersisted()) {
          System.out.print('.');
          cleaned+=m.length;
        }
        val.storePersist();
        if (force)         val.freeMem();
        if (VERBOSE)         freed+=m.length;
      }
    }
    h=_myHisto.histo(true);
    MemoryManager.set_goals("postclean",false);
    if (VERBOSE)     System.out.println("[clean <<<] " + h + " cleaned="+ (cleaned >> 20)+ "M, freed="+ (freed >> 20)+ "M, DESIRED="+ (DESIRED >> 20)+ "M");
  }
}
