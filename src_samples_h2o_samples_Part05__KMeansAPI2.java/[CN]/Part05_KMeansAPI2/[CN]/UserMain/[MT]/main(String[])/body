{
  H2O.main(args);
  Key file=NFSFileVec.make(new File("smalldata/gaussian/sdss174052.csv.gz"));
  Key key=Key.make("test");
  Frame frame=ParseDataset2.parse(key,new Key[]{file});
  int k=3;
  double[][] clusters=new double[k][frame.vecs().length];
  Random rand=new Random();
  long row=Math.max(0,(long)(rand.nextDouble() * frame.vecs().length) - 1);
  for (int i=0; i < frame.vecs().length; i++)   clusters[0][i]=frame.vecs()[i].getd(row);
  for (int i=0; i < 100; i++) {
    KMeans task=new KMeans();
    task._clusters=clusters;
    task.invoke(frame);
    for (int c=0; c < clusters.length; c++) {
      if (task._counts[c] > 0) {
        for (int v=0; v < frame.vecs().length; v++) {
          double value=task._sums[c][v] / task._counts[c];
          clusters[c][v]=value;
        }
      }
    }
    System.out.println("Error is " + task._error);
  }
  DecimalFormat df=new DecimalFormat("#.00");
  System.out.println("Clusters:");
  for (int c=0; c < clusters.length; c++) {
    for (int v=0; v < frame.vecs().length; v++)     System.out.print(df.format(clusters[c][v]) + ", ");
    System.out.println("");
  }
}
