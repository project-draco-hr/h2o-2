{
  DRFModel model=new DRFModel(outputKey,dataKey,validation == null ? null : testKey,names,domains,ntrees,max_depth,min_rows,nbins,mtries,sample_rate,seed);
  DKV.put(outputKey,model);
  Random rand=createRNG(seed);
  new SetWrkTask().doAll(fr);
  int tid=0;
  DTree[] ktrees=null;
  TreeStats tstats=new TreeStats();
  for (tid=0; tid < ntrees; tid++) {
    ktrees=buildNextKTrees(fr,_mtry,sample_rate,rand);
    if (cancelled())     break;
    tstats.updateBy(ktrees);
    model=doScoring(model,outputKey,fr,ktrees,tid,tstats,false,validation == null,build_tree_per_node);
  }
  model=doScoring(model,outputKey,fr,ktrees,tid,tstats,true,validation == null,build_tree_per_node);
  if (classification && importance) {
    float varimp[]=doVarImp(model,fr);
    Log.info(Sys.DRF__,"Var. importance: " + Arrays.toString(varimp));
    model.varimp=varimp;
    DKV.put(outputKey,model);
  }
  cleanUp(fr,t_build);
}
