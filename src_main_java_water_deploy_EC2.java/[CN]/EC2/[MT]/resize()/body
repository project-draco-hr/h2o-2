{
  PropertiesCredentials credentials;
  try {
    credentials=H2O.getAWSCredentials();
  }
 catch (  Exception ex) {
    System.out.println("Please provide your AWS credentials in './AwsCredentials.properties'");
    System.out.println("File format is:");
    System.out.println("accessKey=XXXXXXXXXXXXXXXXXXXX");
    System.out.println("secretKey=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    throw ex;
  }
  AmazonEC2Client ec2=new AmazonEC2Client(credentials);
  ec2.setEndpoint("ec2." + region + ".amazonaws.com");
  DescribeInstancesResult describeInstancesResult=ec2.describeInstances();
  List<Reservation> reservations=describeInstancesResult.getReservations();
  List<Instance> instances=new ArrayList<Instance>();
  for (  Reservation reservation : reservations) {
    for (    Instance instance : reservation.getInstances()) {
      String ip=ip(instance);
      if (ip != null) {
        String name=null;
        if (instance.getTags().size() > 0)         name=instance.getTags().get(0).getValue();
        if (NAME.equals(name))         instances.add(instance);
      }
    }
  }
  System.out.println("Found " + instances.size() + " EC2 instances for user "+ USER);
  if (instances.size() > boxes) {
    for (int i=0; i < instances.size() - boxes; i++) {
    }
  }
 else   if (instances.size() < boxes) {
    int launchCount=boxes - instances.size();
    System.out.println("Creating " + launchCount + " EC2 instances.");
    if (confirm) {
      System.out.println("Please confirm [y/n]");
      String s=Utils.readConsole();
      if (s == null || !s.equalsIgnoreCase("y"))       throw new Exception("Aborted");
    }
    RunInstancesRequest request=new RunInstancesRequest();
    request.withInstanceType(type);
    request.withImageId(image);
    request.withMinCount(launchCount).withMaxCount(launchCount);
    request.withSecurityGroupIds(securityGroup);
    request.withUserData(new String(Base64.encodeBase64(cloudConfig.getBytes())));
    RunInstancesResult runInstances=ec2.runInstances(request);
    ArrayList<String> ids=new ArrayList<String>();
    for (    Instance instance : runInstances.getReservation().getInstances())     ids.add(instance.getInstanceId());
    List<Instance> created=wait(ec2,ids);
    System.out.println("Created " + created.size() + " EC2 instances.");
    instances.addAll(created);
  }
  String[] pub=new String[instances.size()];
  String[] prv=new String[instances.size()];
  for (int i=0; i < instances.size(); i++) {
    pub[i]=instances.get(i).getPublicIpAddress();
    prv[i]=instances.get(i).getPrivateIpAddress();
  }
  System.out.println("EC2 public IPs: " + Utils.join(' ',pub));
  System.out.println("EC2 private IPs: " + Utils.join(' ',prv));
  Cloud cloud=new Cloud();
  cloud._publicIPs.addAll(Arrays.asList(pub));
  cloud._privateIPs.addAll(Arrays.asList(prv));
  return cloud;
}
