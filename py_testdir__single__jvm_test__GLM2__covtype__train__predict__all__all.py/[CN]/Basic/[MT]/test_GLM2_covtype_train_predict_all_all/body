def test_GLM2_covtype_train_predict_all_all(self):
    h2o.beta_features = True
    importFolderPath = 'standard'
    csvFilename = 'covtype.shuffled.data'
    csvPathname = ((importFolderPath + '/') + csvFilename)
    hex_key = (csvFilename + '.hex')
    parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=180)
    execExpr = ('A.hex=%s' % parseResult['destination_key'])
    h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
    y = 54
    execExpr = ('A.hex[,%s]=(A.hex[,%s]==%s)' % ((y + 1), (y + 1), 1))
    h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
    inspect = h2o_cmd.runInspect(key='A.hex')
    print ('\n' + csvPathname), '    numRows:', '{:,}'.format(inspect['numRows']), '    numCols:', '{:,}'.format(inspect['numCols'])
    print 'Use same data (full) for train and test'
    trainDataKey = 'A.hex'
    testDataKey = 'A.hex'
    kwargs = {'response': ('C' + str((y + 1))), 'max_iter': 20, 'n_folds': 0, 'alpha': 0.0, 'lambda': None, 'family': 'binomial', }
    timeoutSecs = 60
    for trial in range(1):
        aHack = {'destination_key': trainDataKey, }
        start = time.time()
        glm = h2o_cmd.runGLM(parseResult=aHack, timeoutSecs=timeoutSecs, pollTimeoutSecs=180, **kwargs)
        print 'glm end on ', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
        h2o_glm.simpleCheckGLM(self, glm, None, **kwargs)
        modelKey = glm['glm_model']['_key']
        submodels = glm['glm_model']['submodels']
        validation = submodels[(-1)]['validation']
        best_threshold = validation['best_threshold']
        thresholds = validation['thresholds']
        best_index = None
        for (i, t) in enumerate(thresholds):
            if (t == best_threshold):
                best_index = i
                break
        cms = validation['_cms']
        cm = cms[best_index]
        trainPctWrong = h2o_gbm.pp_cm_summary(cm['_arr'])
        predictKey = 'Predict.hex'
        start = time.time()
        predictResult = h2o_cmd.runPredict(data_key=testDataKey, model_key=modelKey, destination_key=predictKey, timeoutSecs=timeoutSecs)
        predictCMResult = h2o.nodes[0].predict_confusion_matrix(actual=testDataKey, vactual=('C' + str((y + 1))), predict=predictKey, vpredict='predict')
        cm = predictCMResult['cm']
        pctWrong = h2o_gbm.pp_cm_summary(cm)
        self.assertEqual(pctWrong, trainPctWrong, 'Should see the same error rate on train and predict? (same data set)')
        print '\nTest\n==========\n'
        print h2o_gbm.pp_cm(cm)
        print 'Trial #', trial, 'completed'
