def test_parse_mnist_rebalance(self):
    importFolderPath = 'mnist'
    csvFilelist = [('mnist_training.csv.gz', 600), ('mnist_training.csv.gz', 600), ('mnist_testing.csv.gz', 600), ('mnist_testing.csv.gz', 600)]
    trial = 0
    allDelta = []
    for (csvFilename, timeoutSecs) in csvFilelist:
        hex_key = (((csvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=((importFolderPath + '/') + csvFilename), hex_key=hex_key, retryDelaySecs=1, timeoutSecs=timeoutSecs)
        elapsed = (time.time() - start)
        print 'parse end on ', csvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print '\n#******************************************************************************'
        for trial in range(1):
            rb_key = ('rb_%s_%s' % (trial, hex_key))
            SEEDPERFILE = random.randint(0, sys.maxint)
            randChunks = random.randint(1, 100)
            start = time.time()
            print ('Trial %s: Rebalancing %s to %s with %s chunks' % (trial, hex_key, rb_key, randChunks))
            rebalanceResult = h2o.nodes[0].rebalance(source=hex_key, after=rb_key, seed=SEEDPERFILE, chunks=randChunks)
            elapsed = (time.time() - start)
            print 'rebalance end on ', csvFilename, 'took', elapsed, 'seconds', h2o_cmd.runSummary(key=rb_key)
            print '\nInspecting the original parsed result'
            inspect = h2o_cmd.runInspect(key=hex_key)
            h2o_cmd.infoFromInspect(inspect=inspect)
            print ('\nInspecting the rebalanced result with %s forced chunks' % randChunks)
            inspect = h2o_cmd.runInspect(key=rb_key)
            h2o_cmd.infoFromInspect(inspect=inspect)
