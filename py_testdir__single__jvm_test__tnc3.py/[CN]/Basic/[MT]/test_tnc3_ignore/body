def test_tnc3_ignore(self):
    csvFilename = 'tnc3.csv'
    csvPathname = h2o.find_file(('smalldata/' + csvFilename))
    print ('\n' + csvPathname)
    key2 = 'tnc3.hex'
    h2b.browseTheCloud()
    parseKey = h2o_cmd.parseFile(csvPathname=csvPathname, key2=key2, timeoutSecs=10, header=1)
    print "Parse result['Key']:", parseKey['destination_key']
    inspect = h2o_cmd.runInspect(None, parseKey['destination_key'])
    h2b.browseJsonHistoryAsUrlLastMatch('Inspect')
    if (1 == 1):
        lenNodes = len(h2o.nodes)
        colResultList = h2e.exec_expr_list_across_cols(lenNodes, numExprList, key2, maxCol=10, incrementingResult=False, timeoutSecs=10)
        print '\ncolResultList after num swap', colResultList
    if (1 == 1):
        print "\nWe're not CM data getting back from RFView.json that we can check!. so look at the browser"
        print 'The good case with ignore="boat,body"'
        rfv = h2o_cmd.runRF(trees=5, timeoutSecs=10, ignore='boat,body', csvPathname=csvPathname)
    inspect = h2o_cmd.runInspect(None, parseKey['destination_key'])
    h2b.browseJsonHistoryAsUrlLastMatch('RFView')
    if (1 == 1):
        colResultList = h2e.exec_expr_list_across_cols(lenNodes, charExprList, key2, maxCol=10, incrementingResult=False, timeoutSecs=10)
        print '\ncolResultList after char swap', colResultList
    if (1 == 1):
        print '\nNow the bad case (no ignore)'
        rfv = h2o_cmd.runRF(trees=5, timeoutSecs=10, csvPathname=csvPathname)
    inspect = h2o_cmd.runInspect(None, parseKey['destination_key'])
    h2b.browseJsonHistoryAsUrlLastMatch('RFView')
    if (not h2o.browse_disable):
        pass
