def test_summary2_int2B(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(100000, 1, 'B.hex', 2533255332, 2633256000, ('C1', None, None, None, None, None))]
    timeoutSecs = 10
    trial = 1
    n = h2o.nodes[0]
    lenNodes = len(h2o.nodes)
    x = 0
    timeoutSecs = 60
    for (rowCount, colCount, hex_key, expectedMin, expectedMax, expected) in tryList:
        maxDelta = ((expectedMax - expectedMin) / (MAX_QBINS + 0.0))
        maxDelta = (1.05 * maxDelta)
        distMean = ((expectedMax - expectedMin) / 2)
        maxShift = (distMean * 0.01)
        maxDelta = (maxDelta + maxShift)
        h2o.beta_features = False
        SEEDPERFILE = random.randint(0, sys.maxint)
        x += 1
        csvFilename = (((((('syn_' + 'binary') + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print 'Creating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, expectedMin, expectedMax, SEEDPERFILE)
        h2o.beta_features = False
        csvPathnameFull = h2i.find_folder_and_filename(None, csvPathname, returnFullPath=True)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=60, doSummary=False)
        print "Parse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvFilename)
        numRows = inspect['num_rows']
        numCols = inspect['num_cols']
        h2o.beta_features = True
        summaryResult = h2o_cmd.runSummary(key=hex_key, max_qbins=MAX_QBINS)
        h2o.verboseprint('summaryResult:', h2o.dump_json(summaryResult))
        column = summaryResult['summaries'][0]
        colname = column['colname']
        if expected[0]:
            self.assertEqual(colname, expected[0])
        coltype = column['type']
        nacnt = column['nacnt']
        stats = column['stats']
        stattype = stats['type']
        mean = stats['mean']
        sd = stats['sd']
        print 'colname:', colname, 'mean (2 places):', h2o_util.twoDecimals(mean)
        print 'colname:', colname, 'std dev. (2 places):', h2o_util.twoDecimals(sd)
        zeros = stats['zeros']
        mins = stats['mins']
        maxs = stats['maxs']
        pct = stats['pct']
        expectedPct = [0.01, 0.05, 0.1, 0.25, 0.33, 0.5, 0.66, 0.75, 0.9, 0.95, 0.99]
        pctile = stats['pctile']
        if expected[1]:
            h2o_util.assertApproxEqual(mins[0], expected[1], tol=maxDelta, msg='min is not approx. expected')
            h2o_util.assertApproxEqual(pctile[3], expected[2], tol=maxDelta, msg='25th percentile is not approx. expected')
            h2o_util.assertApproxEqual(pctile[5], expected[3], tol=maxDelta, msg='50th percentile (median) is not approx. expected')
            h2o_util.assertApproxEqual(pctile[7], expected[4], tol=maxDelta, msg='75th percentile is not approx. expected')
            h2o_util.assertApproxEqual(maxs[0], expected[5], tol=maxDelta, msg='max is not approx. expected')
        hstart = column['hstart']
        hstep = column['hstep']
        hbrk = column['hbrk']
        hcnt = column['hcnt']
        print 'pct:', pct
        print 'hcnt:', hcnt
        print 'len(hcnt)', len(hcnt)
        for b in hcnt[1:(-1)]:
            e = (numRows / len(hcnt))
        pt = h2o_util.twoDecimals(pctile)
        mx = h2o_util.twoDecimals(maxs)
        mn = h2o_util.twoDecimals(mins)
        print 'colname:', colname, 'pctile (2 places):', pt
        print 'colname:', colname, 'maxs: (2 places):', mx
        print 'colname:', colname, 'mins: (2 places):', mn
        compareActual = (mn[0], pt[3], pt[5], pt[7], mx[0])
        h2p.green_print('min/25/50/75/max colname:', colname, '(2 places):', compareActual)
        print 'maxs colname:', colname, '(2 places):', mx
        print 'mins colname:', colname, '(2 places):', mn
        trial += 1
        scipyCol = 0
