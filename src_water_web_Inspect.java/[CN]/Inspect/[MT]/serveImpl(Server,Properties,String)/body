{
  Key key=ServletUtil.check_key(args,"Key");
  String ks=key.toString();
  Value val=DKV.get(key);
  if (val == null)   return wrap(error("Key not found: " + ks));
  if (val.isHex())   return structured_array(key,ValueArray.value(val),val.onHDFS());
  RString response=new RString(html);
  formatKeyRow(key,val,response);
  response.replace("key",key);
  if (H2O.OPT_ARGS.hdfs != null && !val.onHDFS()) {
    RString hdfs=new RString("<a href='Store2HDFS?Key=%$key'><button class='btn btn-primary btn-mini'>store on HDFS</button></a>");
    hdfs.replace("key",key);
    response.replace("storeHdfs",hdfs.toString());
  }
 else {
    response.replace("storeHdfs","");
  }
  String p_keys=ks;
  int idx=ks.lastIndexOf('.');
  if (idx != -1)   p_keys=ks.substring(0,idx);
  p_keys+=".hex";
  if (p_keys.startsWith("hdfs://"))   p_keys=p_keys.substring(7);
 else   if (p_keys.startsWith("nfs:" + File.separator))   p_keys=p_keys.substring(5);
  if (p_keys.equals(ks))   p_keys+="2";
  Key p_key=Key.make(p_keys);
  boolean missed=DKV.get(p_key) == null;
  RString r=new RString(html_parse);
  r.replace("key",missed ? key : p_key);
  r.replace("parseKey",p_key);
  r.replace("pfunc",missed ? "Parse" : "Inspect");
  response.replace("parse",r.toString());
  return response.toString();
}
