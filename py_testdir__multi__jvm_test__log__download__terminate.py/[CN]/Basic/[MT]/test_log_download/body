def test_log_download(self):
    csvPathnamegz = h2o.find_file('smalldata/hhp_9_17_12.predict.data.gz')
    h2o_cmd.runRF(trees=6, timeoutSecs=30, csvPathname=csvPathnamegz)
    for h in h2o.nodes:
        h.log_view()
        h.log_download(timeoutSecs=3)
    h2o.nodes[1].terminate_self_only()
    time.sleep(5)
    print 'Checking cloud size at nodes 0 and 2 after terminating 1'
    nodesNow = [h2o.nodes[0], h2o.nodes[2]]
    expectedSize = len(nodesNow)
    cloudSizes = [n.get_cloud()['cloud_size'] for n in nodesNow]
    cloudConsensus = [n.get_cloud()['consensus'] for n in nodesNow]
    for s in cloudSizes:
        consensusStr = ','.join(map(str, cloudConsensus))
        sizeStr = ','.join(map(str, cloudSizes))
        if (s != expectedSize):
            raise Exception(('Inconsistent cloud size.' + ('nodes report size: %s consensus: %s instead of %d.' % (sizeStr, consensusStr, expectedSize))))
    h2o.nodes[0].log_download(timeoutSecs=3)
    logNames = []
    for (i, node) in enumerate(h2o.nodes):
        lineCount = h2o_util.file_line_count(('sandbox/' + logName))
        logName = (((('node' + str(i)) + node.addr) + '_') + node.port)
        logNames.append(logName)
        print logName, 'lineCount:', lineCount
    print logNames
