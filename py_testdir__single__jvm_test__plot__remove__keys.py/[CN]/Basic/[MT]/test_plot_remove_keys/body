def test_plot_remove_keys(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(100000, 50, 'cG', 400, 400), (200000, 50, 'cH', 400, 400), (400000, 50, 'cI', 400, 400), (800000, 50, 'cJ', 400, 400), (1000000, 50, 'cK', 400, 400)]
    xList = []
    eList = []
    fList = []
    for (rowCount, colCount, hex_key, timeoutSecs, timeoutSecs2) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        NUM_CASES = h2o_util.fp_format()
        sel = random.randint(0, (NUM_CASES - 1))
        csvFilename = ('syn_%s_%s_%s_%s.csv' % (SEEDPERFILE, sel, rowCount, colCount))
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print 'Creating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE, sel)
        start = time.time()
        print csvFilename, 'parse starting'
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=timeoutSecs, doSummary=False)
        parseElapsed = (time.time() - start)
        print 'Parse only:', parseResult['destination_key'], 'took', parseElapsed, 'seconds'
        h2o.check_sandbox_for_errors()
        start = time.time()
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], timeoutSecs=timeoutSecs2)
        print 'Inspect:', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
        h2o_cmd.infoFromInspect(inspect, csvPathname)
        print ('\n' + csvPathname), '    numRows:', '{:,}'.format(inspect['numRows']), '    numCols:', '{:,}'.format(inspect['numCols'])
        self.assertEqual(inspect['numCols'], colCount, ('parse created result with the wrong number of cols %s %s' % (inspect['numCols'], colCount)))
        self.assertEqual(inspect['numRows'], rowCount, ("parse created result with the wrong number of rows (header shouldn't count) %s %s" % (inspect['numRows'], rowCount)))
        parsedBytes = inspect['byteSize']
        node = h2o.nodes[0]
        print 'Deleting', hex_key, 'at', node.http_addr, "Shouldn't matter what node the delete happens at..global?"
        start = time.time()
        node.remove_key(hex_key, timeoutSecs=30)
        removeElapsed = (time.time() - start)
        print 'Deleting', hex_key, 'took', removeElapsed, 'seconds'
        xList.append(parsedBytes)
        eList.append(parseElapsed)
        fList.append(removeElapsed)
    if (1 == 1):
        xLabel = 'parsedBytes'
        eLabel = 'parseElapsed'
        fLabel = 'removeElapsed'
        eListTitle = ''
        fListTitle = ''
        h2o_gbm.plotLists(xList, xLabel, eListTitle, eList, eLabel, fListTitle, fList, fLabel)
