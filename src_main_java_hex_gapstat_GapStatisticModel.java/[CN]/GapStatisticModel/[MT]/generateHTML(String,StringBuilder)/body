{
  if (title != null && !title.isEmpty())   DocGen.HTML.title(sb,title);
  DocGen.HTML.paragraph(sb,"Model Key: " + _key);
  DocGen.HTML.section(sb,"Gap Statistic Output:");
  DocGen.HTML.section(sb,"Log of the Pooled Cluster Within Sum of Squares per value of k");
  sb.append("<span style='display: inline-block;'>");
  sb.append("<table class='table table-striped table-bordered'>");
  double[] log_wks=wks();
  sb.append("<tr>");
  for (int i=0; i < log_wks.length; ++i) {
    if (log_wks[i] == 0)     continue;
    sb.append("<th>").append(i).append("</th>");
  }
  sb.append("</tr>");
  sb.append("<tr>");
  for (int i=0; i < log_wks.length; ++i) {
    if (log_wks[i] == 0)     continue;
    sb.append("<td>").append(log_wks[i]).append("</td>");
  }
  sb.append("</tr>");
  sb.append("</table></span>");
  DocGen.HTML.section(sb,"Monte Carlo Bootstrap Replicate Averages of the Log of the Pooled Cluster Within SS per value of k");
  sb.append("<span style='display: inline-block;'>");
  sb.append("<table class='table table-striped table-bordered'>");
  double[] log_wkbs=wkbs();
  sb.append("<tr>");
  for (int i=0; i < log_wkbs.length; ++i) {
    if (log_wkbs[i] == 0)     continue;
    sb.append("<th>").append(i).append("</th>");
  }
  sb.append("</tr>");
  sb.append("<tr>");
  for (int i=0; i < log_wkbs.length; ++i) {
    if (log_wkbs[i] == 0)     continue;
    sb.append("<td>").append(log_wkbs[i]).append("</td>");
  }
  sb.append("</tr>");
  sb.append("</table></span>");
  DocGen.HTML.section(sb,"Standard Error for the Monte Carlo Bootstrap Replicate Averages of the Log of the Pooled Cluster Within SS per value of k");
  sb.append("<span style='display: inline-block;'>");
  sb.append("<table class='table table-striped table-bordered'>");
  double[] sks=sk();
  sb.append("<tr>");
  for (int i=0; i < sks.length; ++i) {
    if (sks[i] == 0)     continue;
    sb.append("<th>").append(i).append("</th>");
  }
  sb.append("</tr>");
  sb.append("<tr>");
  for (int i=0; i < sks.length; ++i) {
    if (sks[i] == 0)     continue;
    sb.append("<td>").append(sks[i]).append("</td>");
  }
  sb.append("</tr>");
  sb.append("</table></span>");
  DocGen.HTML.section(sb,"Gap Statistic per value of k");
  sb.append("<span style='display: inline-block;'>");
  sb.append("<table class='table table-striped table-bordered'>");
  double[] gap_stats=gaps();
  sb.append("<tr>");
  for (int i=0; i < log_wkbs.length; ++i) {
    if (log_wkbs[i] == 0)     continue;
    sb.append("<th>").append(i).append("</th>");
  }
  sb.append("</tr>");
  sb.append("<tr>");
  for (int i=0; i < log_wkbs.length; ++i) {
    if (log_wkbs[i] == 0)     continue;
    sb.append("<td>").append(gap_stats[i]).append("</td>");
  }
  sb.append("</tr>");
  sb.append("</table></span>");
  int kmin=-1;
  for (int i=0; i < gap_stats.length; ++i) {
    int cur_k=i + 1;
    if (i == gap_stats.length - 1) {
      kmin=cur_k;
      break;
    }
    if (gap_stats[i] >= (gap_stats[i + 1] - sks[i + 1])) {
      kmin=cur_k;
      break;
    }
  }
  if (log_wks[log_wks.length - 1] != 0) {
    DocGen.HTML.section(sb,"Best k:");
    if (kmin < 0) {
      sb.append("k = " + "No k computed!");
    }
 else {
      sb.append("k = " + kmin);
    }
  }
 else {
    DocGen.HTML.section(sb,"Best k so far:");
    if (kmin < 0) {
      sb.append("k = " + "No k computed yet...");
    }
 else {
      sb.append("k = " + kmin);
    }
  }
}
