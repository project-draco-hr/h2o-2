def test_GLM_both(self):
    h2o.beta_features = True
    if (1 == 1):
        csvFilenameList = [('logreg', 'benign.csv', 'binomial', 3, 10)]
    else:
        csvFilenameList = [('logreg', 'benign.csv', 'gaussian', 3, 10), (None, 'icu.dat', 'binomial', 1, 10), (None, 'nhanes3.dat', 'binomial', 15, 10), (None, 'lowbwt.dat', 'binomial', 1, 10), (None, 'lowbwtm11.dat', 'binomial', 1, 10), (None, 'meexp.dat', 'gaussian', 3, 10), (None, 'nhanes3.dat', 'binomial', 15, 10), (None, 'pbc.dat', 'gaussian', 1, 10), (None, 'pharynx.dat', 'gaussian', 12, 10), (None, 'uis.dat', 'binomial', 8, 10)]
    trial = 0
    for (offset, csvFilename, family, y, timeoutSecs) in csvFilenameList:
        if offset:
            csvPathname1 = ((offset + '/') + csvFilename)
        else:
            csvPathname1 = ('logreg/umass_statdata/' + csvFilename)
        fullPathname = h2i.find_folder_and_filename('smalldata', csvPathname1, returnFullPath=True)
        csvPathname2 = (((SYNDATASETS_DIR + '/') + csvFilename) + '_2.csv')
        h2o_util.file_clean_for_R(fullPathname, csvPathname2)
        parseResult = h2i.import_parse(path=csvPathname2, schema='put', hex_key=csvFilename, timeoutSecs=10)
        destination_key = parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, destination_key)
        if h2o.beta_features:
            num_cols = inspect['numCols']
            num_rows = inspect['numRows']
        else:
            num_cols = inspect['num_cols']
            num_rows = inspect['num_rows']
        print 'num_cols', num_cols, 'num_rows', num_rows
        formula = (('V' + str((y + 1))) + ' ~ ')
        x = None
        col_names = ''
        for c in range(0, num_cols):
            if ((csvFilename == 'clslowbwt.dat') and (c == 6)):
                print 'Not including col 6 for this dataset from x'
            if ((csvFilename == 'benign.csv') and ((c == 0) or (c == 1))):
                print 'Not including col 0,1 for this dataset from x'
            else:
                if (x is None):
                    col_names += ('V' + str((c + 1)))
                else:
                    col_names += (',V' + str((c + 1)))
                if (c != y):
                    if (x is None):
                        x = str(c)
                        formula += ('V' + str((c + 1)))
                    else:
                        x += (',' + str(c))
                        formula += ('+V' + str((c + 1)))
        print 'formula:', formula
        print 'col_names:', col_names
        print 'x:', x
        if h2o.beta_features:
            kwargs = {'n_folds': 0, 'response': y, 'family': family, 'alpha': 0, 'lambda': 0, 'beta_epsilon': 0.0001, 'max_iter': 50, }
        else:
            kwargs = {'n_folds': 0, 'y': y, 'x': x, 'family': family, 'alpha': 0, 'lambda': 0.0001, 'beta_epsilon': 0.0001, 'max_iter': 50, }
        if (csvFilename == 'benign.csv'):
            kwargs['ignored_cols'] = '0,1'
        if (csvFilename == 'clslowbwt.dat'):
            kwargs['ignored_cols'] = '6'
        start = time.time()
        glm = h2o_cmd.runGLM(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
        print 'glm end (w/check) on ', csvPathname2, 'took', (time.time() - start), 'seconds'
        h2oResults = h2o_glm.simpleCheckGLM(self, glm, None, prettyPrint=True, **kwargs)
        (warningsR, cListR, interceptR) = glm_R_and_compare(self, csvPathname2, family, formula, y, h2oResults=h2oResults)
        trial += 1
        print '\nTrial #', trial
