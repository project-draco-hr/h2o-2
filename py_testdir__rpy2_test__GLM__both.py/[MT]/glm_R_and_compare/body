def glm_R_and_compare(self, csvPathname, family, formula, y, header=False, h2oResults=None):
    df = ro.DataFrame.from_csvfile(csvPathname, header=False)
    cn = ro.r.colnames(df)
    fit = ro.r.glm(formula=ro.r(formula), data=df, family=ro.r((family + '(link="logit")')))
    gsummary = ro.r.summary(fit)
    coef = ro.r.coef(fit)
    warningsR = []
    interceptR = coef[0]
    cListR = coef[1:(-1)]
    if (h2oResults is not None):
        (warningsH2O, cListH2O, interceptH2O) = h2oResults
        interceptDelta = abs((abs(interceptH2O) - abs(interceptR)))
        cDelta = [abs((abs(a) - abs(b))) for (a, b) in zip(cListH2O, cListR)]
    else:
        (warningsH2O, cListH2O, interceptH2O) = (None, None, None)
        interceptDelta = None
        cDelta = [None for a in cListR]

    def printit(self, a, b, c, d):
        pctDiff = (abs((d / c)) * 100)
        print ('%-20s %-20.5e %8s %5.2f%% %10s %-20.5e' % ((((('R ' + a) + ' ') + b) + ':'), c, 'pct. diff:', pctDiff, 'abs diff:', d))
        self.assertLess(pctDiff, 1, 'Expect <1% difference between H2O and R coefficient/intercept')
    print 
    printit(self, 'intercept', '', interceptR, interceptDelta)
    print 'compare lengths cListH2O, cListR, cDelta:', len(cListH2O), len(cListR), len(cDelta)
    print 'clistH2O:', cListH2O
    print 'clistR:', cListR
    print 'cn:', cn
    print 'cDelta:', cDelta
    for (i, cValue) in enumerate(cListR):
        printit(self, 'coefficient', cn[i], cValue, cDelta[i])
    gsummaryIndexDesc = ['call', 'terms', 'family', 'deviance', 'aic', 'contrasts', 'df.residual', 'null.deviance', 'df.null', 'iter', 'deviance.resid', 'coefficients', 'aliased', 'dispersion', 'df', 'cov.unscaled', 'cov.scaled']
    whatIwant = ['family', 'deviance', 'aic', 'df.residual', 'null.deviance', 'df.null', 'iter']
    for (i, v) in enumerate(gsummary):
        d = gsummaryIndexDesc[i]
        if (d in whatIwant):
            print ('%s %s %15s %s' % ('R gsummary', i, (d + ':\t'), gsummary[i][0]))
    return (warningsR, cListR, interceptR)
