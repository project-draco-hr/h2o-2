import random
import jenkinsapi
import getpass
from jenkinsapi.jenkins import Jenkins
import re, os
import argparse
import shutil
import json
import logging
logging.basicConfig(level=logging.DEBUG)
parse = argparse.ArgumentParser()
parse.add_argument('-t', help="use 'test.0xdata.com:8080' for ip", action='store_true')
parse.add_argument('-x', help="use '192.168.1.164:8080' for ip", action='store_true')
args = parse.parse_args()
jenkins_url = 'http://192.168.1.164:8080'
jobName = 'h2o_master_test'
machine = '_164'
jenkins_url = 'http://test.0xdata.com'
jobName = 'h2o.tests.single.jvm'
machine = 'ec2'
if args.x:
    jenkins_url = 'http://192.168.1.164:8080'
    jobName = 'h2o_master_test'
    machine = '164'
if args.t:
    jenkins_url = 'http://test.0xdata.com'
    jobName = 'h2o.tests.single.jvm'
    machine = 'ec2'
(username, password) = login(machine)
LOG_DIR = clean_sandbox()
J = Jenkins(jenkins_url, username, password)
print J.keys()
print J[jobName]
job = J[jobName]
lgb = job.get_last_good_build()
print lgb.get_revision()
print job.get_config
if (1 == 0):
    from jenkinsapi.api import search_artifact_by_regexp
    artifact_regexp = re.compile('commands.log')
    result = search_artifact_by_regexp(jenkins_url, jobName, artifact_regexp)
    print repr(result)
print 'last_good_buildnumber', job.get_last_good_buildnumber()
print 'last_buildnumber', job.get_last_buildnumber()
build = job.get_build(job.get_last_buildnumber())
af = build.get_artifacts()
dict_af = build.get_artifact_dict()
print 'build get_status', build.get_status()
print 'build name', build.name
print 'build number', build.get_number()
print 'build revision', build.get_revision()
print 'build revision branch', build.get_revision_branch()
print 'build duration', build.get_duration()
print 'build upstream job name', build.get_upstream_job_name()
print 'build is_good', build.is_good()
print 'build timestamp', build.get_timestamp()
consoleTxt = open((LOG_DIR + '/console.txt'), 'a')
print 'getting build console (how to buffer this write?)'
print 'probably better to figure how to save it as file'
c = build.get_console()
consoleTxt.write(c)
consoleTxt.close()
print 'build has result set', build.has_resultset()
print 'build get result set'
rs = build.get_resultset()
print 'build result set name', rs.name
print 'build result set items', rs.items()
print 
print 'build result set keys', rs.keys()
aTxt = open((LOG_DIR + '/artifacts.txt'), 'a')
for (k, v) in rs.items():
    e = ('%s %s %s\n' % (rs.name, k, v))
    print e,
    aTxt.write(e)
    print '\n', rs[k], '\n'
print 'dict_af', dict_af
for a in af:
    e = ('%s %s %s %s\n' % ('#', a.filename, a.url, '####################################'))
    print e,
    aTxt.write((e + '\n'))
    if ('java_' in a.filename):
        a.save_to_dir(LOG_DIR)
    consoleTxt.close()
aTxt.close()
