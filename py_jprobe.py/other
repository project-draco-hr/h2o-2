import random
import jenkinsapi
import getpass
from jenkinsapi.jenkins import Jenkins
import re, os
import argparse
import shutil
import json
import logging
parse = argparse.ArgumentParser()
parse.add_argument('-t', help="use 'test.0xdata.com:8080' for ip", action='store_true')
parse.add_argument('-x', help="use '192.168.1.164:8080' for ip", action='store_true')
args = parse.parse_args()
jenkins_url = 'http://192.168.1.164:8080'
jobName = 'h2o_master_test'
machine = '164'
jenkins_url = 'http://test.0xdata.com'
jobName = 'h2o.tests.single.jvm'
machine = 'ec2'
if args.x:
    jenkins_url = 'http://192.168.1.164:8080'
    jobName = 'h2o_master_test'
    machine = '164'
if args.t:
    jenkins_url = 'http://test.0xdata.com'
    jobName = 'h2o.tests.single.jvm'
    machine = 'ec2'
(username, password) = login(machine)
LOG_DIR = clean_sandbox()
J = Jenkins(jenkins_url, username, password)
print J.keys()
print J[jobName]
job = J[jobName]
lgb = job.get_last_good_build()
print lgb.get_revision()
print job.get_config
if (1 == 0):
    from jenkinsapi.api import search_artifact_by_regexp
    artifact_regexp = re.compile('commands.log')
    result = search_artifact_by_regexp(jenkins_url, jobName, artifact_regexp)
    print repr(result)
print 'last_good_buildnumber', job.get_last_good_buildnumber()
print 'last_buildnumber', job.get_last_buildnumber()
print ('Using last_buildnumber %s for result set' % job.get_last_buildnumber())
build = job.get_build(job.get_last_good_buildnumber())
af = build.get_artifacts()
dict_af = build.get_artifact_dict()
buildstatus = build.get_status()
print 'build get_status', buildstatus
buildname = build.name
print 'build name', buildname
buildnumber = build.get_number()
print 'build number', buildnumber
buildrevision = build.get_revision()
print 'build revision', buildrevision
buildbranch = build.get_revision_branch()
print 'build revision branch', buildbranch
buildduration = build.get_duration()
print 'build duration', buildduration
buildupstream = build.get_upstream_job_name()
print 'build upstream job name', buildupstream
buildgood = build.is_good()
print 'build is_good', buildgood
buildtimestamp = build.get_timestamp()
print 'build timestamp', buildtimestamp
consoleTxt = open((LOG_DIR + '/console.txt'), 'a')
print 'getting build console (how to buffer this write?)'
print 'probably better to figure how to save it as file'
c = build.get_console()
consoleTxt.write(c)
consoleTxt.close()
print 'build has result set', build.has_resultset()
print 'build get result set'
rs = build.get_resultset()
print 'build result set name', rs.name
print 
aTxt = open((LOG_DIR + '/artifacts.txt'), 'a')
from see import see
PRINTALL = False
stats = {}
for (i, (k, v)) in enumerate(rs.items()):
    if (v.status in stats):
        stats[v.status] += 1
    else:
        stats[v.status] = 1
    e1 = '\n******************************************************************************'
    e2 = ('%s %s' % (i, v))
    aTxt.write((e1 + '\n'))
    aTxt.write((e2 + '\n'))
    if (v.status != 'PASSED'):
        print e1
        print e2
        print i, 'v.duration', v.duration
        print i, 'v.errorStackTrace', v.errorStackTrace
        print i, 'v.failedSince', v.failedSince
        print i, 'v.stderr', v.stderr
        lines = v.stdout
        num = min(5, len(lines))
        if (num != 0):
            print i, ('Last %s lines of stdout %s' % (num, '\n', lines[(- num)]))
        else:
            print 'v.stdout is empty'
        if PRINTALL:
            print i, 'k', k
            print i, 'v', v
            print i, 'v.errorDetails', v.errorDetails
            print i, 'v.age', v.age
            print i, 'v.className', v.className
            print i, 'v.identifier()', v.identifier()
            print i, 'v.name', v.name
            print i, 'v.skipped', v.age
            print i, 'v.skippedMessage', v.skippedMessage
            print i, 'v.status', v.status
            print i, 'v.stdout', v.stdout
if (1 == 1):
    for a in af:
        e = ('%s %s %s %s\n' % ('#', a.filename, a.url, '########### artifact saved ####################'))
        print e,
        aTxt.write((e + '\n'))
        a.save_to_dir(LOG_DIR)
        consoleTxt.close()
aTxt.close()
print ''
print 
print 
print 
print 'Build:', buildname
print buildtimestamp
print 'Status:', buildstatus
if buildgood:
    print 'Build is good'
else:
    print 'Build is bad'
print 'Build number', buildnumber
print buildbranch
print 'Duration', buildduration
print 'Upstream job', buildupstream
print 'Test summary'
for s in stats:
    print s, stats[s]
print 
