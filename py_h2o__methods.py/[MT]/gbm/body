def gbm(self, data_key, timeoutSecs=600, retryDelaySecs=1, initialDelaySecs=5, pollTimeoutSecs=30, noPoll=False, print_params=True, **kwargs):
    params_dict = {'balance_classes': None, 'checkpoint': None, 'classification': None, 'class_sampling_factors': None, 'cols': None, 'destination_key': None, 'distribution': None, 'family': None, 'grid_parallelism': None, 'group_split': None, 'grid_parallelism': None, 'group_split': None, 'holdout_fraction': None, 'ignored_cols': None, 'ignored_cols_by_name': None, 'importance': None, 'keep_cross_validation_splits': None, 'learn_rate': None, 'max_depth': None, 'max_after_balance_size': None, 'min_rows': None, 'nbins': None, 'ntrees': None, 'overwrite_checkpoint': None, 'response': None, 'score_each_iteration': None, 'seed': None, 'source': data_key, 'validation': None, }
    check_params_update_kwargs(params_dict, kwargs, 'gbm', print_params)
    if ('validation' not in kwargs):
        kwargs['validation'] = data_key
    start = time.time()
    a = self.do_json_request('2/GBM.json', timeout=timeoutSecs, params=params_dict)
    if noPoll:
        a['python_elapsed'] = (time.time() - start)
        a['python_%timeout'] = ((a['python_elapsed'] * 100) / timeoutSecs)
        return a
    verboseprint('\nGBM first result:', dump_json(a))
    a = self.poll_url(a, timeoutSecs=timeoutSecs, retryDelaySecs=retryDelaySecs, initialDelaySecs=initialDelaySecs, pollTimeoutSecs=pollTimeoutSecs)
    verboseprint('\nGBM result:', dump_json(a))
    a['python_elapsed'] = (time.time() - start)
    a['python_%timeout'] = ((a['python_elapsed'] * 100) / timeoutSecs)
    return a
