def parse(self, key, key2=None, timeoutSecs=300, retryDelaySecs=0.2, initialDelaySecs=None, pollTimeoutSecs=180, noise=None, benchmarkLogging=None, noPoll=False, **kwargs):
    browseAlso = kwargs.pop('browseAlso', False)
    algo = '2/Parse2'
    verboseprint(('\n %s key: %s to key2: %s (if None, means default)' % (algo, key, key2)))
    params_dict = {'blocking': None, 'source_key': key, 'destination_key': key2, 'parser_type': None, 'separator': None, 'header': None, 'single_quotes': None, 'header_from_file': None, 'exclude': None, 'delete_on_done': None, 'preview': None, }
    check_params_update_kwargs(params_dict, kwargs, 'parse', print_params=True)
    if kwargs.get('header_from_file'):
        kwargs['header'] = 1
    if benchmarkLogging:
        import h2o
        h2o.cloudPerfH2O.get_log_save(initOnly=True)
    a = self.do_json_request((algo + '.json'), timeout=timeoutSecs, params=params_dict)
    verboseprint((algo + ' result:'), dump_json(a))
    if noPoll:
        return a
    verboseprint((algo + ' noise:'), noise)
    a = self.poll_url(a, timeoutSecs=timeoutSecs, retryDelaySecs=retryDelaySecs, initialDelaySecs=initialDelaySecs, pollTimeoutSecs=pollTimeoutSecs, noise=noise, benchmarkLogging=benchmarkLogging)
    verboseprint((('\n' + algo) + ' result:'), dump_json(a))
    return a
