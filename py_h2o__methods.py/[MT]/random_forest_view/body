def random_forest_view(self, data_key=None, model_key=None, timeoutSecs=300, retryDelaySecs=0.2, initialDelaySecs=None, pollTimeoutSecs=180, noise=None, benchmarkLogging=None, print_params=False, noPoll=False, noPrint=False, **kwargs):
    print 'random_forest_view not supported in H2O fvec yet. hacking done response'
    r = {'response': {'status': 'done', }, 'trees': {'number_built': 0, }, }
    algo = '2/DRFModelView'
    algoScore = '2/DRFScore2'
    params_dict = {'_modelKey': model_key, }
    browseAlso = kwargs.pop('browseAlso', False)
    for k in kwargs:
        if (k in params_dict):
            params_dict[k] = kwargs[k]
    if print_params:
        print ('\n%s parameters:' % algo), params_dict
        sys.stdout.flush()
    whichUsed = algo
    if data_key:
        print "Can't pass a new data_key to random_forest_view for v2's DRFModelView. Not using"
    a = self.do_json_request((whichUsed + '.json'), timeout=timeoutSecs, params=params_dict)
    verboseprint(('\n%s result:' % whichUsed), dump_json(a))
    if noPoll:
        return a
    rfView = self.poll_url(a, timeoutSecs=timeoutSecs, retryDelaySecs=retryDelaySecs, initialDelaySecs=initialDelaySecs, pollTimeoutSecs=pollTimeoutSecs, noPrint=noPrint, noise=noise, benchmarkLogging=benchmarkLogging)
    drf_model = rfView['drf_model']
    numberBuilt = drf_model['N']
    errorInResponse = False
    if errorInResponse:
        raise Exception((('\nBad values in %s.json\n' % whichUsed) + ('progress: %s, progressTotal: %s, ntree: %s, numberBuilt: %s, status: %s' % (progress, progressTotal, ntree, numberBuilt, status))))
    if (browseAlso | h2o_args.browse_json):
        h2b.browseJsonHistoryAsUrlLastMatch(whichUsed)
    return rfView
