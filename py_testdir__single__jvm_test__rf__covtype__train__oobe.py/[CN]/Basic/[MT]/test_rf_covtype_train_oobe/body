def test_rf_covtype_train_oobe(self):
    if (1 == 0):
        csvFilename = 'train.csv'
        csvPathname = h2o.find_dataset(('bench/covtype/h2o/' + csvFilename))
        print "\nUsing header=1 even though I shouldn't have to. Otherwise I get NA in first row and RF bad\n"
        parseKey = h2o_cmd.parseFile(csvPathname=csvPathname, key2=(csvFilename + '.hex'), header=1, timeoutSecs=180)
    else:
        csvFilename = 'covtype.data'
        print '\nUsing header=0 on the normal covtype.data'
        csvPathname = h2o.find_dataset('UCI/UCI-large/covtype/covtype.data')
        parseKey = h2o_cmd.parseFile(csvPathname=csvPathname, key2=(csvFilename + '.hex'), header=0, timeoutSecs=180)
    inspect = h2o_cmd.runInspect(None, parseKey['destination_key'])
    h2o_cmd.infoFromInspect(inspect, csvPathname)
    for trial in range(1):
        kwargs = paramDict
        timeoutSecs = (30 + (kwargs['ntree'] * 20))
        start = time.time()
        rfView = h2o_cmd.runRFOnly(parseKey=parseKey, timeoutSecs=timeoutSecs, **kwargs)
        elapsed = (time.time() - start)
        print 'RF end on ', csvPathname, 'took', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
        classification_error = rfView['confusion_matrix']['classification_error']
        self.assertGreater(classification_error, 0.01, 'train.csv should have out of bag error estimate greater than 0.01')
        print 'Trial #', trial, 'completed'
