def test_rf_covtype_train_oobe(self):
    print '\nMichal will hate me for another file needed: covtype.shuffled.data'
    importFolderPath = '/home/0xdiag/datasets'
    csvFilename = 'covtype.shuffled.data'
    csvPathname = ((importFolderPath + '/') + csvFilename)
    key2 = (csvFilename + '.hex')
    h2i.setupImportFolder(None, importFolderPath)
    print '\nUsing header=0 on the normal covtype.data'
    parseKey = h2i.parseImportFolderFile(None, csvFilename, importFolderPath, key2=key2, header=0, timeoutSecs=180)
    inspect = h2o_cmd.runInspect(None, parseKey['destination_key'])
    print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
    num_rows = inspect['num_rows']
    pct10 = int((num_rows * 0.1))
    rowsForPct = [(i * pct10) for i in range(0, 11)]
    last10 = (num_rows - rowsForPct[9])
    rowsForPct[10] = last10
    rowsForPct[0] = rowsForPct[10]
    print 'Creating the key of the last 10% data, for scoring'
    dataKeyTest = 'rTest'
    execExpr = (((((dataKeyTest + ' = slice(') + key2) + ',') + str((rowsForPct[9] + 1))) + ')')
    h2o_exec.exec_expr(None, execExpr, resultKey=dataKeyTest, timeoutSecs=10)
    for trial in range(10):
        rowsToUse = rowsForPct[(trial % 10)]
        resultKey = ('r' + str(trial))
        execExpr = (((((resultKey + ' = slice(') + key2) + ',1,') + str(rowsToUse)) + ')')
        h2o_exec.exec_expr(None, execExpr, resultKey=resultKey, timeoutSecs=10)
        parseKey['destination_key'] = resultKey
        kwargs = paramDict.copy()
        timeoutSecs = (30 + (kwargs['ntree'] * 20))
        start = time.time()
        kwargs['out_of_bag_error_estimate'] = 1
        kwargs['model_key'] = ('model_' + str(trial))
        rfv = h2o_cmd.runRFOnly(parseKey=parseKey, timeoutSecs=timeoutSecs, **kwargs)
        elapsed = (time.time() - start)
        print 'RF end on ', csvPathname, 'took', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
        classification_error = rfv['confusion_matrix']['classification_error']
        self.assertGreater(classification_error, 0.01, 'train.csv should have out of bag error estimate greater than 0.01')
        print 'Now score on the last 10%'
        model_key = rfv['model_key']
        kwargs.pop('model_key', None)
        data_key = rfv['data_key']
        kwargs.pop('data_key', None)
        ntree = rfv['ntree']
        kwargs.pop('ntree', None)
        kwargs['clear_confusion_matrix'] = 1
        kwargs['no_confusion_matrix'] = 0
        kwargs['out_of_bag_error_estimate'] = 0
        h2o_cmd.runRFView(None, dataKeyTest, model_key, ntree, timeoutSecs, retryDelaySecs=1, print_params=True, **kwargs)
        print 'Trial #', trial, 'completed', ('using %6.2f' % ((rowsToUse * 100.0) / num_rows)), 'pct. of all rows'
