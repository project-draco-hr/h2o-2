{
  if (source_key == null)   return RequestServer._http404.serve();
  if (column == null)   return RequestServer._http404.serve();
  if (column.isEnum()) {
    throw new IllegalArgumentException("Column is an enum");
  }
  if (!((interpolation_type == 2) || (interpolation_type == 7))) {
    throw new IllegalArgumentException("Unsupported interpolation type. Currently only allow 2 or 7");
  }
  Vec[] vecs=new Vec[1];
  String[] names=new String[1];
  vecs[0]=column;
  Futures fs=new Futures();
  for (  Vec vec : vecs) {
    vec.rollupStats(fs);
  }
  fs.blockForPending();
  boolean multiPass;
  Quantiles[] qbins;
  double[] quantiles_to_do=new double[1];
  quantiles_to_do[0]=quantile;
  double approxResult;
  double exactResult;
  result_single=Double.NaN;
  result=Double.NaN;
  boolean done=false;
  qbins=null;
  if (multiple_pass == 0 || multiple_pass == 2) {
    multiPass=false;
    result_single=Double.NaN;
    if (multiple_pass == 0)     result=Double.NaN;
    double valStart=vecs[0].min();
    double valEnd=vecs[0].max();
    qbins=new Quantiles.BinTask2(max_qbins,valStart,valEnd).doAll(vecs[0])._qbins;
    Log.debug("Q_ for approx. valStart: " + valStart + " valEnd: "+ valEnd);
    interpolation_type_used=interpolation_type;
    quantile_requested=quantiles_to_do[0];
    if (qbins != null) {
      qbins[0].finishUp(vecs[0],quantiles_to_do,interpolation_type,multiPass);
      column_name=names[0];
      iterations=1;
      done=qbins[0]._done;
      approxResult=qbins[0]._pctile[0];
      interpolated=qbins[0]._interpolated;
    }
 else {
      column_name="";
      iterations=0;
      done=false;
      approxResult=Double.NaN;
      interpolated=false;
    }
    result_single=approxResult;
    if (multiple_pass == 0)     result=approxResult;
  }
  if (multiple_pass == 1 || multiple_pass == 2) {
    final int MAX_ITERATIONS=16;
    multiPass=true;
    exactResult=Double.NaN;
    double valStart=vecs[0].min();
    double valEnd=vecs[0].max();
    for (int b=0; b < MAX_ITERATIONS; b++) {
      if (!(multiple_pass == 2 && b == 0)) {
        qbins=new Quantiles.BinTask2(max_qbins,valStart,valEnd).doAll(vecs[0])._qbins;
      }
      iterations=b + 1;
      if (qbins == null)       break;
 else {
        qbins[0].finishUp(vecs[0],quantiles_to_do,interpolation_type,multiPass);
        Log.debug("\nQ_ multipass iteration: " + iterations + " valStart: "+ valStart+ " valEnd: "+ valEnd);
        double valBinSize=qbins[0]._valBinSize;
        Log.debug("Q_ valBinSize: " + valBinSize);
        valStart=qbins[0]._newValStart;
        valEnd=qbins[0]._newValEnd;
        done=qbins[0]._done;
        if (done)         break;
      }
    }
    interpolation_type_used=interpolation_type;
    quantile_requested=quantiles_to_do[0];
    if (qbins != null) {
      column_name=names[0];
      done=qbins[0]._done;
      exactResult=qbins[0]._pctile[0];
      interpolated=qbins[0]._interpolated;
    }
 else {
      column_name="";
      iterations=0;
      done=false;
      exactResult=Double.NaN;
      interpolated=false;
    }
    qbins=null;
    result=exactResult;
  }
  return Response.done(this);
}
