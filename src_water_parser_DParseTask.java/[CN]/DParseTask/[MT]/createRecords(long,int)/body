{
  assert(_rowsize != 0);
  ArrayList<OutputStreamRecord> result=new ArrayList();
  int rpc=(int)ValueArray.CHUNK_SZ / _rowsize;
  int rowInChunk=(int)firstRow % rpc;
  int lastChunk=Math.max(1,this._numRows / rpc) - 1;
  int chunkIndex=(int)firstRow / rpc;
  if (chunkIndex > lastChunk) {
    assert(chunkIndex == lastChunk + 1);
    rowInChunk+=rpc;
    --chunkIndex;
  }
  do {
    int rowsToChunk=(chunkIndex == lastChunk) ? rowsToParse : Math.min(rowsToParse,rpc - rowInChunk);
    result.add(new OutputStreamRecord(chunkIndex,rowInChunk * _rowsize,rowsToChunk));
    if (chunkIndex < lastChunk) {
      rowInChunk=0;
      ++chunkIndex;
    }
    rowsToParse-=rowsToChunk;
    assert(rowsToParse >= 0);
  }
 while (rowsToParse > 0);
  _outputIdx=0;
  _colIdx=_ncolumns;
  return result.toArray(new OutputStreamRecord[result.size()]);
}
