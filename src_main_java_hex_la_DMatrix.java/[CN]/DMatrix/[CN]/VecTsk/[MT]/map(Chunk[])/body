{
  Chunk zChunk=chks[chks.length - 1];
  double[] res=MemoryManager.malloc8d(chks[0]._len);
  for (int i=0; i < _y.length; ++i) {
    final double yVal=_y[i];
    final Chunk xChunk=chks[i];
    for (int k=xChunk.nextNZ(-1); k < res.length; k=xChunk.nextNZ(k))     res[k]+=yVal * xChunk.at0(k);
  }
  int[] nzs=MemoryManager.malloc4(res.length + 1);
  int j=0;
  for (int i=0; i < res.length; ++i)   if (res[i] != 0)   nzs[j++]=i;
  Chunk modChunk=(j < (res.length >> 1)) ? new CXDChunk(res,nzs,j) : new C8DChunk(res);
  new UpdateProgress(modChunk._mem.length,modChunk.frozenType()).fork(_progressKey);
  DKV.put(zChunk._vec.chunkKey(zChunk.cidx()),modChunk,_fs);
}
