def test_rf_params_rand2(self):
    SEED = random.randint(0, sys.maxint)
    random.seed(SEED)
    print '\nUsing random seed:', SEED
    csvPathname = h2o.find_dataset('UCI/UCI-large/covtype/covtype.data')
    kwargs = {'response_variable': 54, 'features': 7, 'sampling_strategy': 'STRATIFIED_LOCAL', 'out_of_bag_error_estimate': 1, 'strata_samples': '1=10,2=99,3=99,4=99,5=99,6=99,7=99', 'bin_limit': None, 'seed': '11111', 'model_key': '012345', 'ntree': 13, 'parallel': 1, }
    for trial in range(2):
        timeoutSecs = (30 + (((kwargs['ntree'] * 20) * max(1, (kwargs['features'] / 15))) * ((kwargs['parallel'] and 1) or 3)))
        start = time.time()
        rfv = h2o_cmd.runRF(timeoutSecs=timeoutSecs, retryDelaySecs=1, csvPathname=csvPathname, **kwargs)
        elapsed = (time.time() - start)
        cm = rfv['confusion_matrix']
        classification_error = cm['classification_error']
        rows_skipped = cm['rows_skipped']
        self.assertLess(rows_skipped, 581012)
        self.assertLess(classification_error, 100)
        print 'Trial #', trial, 'completed in', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
