def test_many_fp_formats_libsvm_2_fvec(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(100, 10000, 'cA', 300, 'sparse50'), (100, 10000, 'cB', 300, 'sparse')]
    for (rowCount, colCount, hex_key, timeoutSecs, distribution) in tryList:
        NUM_CASES = h2o_util.fp_format()
        for sel in [random.randint(0, (NUM_CASES - 1))]:
            SEEDPERFILE = random.randint(0, sys.maxint)
            csvFilename = ('syn_%s_%s_%s_%s.csv' % (SEEDPERFILE, sel, rowCount, colCount))
            csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
            print 'Creating random', csvPathname
            (colNumberMax, synColSumDict) = write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE, sel, distribution)
            selKey2 = ((hex_key + '_') + str(sel))
            print "This dataset requires telling h2o parse it's a libsvm..doesn't detect automatically"
            parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=selKey2, timeoutSecs=timeoutSecs, doSummary=False, parser_type='SVMLight')
            print "Parse result['destination_key']:", parseResult['destination_key']
            inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], max_column_display=(colNumberMax + 1), timeoutSecs=timeoutSecs)
            numCols = inspect['numCols']
            numRows = inspect['numRows']
            print ('\n' + csvFilename)
            goodX = h2o_glm.goodXFromColumnInfo(y=0, key=parseResult['destination_key'], timeoutSecs=300, noPrint=True)
            if DO_SUMMARY:
                summaryResult = h2o_cmd.runSummary(key=selKey2, max_column_display=(colNumberMax + 1), timeoutSecs=timeoutSecs)
                h2o_cmd.infoFromSummary(summaryResult, noPrint=True)
            self.assertEqual((colNumberMax + 1), numCols, msg=('generated %s cols (including output).  parsed to %s cols' % ((colNumberMax + 1), numCols)))
            if DO_COMPARE_SUM:
                h2e.exec_zero_list(zeroList)
                colResultList = h2e.exec_expr_list_across_cols(None, exprList, selKey2, maxCol=(colNumberMax + 1), timeoutSecs=timeoutSecs)
                print '\n*************'
                print 'colResultList', colResultList
                print '*************'
            self.assertEqual(rowCount, numRows, msg=('generated %s rows, parsed to %s rows' % (rowCount, numRows)))
            for (k, v) in synColSumDict.iteritems():
                if DO_COMPARE_SUM:
                    self.assertTrue(((k >= 0) and (k < len(colResultList))))
                    compare = colResultList[k]
                    print '\nComparing col sums:', v, compare
                    self.assertAlmostEqual(v, compare, places=0, msg=('%0.6f col sum is not equal to expected %0.6f' % (v, compare)))
                synMean = ((v + 0.0) / rowCount)
                mean = float(inspect['cols'][k]['mean'])
                self.assertAlmostEqual(mean, synMean, places=0, msg=('col %s mean %0.6f is not equal to generated mean %0.6f' % (k, mean, synMean)))
                naCnt = inspect['cols'][k]['naCnt']
                self.assertEqual(0, naCnt, msg=('col %s naCnt %d should be 0' % (k, naCnt)))
