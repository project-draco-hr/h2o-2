{
  final int splits=cores() * 2;
  if (vecs[0].nChunks() < splits) {
    for (int v=0; v < vecs.length; v++) {
      AppendableVec vec=new AppendableVec(UUID.randomUUID().toString());
      long rows=vecs[0].length();
      Chunk cache=null;
      for (int split=0; split < splits; split++) {
        long off=rows * (split + 0) / splits;
        long lim=rows * (split + 1) / splits;
        NewChunk chunk=new NewChunk(vec,split);
        for (long r=off; r < lim; r++) {
          if (cache == null || r < cache._start || r >= cache._start + cache._len)           cache=vecs[v].chunk(r);
          if (!cache.isNA(r)) {
            if (vecs[v]._domain != null)             chunk.addEnum((int)cache.at8(r));
 else             if (vecs[v].isInt())             chunk.addNum(cache.at8(r),0);
 else             chunk.addNum(cache.at(r));
          }
 else {
            if (vecs[v].isInt())             chunk.addNA();
 else {
              chunk.addNum(Double.NaN);
            }
          }
        }
        chunk.close(split,null);
      }
      Vec t=vec.close(null);
      t._domain=vecs[v]._domain;
      vecs[v]=t;
    }
  }
}
