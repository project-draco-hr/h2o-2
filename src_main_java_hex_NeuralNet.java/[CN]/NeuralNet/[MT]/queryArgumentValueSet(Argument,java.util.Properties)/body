{
  super.queryArgumentValueSet(arg,inputArgs);
  if (arg._name.equals("input_dropout_ratio") && (activation != Activation.RectifierWithDropout && activation != Activation.TanhWithDropout)) {
    arg.disable("Only with Dropout.",inputArgs);
  }
  if (arg._name.equals("initial_weight_scale") && (initial_weight_distribution == InitialWeightDistribution.UniformAdaptive)) {
    arg.disable("Using sqrt(6 / (# units + # units of previous layer)) for Uniform distribution.",inputArgs);
  }
  if (arg._name.equals("mode")) {
    if (H2O.CLOUD._memary.length > 1) {
      arg.disable("Distributed MapReduce mode is not yet fully supported. Will run in single-node mode, wasting " + (H2O.CLOUD._memary.length - 1) + " cluster node(s).",inputArgs);
      mode=ExecutionMode.SingleNode;
    }
  }
  if (arg._name.equals("warmup_samples") && mode == MapReduce && H2O.CLOUD._memary.length > 1) {
    arg.disable("Not yet implemented for distributed MapReduce execution modes, using a value of 0.");
    warmup_samples=0;
  }
  if (arg._name.equals("loss") && !classification) {
    arg.disable("Using MeanSquare loss for regression.",inputArgs);
    loss=Loss.MeanSquare;
  }
  if (arg._name.equals("score_validation") && validation == null) {
    arg.disable("Only if a validation set is specified.");
  }
  if (arg._name.equals("loss") || arg._name.equals("max_w2") || arg._name.equals("warmup_samples")|| arg._name.equals("score_training")|| arg._name.equals("score_validation")|| arg._name.equals("initial_weight_distribution")|| arg._name.equals("initial_weight_scale")|| arg._name.equals("score_interval")|| arg._name.equals("diagnostics")) {
    if (!expert_mode)     arg.disable("Only in expert mode.");
  }
}
