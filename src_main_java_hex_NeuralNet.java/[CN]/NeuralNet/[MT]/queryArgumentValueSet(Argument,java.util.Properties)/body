{
  super.queryArgumentValueSet(arg,inputArgs);
  if (arg._name.equals("input_dropout_ratio") && (activation != Activation.RectifierWithDropout && activation != Activation.TanhWithDropout)) {
    arg.disable("Only with Dropout.",inputArgs);
  }
  if (arg._name.equals("initial_weight_scale") && (initial_weight_distribution == InitialWeightDistribution.UniformAdaptive)) {
    arg.disable("Using sqrt(6 / (# units + # units of previous layer)) for Uniform distribution.",inputArgs);
  }
  if (arg._name.equals("mode")) {
    if (H2O.CLOUD._memary.length > 1) {
      arg.disable("Distributed MapReduce mode is not yet fully supported. Will run in single-node mode, wasting " + (H2O.CLOUD._memary.length - 1) + " cluster node(s).",inputArgs);
      mode=ExecutionMode.SingleNode;
    }
  }
  if (arg._name.equals("warmup_samples")) {
    if (mode == ExecutionMode.SingleThread) {
      arg.disable("Only for non-serial execution modes.");
      assert(warmup_samples == 0);
    }
  }
  if (arg._name.equals("loss") && !classification) {
    arg.disable("Using MeanSquare loss for regression.",inputArgs);
    loss=Loss.MeanSquare;
  }
}
