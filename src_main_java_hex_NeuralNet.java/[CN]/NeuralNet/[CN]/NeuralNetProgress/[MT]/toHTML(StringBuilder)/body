{
  final String mse_format="%2.6f";
  final String cross_entropy_format="%2.6f";
  Job nn=job_key == null ? null : Job.findJob(job_key);
  NeuralNetModel model=UKV.get(destination_key);
  if (model != null) {
    String cmTitle="Confusion Matrix", validC="", validS="", validCE="";
    Errors train=model.training_errors[model.training_errors.length - 1];
    if (model.validation_errors != null) {
      Errors valid=model.validation_errors[model.validation_errors.length - 1];
      validC=format(valid.classification);
      validS=String.format(mse_format,valid.mean_square);
      validCE=String.format(cross_entropy_format,valid.cross_entropy);
    }
 else     cmTitle+=" (Training Data)";
    DocGen.HTML.section(sb,"Training classification error: " + format(train.classification));
    DocGen.HTML.section(sb,"Training mean square error: " + String.format(mse_format,train.mean_square));
    DocGen.HTML.section(sb,"Training cross entropy: " + String.format(cross_entropy_format,train.cross_entropy));
    DocGen.HTML.section(sb,"Validation classification error: " + validC);
    DocGen.HTML.section(sb,"Validation mean square error: " + validS);
    DocGen.HTML.section(sb,"Validation mean cross entropy: " + validCE);
    if (nn != null) {
      long ps=train.training_samples * 1000 / nn.runTimeMs();
      DocGen.HTML.section(sb,"Training speed: " + ps + " samples/s");
    }
    if (_params != null && _params.diagnostics) {
      DocGen.HTML.section(sb,"Hidden Layer Status");
      sb.append("<table class='table table-striped table-bordered table-condensed'>");
      sb.append("<tr>");
      sb.append("<th>").append("#").append("</th>");
      sb.append("<th>").append("Units").append("</th>");
      sb.append("<th>").append("Activation").append("</th>");
      sb.append("<th>").append("Rate").append("</th>");
      sb.append("<th>").append("L1").append("</th>");
      sb.append("<th>").append("L2").append("</th>");
      sb.append("<th>").append("Momentum").append("</th>");
      sb.append("<th>").append("Activation (Mean, RMS)").append("</th>");
      sb.append("<th>").append("Weight (Mean, RMS)").append("</th>");
      sb.append("<th>").append("Bias (Mean, RMS)").append("</th>");
      sb.append("<th>").append("Error (Mean, RMS)").append("</th>");
      sb.append("</tr>");
      for (int i=1; i < model.layers.length - 1; ++i) {
        sb.append("<tr>");
        sb.append("<td>").append("<b>").append(i).append("</b>").append("</td>");
        sb.append("<td>").append("<b>").append(model.layers[i].units).append("</b>").append("</td>");
        sb.append("<td>").append(model.layers[i].getClass().getCanonicalName().replace("hex.Layer.","")).append("</td>");
        sb.append("<td>").append(model.layers[i].rate(train.training_samples)).append("</td>");
        sb.append("<td>").append(model.layers[i].l1).append("</td>");
        sb.append("<td>").append(model.layers[i].l2).append("</td>");
        final String format="%g";
        sb.append("<td>").append(model.layers[i].momentum(train.training_samples)).append("</td>");
        sb.append("<td>(").append(String.format(format,model.mean_activation[i])).append(", ").append(String.format(format,model.rms_activation[i])).append(")</td>");
        sb.append("<td>(").append(String.format(format,model.mean_weight[i])).append(", ").append(String.format(format,model.rms_weight[i])).append(")</td>");
        sb.append("<td>(").append(String.format(format,model.mean_bias[i])).append(", ").append(String.format(format,model.rms_bias[i])).append(")</td>");
        sb.append("<td>(").append(String.format(format,model.mean_error[i])).append(", ").append(String.format(format,model.rms_error[i])).append(")</td>");
        sb.append("</tr>");
      }
      sb.append("</table>");
    }
    if (model.unstable) {
      DocGen.HTML.section(sb,"### Note:  Instability detected and job aborted.  Try a smaller learning rate and/or single-node mode. ###");
    }
    if (model.confusion_matrix != null && model.confusion_matrix.length < 100) {
      String[] classes=model.classNames();
      NeuralNetScore.confusion(sb,cmTitle,classes,model.confusion_matrix);
    }
    DocGen.HTML.section(sb,"Progress");
    sb.append("<table class='table table-striped table-bordered table-condensed'>");
    sb.append("<tr>");
    sb.append("<th>Training Time</th>");
    sb.append("<th>Training Samples</th>");
    sb.append("<th>Training MSE</th>");
    sb.append("<th>Training MCE</th>");
    sb.append("<th>Training Classification Error</th>");
    sb.append("<th>Validation MSE</th>");
    sb.append("<th>Validation MCE</th>");
    sb.append("<th>Validation Classification Error</th>");
    sb.append("</tr>");
    Errors[] trains=model.training_errors;
    for (int i=trains.length - 1; i >= 0; i--) {
      sb.append("<tr>");
      sb.append("<td>" + PrettyPrint.msecs(trains[i].training_time_ms,true) + "</td>");
      sb.append("<td>" + String.format("%,d",trains[i].training_samples) + "</td>");
      sb.append("<td>" + String.format(mse_format,trains[i].mean_square) + "</td>");
      sb.append("<td>" + String.format(cross_entropy_format,trains[i].cross_entropy) + "</td>");
      sb.append("<td>" + format(trains[i].classification) + "</td>");
      if (model.validation_errors != null) {
        sb.append("<td>" + String.format(mse_format,model.validation_errors[i].mean_square) + "</td>");
        sb.append("<td>" + String.format(cross_entropy_format,model.validation_errors[i].cross_entropy) + "</td>");
        sb.append("<td>" + format(model.validation_errors[i].classification) + "</td>");
      }
 else       sb.append("<td></td><td></td><td></td>");
      sb.append("</tr>");
    }
    sb.append("</table>");
  }
  return true;
}
