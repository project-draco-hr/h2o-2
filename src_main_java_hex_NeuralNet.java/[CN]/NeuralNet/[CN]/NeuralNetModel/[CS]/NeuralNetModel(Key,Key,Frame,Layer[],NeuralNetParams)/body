{
  super(selfKey,dataKey,fr);
  _params=p;
  layers=ls;
  weights=new float[ls.length][];
  biases=new float[ls.length][];
  for (int y=1; y < layers.length; y++) {
    weights[y]=layers[y]._w;
    biases[y]=layers[y]._b;
  }
  if (_params.diagnostics) {
    mean_activation=new double[ls.length];
    rms_activation=new double[ls.length];
    mean_bias=new double[ls.length];
    rms_bias=new double[ls.length];
    mean_weight=new double[ls.length];
    rms_weight=new double[ls.length];
    mean_error=new double[ls.length];
    rms_error=new double[ls.length];
    for (int y=1; y < layers.length - 1; y++) {
      final Layer l=layers[y];
      final int len=l._a.length;
      mean_activation[y]=rms_activation[y]=0;
      mean_bias[y]=rms_bias[y]=0;
      mean_weight[y]=rms_weight[y]=0;
      mean_error[y]=rms_error[y]=0;
      for (int u=0; u < len; u++) {
        mean_activation[y]+=l._a[u];
        mean_bias[y]+=l._b[u];
        mean_error[y]+=l._e[u];
        for (int i=0; i < l._previous._a.length; i++) {
          int w=u * l._previous._a.length + i;
          mean_weight[y]+=l._w[w];
        }
      }
      mean_activation[y]/=len;
      mean_bias[y]/=len;
      mean_error[y]/=len;
      mean_weight[y]/=len * l._previous._a.length;
      for (int u=0; u < len; ++u) {
        final double da=l._a[u] - mean_activation[y];
        rms_activation[y]+=da * da;
        final double db=l._b[u] - mean_bias[y];
        rms_bias[y]+=db * db;
        final double de=l._e[u] - mean_error[y];
        rms_error[y]+=de * de;
        for (int i=0; i < l._previous._a.length; i++) {
          int w=u * l._previous._a.length + i;
          final double dw=l._w[w] - mean_weight[y];
          rms_weight[y]+=dw * dw;
        }
      }
      rms_activation[y]=Math.sqrt(rms_activation[y] / len);
      rms_bias[y]=Math.sqrt(rms_bias[y] / len);
      rms_error[y]=Math.sqrt(rms_error[y] / len);
      rms_weight[y]=Math.sqrt(rms_weight[y] / len / l._previous._a.length);
      unstable=Double.isNaN(mean_activation[y]) || Double.isNaN(rms_activation[y]) || Double.isNaN(mean_bias[y])|| Double.isNaN(rms_bias[y])|| Double.isNaN(mean_weight[y])|| Double.isNaN(rms_weight[y])|| Double.isNaN(mean_error[y])|| Double.isNaN(rms_error[y]);
    }
  }
}
