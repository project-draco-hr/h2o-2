{
  super(selfKey,dataKey,fr);
  parameters=p;
  layers=ls;
  weights=new float[ls.length][];
  biases=new float[ls.length][];
  for (int y=1; y < layers.length; y++) {
    weights[y]=layers[y]._w;
    biases[y]=layers[y]._b;
  }
  if (parameters.diagnostics) {
    mean_bias=new double[ls.length];
    rms_bias=new double[ls.length];
    mean_weight=new double[ls.length];
    rms_weight=new double[ls.length];
    for (int y=1; y < layers.length - 1; y++) {
      final Layer l=layers[y];
      final int len=l._a.length;
      mean_bias[y]=rms_bias[y]=0;
      mean_weight[y]=rms_weight[y]=0;
      for (int u=0; u < len; u++) {
        mean_bias[y]+=biases[y][u];
        for (int i=0; i < l._previous._a.length; i++) {
          int w=u * l._previous._a.length + i;
          mean_weight[y]+=weights[y][w];
        }
      }
      mean_bias[y]/=len;
      mean_weight[y]/=len * l._previous._a.length;
      for (int u=0; u < len; ++u) {
        final double db=biases[y][u] - mean_bias[y];
        rms_bias[y]+=db * db;
        for (int i=0; i < l._previous._a.length; i++) {
          int w=u * l._previous._a.length + i;
          final double dw=weights[y][w] - mean_weight[y];
          rms_weight[y]+=dw * dw;
        }
      }
      rms_bias[y]=Math.sqrt(rms_bias[y] / len);
      rms_weight[y]=Math.sqrt(rms_weight[y] / len / l._previous._a.length);
      unstable|=Double.isNaN(mean_bias[y]) || Double.isNaN(rms_bias[y]) || Double.isNaN(mean_weight[y])|| Double.isNaN(rms_weight[y]);
    }
  }
  for (int y=1; y < layers.length - 1; y++) {
    unstable|=layers[y].unstable;
  }
}
