{
  Model M=_modelKey.value();
  double d[]=new double[M._va._cols.length];
  for (int i=0; i < d.length - 1; i++) {
    Argument arg=_arguments.get(i + 1);
    if (false)     ;
 else     if (arg instanceof FactorSelect)     d[i]=(Integer)arg.value();
 else     if (arg instanceof Real)     d[i]=(Double)arg.value();
 else     if (arg instanceof LongInt)     d[i]=(Long)arg.value();
 else     throw H2O.unimpl();
  }
  JsonObject res=new JsonObject();
  res.addProperty(MODEL_KEY,M._selfKey.toString());
  JsonArray rows=new JsonArray();
  JsonObject obj=new JsonObject();
  obj.addProperty(ROW,0);
  for (int i=0; i < d.length - 1; i++) {
    ValueArray.Column C=M._va._cols[i];
    obj.addProperty(C._name,C._domain == null ? (C.isFloat() ? Double.toString(d[i]) : Long.toString((long)d[i])) : C._domain[(int)d[i]]);
  }
  rows.add(obj);
  res.add(ROWS,rows);
  double response=M.score(d,null);
  res.addProperty(CLASS,response);
  Response r=Response.done(res);
  return r;
}
