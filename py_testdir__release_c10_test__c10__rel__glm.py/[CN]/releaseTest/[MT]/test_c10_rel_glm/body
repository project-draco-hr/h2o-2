def test_c10_rel_glm(self):
    print "Since the python is not necessarily run as user=0xcust..., can't use a  schema='put' here"
    print 'Want to be able to run python as jenkins'
    print "I guess for big 0xcust files, we don't need schema='put'"
    print 'For files that we want to put (for testing put), we can get non-private files'
    importFolderPath = '/mnt/0xcustomer-datasets/c3'
    csvFilename = 'classification1Train.txt'
    csvPathname = ((importFolderPath + '/') + csvFilename)
    start = time.time()
    parseResult = h2i.import_parse(path=csvPathname, schema='local', timeoutSecs=500, doSummary=False)
    print 'Parse of', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
    print csvFilename, 'parse time:', parseResult['response']['time']
    print "Parse result['destination_key']:", parseResult['destination_key']
    start = time.time()
    inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], timeoutSecs=500)
    print 'Inspect:', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
    h2o_cmd.infoFromInspect(inspect, csvPathname)
    summaryResult = h2o_cmd.runSummary(key=parseResult['destination_key'])
    h2o_cmd.infoFromSummary(summaryResult, noPrint=False)
    x = [6, 7, 8, 10, 12, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70]
    y = 0
    keepPattern = None
    y = 0
    print 'y:', y
    x = h2o_glm.goodXFromColumnInfo(y, keepPattern=keepPattern, key=parseResult['destination_key'], timeoutSecs=300)
    print 'x:', x
    kwargs = {'x': None, 'y': y, 'family': 'binomial', 'lambda': 1e-05, 'alpha': 0.5, 'max_iter': 4, 'thresholds': 0.5, 'n_folds': 1, 'weight': 100, 'beta_epsilon': 0.0001, }
    timeoutSecs = 3600
    start = time.time()
    glm = h2o_cmd.runGLM(parseResult=parseResult, timeoutSecs=timeoutSecs, pollTimeoutSecs=60, **kwargs)
    elapsed = (time.time() - start)
    print 'glm completed in', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
    h2o_glm.simpleCheckGLM(self, glm, None, **kwargs)
    GLMModel = glm['GLMModel']
    modelKey = GLMModel['model_key']
    csvFilename = 'classification1Test.txt'
    csvPathname = ((importFolderPath + '/') + csvFilename)
    parseResult = h2i.import_parse(path=csvPathname, schema='local', timeoutSecs=500, doSummary=False)
    print 'Parse of', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
    start = time.time()
    glmScore = h2o_cmd.runGLMScore(key=parseResult['destination_key'], model_key=modelKey, thresholds='0.5', timeoutSecs=timeoutSecs)
    print 'glmScore end on ', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
