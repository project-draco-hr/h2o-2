def test_GBM_many_cols(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    if localhost:
        tryList = [(10000, 100, 'cA', 300)]
    else:
        tryList = [(10000, 100, 'cD', 300), (10000, 200, 'cE', 300), (10000, 300, 'cF', 300), (10000, 400, 'cG', 300), (10000, 500, 'cH', 300), (10000, 1000, 'cI', 300)]
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + 'binary') + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print 'Creating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        h2o.beta_features = False
        start = time.time()
        xList = []
        eList = []
        fList = []
        h2o.beta_features = False
        modelKey = 'GBMModelKey'
        if h2o.beta_features:
            print 'Parsing to fvec directly! Have to noPoll=true!, and doSummary=False!'
        parseTrainResult = h2i.import_parse(bucket=None, path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=timeoutSecs, noPoll=h2o.beta_features, doSummary=False)
        if h2o.beta_features:
            h2j.pollWaitJobs(timeoutSecs=timeoutSecs, pollTimeoutSecs=timeoutSecs)
            print "Filling in the parseTrainResult['destination_key'] for h2o"
            parseTrainResult['destination_key'] = trainKey
        elapsed = (time.time() - start)
        print 'train parse end on ', csvPathname, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'train parse result:', parseTrainResult['destination_key']
        algo = 'Parse'
        l = '{:d} jvms, {:d}GB heap, {:s} {:s} {:6.2f} secs'.format(len(h2o.nodes), h2o.nodes[0].java_heap_GB, algo, csvFilename, elapsed)
        print l
        h2o.cloudPerfH2O.message(l)
        inspect = h2o_cmd.runInspect(key=parseTrainResult['destination_key'])
        print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
        num_rows = inspect['num_rows']
        num_cols = inspect['num_cols']
        h2o.beta_features = True
        ntrees = 100
        for max_depth in [5, 10, 20, 40]:
            params = {'learn_rate': 0.2, 'nbins': 1024, 'ntrees': ntrees, 'max_depth': max_depth, 'min_rows': 10, 'response': (num_cols - 1), }
            print 'Using these parameters for GBM: ', params
            kwargs = params.copy()
            h2o.beta_features = True
            trainStart = time.time()
            gbmTrainResult = h2o_cmd.runGBM(parseResult=parseTrainResult, noPoll=h2o.beta_features, timeoutSecs=timeoutSecs, destination_key=modelKey, **kwargs)
            if h2o.beta_features:
                h2j.pollWaitJobs(timeoutSecs=timeoutSecs, pollTimeoutSecs=timeoutSecs)
            trainElapsed = (time.time() - trainStart)
            print 'GBM training completed in', trainElapsed, 'seconds. On dataset: ', csvPathname
            algo = (((('GBM ' + ' ntrees=') + str(ntrees)) + ' max_depth=') + str(max_depth))
            l = '{:d} jvms, {:d}GB heap, {:s} {:s} {:6.2f} secs'.format(len(h2o.nodes), h2o.nodes[0].java_heap_GB, algo, csvFilename, trainElapsed)
            print l
            h2o.cloudPerfH2O.message(l)
            gbmTrainView = h2o_cmd.runGBMView(model_key=modelKey)
            errsLast = gbmTrainView['gbm_model']['errs'][(-1)]
            print "GBM 'errsLast'", errsLast
            cm = gbmTrainView['gbm_model']['cm']
            pctWrongTrain = h2o_gbm.pp_cm_summary(cm)
            print 'Last line of this cm might be NAs, not CM'
            print '\nTrain\n==========\n'
            print h2o_gbm.pp_cm(cm)
            xList.append(max_depth)
            eList.append(pctWrongTrain)
            fList.append(trainElapsed)
    h2o.beta_features = False
    if (1 == 1):
        xLabel = 'max_depth'
        eLabel = 'pctWrong'
        fLabel = 'trainElapsed'
        eListTitle = ''
        fListTitle = ''
        h2o_gbm.plotLists(xList, xLabel, eListTitle, eList, eLabel, fListTitle, fList, fLabel)
