{
  try {
    InputStream is=new BufferedInputStream(mySocket.getInputStream());
    is.mark(8192);
    int bufsize=8192;
    byte[] buf=new byte[bufsize];
    int rlen=0;
    while (true) {
      int b=is.read();
      if (b == -1)       return;
      buf[rlen++]=(byte)b;
      if (b == '\n')       break;
    }
    ByteArrayInputStream hbis=new ByteArrayInputStream(buf,0,rlen);
    BufferedReader hin=new BufferedReader(new InputStreamReader(hbis));
    Properties pre=new Properties();
    Properties parms=new Properties();
    Properties header=new Properties();
    decodeHeader(hin,pre,parms,header);
    String method=pre.getProperty("method");
    String uri=pre.getProperty("uri");
    long size=0x7FFFFFFFFFFFFFFFl;
    String contentLength=header.getProperty("content-length");
    if (contentLength != null) {
      try {
        size=Integer.parseInt(contentLength);
      }
 catch (      NumberFormatException ex) {
      }
    }
    int splitbyte=0;
    boolean sbfound=false;
    while (splitbyte < rlen) {
      if (buf[splitbyte] == '\r' && buf[++splitbyte] == '\n' && buf[++splitbyte] == '\r' && buf[++splitbyte] == '\n') {
        sbfound=true;
        break;
      }
      splitbyte++;
    }
    splitbyte++;
    is.reset();
    is.skip(splitbyte);
    if (splitbyte < rlen)     size-=rlen - splitbyte + 1;
 else     if (!sbfound || size == 0x7FFFFFFFFFFFFFFFl)     size=0;
    BufferedReader in=new BufferedReader(new InputStreamReader(is));
    if (method.equalsIgnoreCase("POST")) {
      String contentType="";
      String contentTypeHeader=header.getProperty("content-type");
      if (contentTypeHeader == null)       contentTypeHeader="";
      StringTokenizer st=new StringTokenizer(contentTypeHeader,"; ");
      if (st.hasMoreTokens()) {
        contentType=st.nextToken();
      }
      if (contentType.equalsIgnoreCase("multipart/form-data")) {
        if (!st.hasMoreTokens())         sendError(HTTP_BADREQUEST,"BAD REQUEST: Content type is multipart/form-data but boundary missing. Usage: GET /example/file.html");
        String boundaryExp=st.nextToken();
        st=new StringTokenizer(boundaryExp,"=");
        if (st.countTokens() != 2)         sendError(HTTP_BADREQUEST,"BAD REQUEST: Content type is multipart/form-data but boundary syntax error. Usage: GET /example/file.html");
        st.nextToken();
        String boundary=st.nextToken();
        fileUpload(boundary,is,parms);
      }
 else {
        String postLine="";
        char pbuf[]=new char[512];
        if (is.available() != 0) {
          int read=in.read(pbuf);
          while (read >= 0 && !postLine.endsWith("\r\n")) {
            postLine+=String.valueOf(pbuf,0,read);
            if (!in.ready())             break;
            read=in.read(pbuf);
          }
          postLine=postLine.trim();
          decodeParms(postLine,parms);
        }
      }
    }
    Response r=serve(uri,method,header,parms);
    if (r == null)     sendError(HTTP_INTERNALERROR,"SERVER INTERNAL ERROR: Serve() returned a null response.");
 else     sendResponse(r.status,r.mimeType,r.header,r.data);
    in.close();
    is.close();
  }
 catch (  IOException ioe) {
    try {
      sendError(HTTP_INTERNALERROR,"SERVER INTERNAL ERROR: IOException: " + ioe.getMessage());
    }
 catch (    Throwable t) {
    }
  }
catch (  InterruptedException ie) {
  }
 finally {
    Utils.close(mySocket);
  }
}
