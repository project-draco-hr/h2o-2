def test_GLM2_lambda_search(self):
    h2o.beta_features = True
    csvPathname = 'covtype/covtype.20k.data'
    parseResult = h2i.import_parse(bucket='smalldata', path=csvPathname, schema='put', hex_key='covtype.20k')
    CLASS = 1
    execExpr = ('B.hex=%s; B.hex[,%s]=(B.hex[,%s]==%s)' % ('covtype.20k', (54 + 1), (54 + 1), CLASS))
    h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
    paramDict = define_params()
    for trial in range(8):
        params = {}
        colX = h2o_glm.pickRandGlmParams(paramDict, params)
        params = {'response': 54, 'alpha': 0.1, 'max_iter': 8, 'lambda': None, 'lambda_search': 1, 'n_folds': 1, }
        kwargs = params.copy()
        if (('family' not in kwargs) or (kwargs['family'] == 'binomial')):
            bHack = {'destination_key': 'B.hex', }
        else:
            bHack = parseResult
        start = time.time()
        glm = h2o_cmd.runGLM(timeoutSecs=300, parseResult=bHack, **kwargs)
        h2o_glm.simpleCheckGLM(self, glm, None, **kwargs)
        h2o.check_sandbox_for_errors()
        print 'glm end on ', csvPathname, 'took', (time.time() - start), 'seconds'
        print 'Trial #', trial, 'completed\n'
