{
  final ValueArray va=_source.value();
  final Key source=va._key;
  final int k=_k.value();
  final double epsilon=_epsilon.value();
  final int[] cols=_columns.value();
  Key dest=_dest.value();
  if (dest == null) {
    String n=source.toString();
    int dot=n.lastIndexOf('.');
    if (dot > 0)     n=n.substring(0,dot);
    dest=Key.make(hex.KMeans.KMeansModel.KEY_PREFIX + n + ".kmeans");
  }
  try {
    final Key dest_=dest;
    UKV.put(dest,new hex.KMeans.KMeansModel());
    H2O.FJP_NORM.submit(new CountedCompleter(){
      @Override public void compute(){
        hex.KMeans.run(dest_,va,k,epsilon,cols);
        tryComplete();
      }
      @Override public boolean onExceptionalCompletion(      Throwable ex,      CountedCompleter caller){
        ex.printStackTrace();
        return true;
      }
    }
);
    JsonObject response=new JsonObject();
    response.addProperty(DEST_KEY,dest.toString());
    Response r=KMeansProgress.redirect(response,dest);
    r.setBuilder(DEST_KEY,new KeyElementBuilder());
    return r;
  }
 catch (  IllegalArgumentException e) {
    return Response.error(e.getMessage());
  }
catch (  Error e) {
    return Response.error(e.getMessage());
  }
}
