def test_GLM_mnist_reals(self):
    importFolderPath = 'mnist'
    csvFilelist = [('mnist_reals_training.csv.gz', 'mnist_reals_testing.csv.gz', 600)]
    trial = 0
    for (trainCsvFilename, testCsvFilename, timeoutSecs) in csvFilelist:
        trialStart = time.time()
        csvPathname = ((importFolderPath + '/') + testCsvFilename)
        testKey = (((testCsvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        parseResult = h2i.import_parse(path=csvPathname, schema='hdfs', hex_key=testKey, key2=testKey, timeoutSecs=timeoutSecs)
        elapsed = (time.time() - start)
        print 'parse end on ', testCsvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseResult['destination_key']
        print "We won't use this pruning of x on test data. See if it prunes the same as the training"
        y = 0
        print 'y:'
        x = h2o_glm.goodXFromColumnInfo(y, key=parseResult['destination_key'], timeoutSecs=300)
        trainKey = (((trainCsvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        csvPathname = ((importFolderPath + '/') + trainCsvFilename)
        parseResult = h2i.import_parse(path=csvPathname, schema='hdfs', hex_key=trainKey, key2=trainKey, timeoutSecs=timeoutSecs)
        elapsed = (time.time() - start)
        print 'parse end on ', trainCsvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseResult['destination_key']
        print "This is the pruned x we'll use"
        x = h2o_glm.goodXFromColumnInfo(y, key=parseResult['destination_key'], timeoutSecs=300)
        print 'x:', x
        params = {'x': x, 'y': y, 'case_mode': '=', 'case': 0, 'family': 'binomial', 'lambda': 1e-05, 'alpha': 0.0, 'max_iter': 5, 'thresholds': 0.5, 'n_folds': 1, 'weight': 1, 'beta_epsilon': 0.0001, }
        for c in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
            kwargs = params.copy()
            print 'Trying binomial with case:', c
            kwargs['case'] = c
            timeoutSecs = 1800
            start = time.time()
            glm = h2o_cmd.runGLM(parseResult=parseResult, timeoutSecs=timeoutSecs, pollTimeoutsecs=60, **kwargs)
            elapsed = (time.time() - start)
            print 'GLM completed in', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
            h2o_glm.simpleCheckGLM(self, glm, None, noPrint=True, **kwargs)
            GLMModel = glm['GLMModel']
            modelKey = GLMModel['model_key']
            start = time.time()
            glmScore = h2o_cmd.runGLMScore(key=testKey, model_key=modelKey, thresholds='0.5', timeoutSecs=60)
            elapsed = (time.time() - start)
            print 'GLMScore in', elapsed, 'secs', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
            h2o_glm.simpleCheckGLMScore(self, glmScore, **kwargs)
