def test_parse_bad_30rows(self):
    h2o.beta_features = False
    SYNDATASETS_DIR = h2o.make_syn_dir()
    csvPathname = (SYNDATASETS_DIR + '/bad.data')
    dsf = open(csvPathname, 'w+')
    dsf.write(datalines)
    dsf.close()
    for i in range(5):
        parseResult = h2i.import_parse(path=csvPathname, schema='put', single_quotes=1, hex_key=(('trial' + str(i)) + '.hex'))
        inspect = h2o_cmd.runInspect(key=parseResult['destination_key'])
        print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
        num_rows = inspect['num_rows']
        num_cols = inspect['num_cols']
        row0 = inspect['rows'][0]
        self.assertEqual(row0['row'], 0, "'row' is supposed to say row 0")
        del row0['row']
        row1 = inspect['rows'][1]
        self.assertEqual(row1['row'], 1, "'row' is supposed to say row 0")
        del row1['row']
        print 'row0', row0
        for name in row0:
            value = row0[name]
            print value
            if (('\\u0027' in value) or ("'" in value)):
                raise Exception(('Row 0. not stripped single quote or "\\u0027" in the parsed row value %s' % value))
            value = row1[name]
            if (('\\u0027' in value) or ("'" in value)):
                raise Exception(('Row 1. not stripped single quote or "\\u0027" in the parsed row value %s' % value))
            if (('C1' in name) or ('C2' in name) or ('C3' in name) or ('C4' in name)):
                raise Exception(("Row 0. %s is the name of a col, means header wasn't deduced" % name))
        self.assertEqual(num_cols, 4, ('Parsed wrong number of cols: %s' % num_cols))
        self.assertNotEqual(num_rows, 30, ("Parsed wrong number of rows. Should be 29.                 Didn't deduce header?: %s" % num_rows))
        self.assertEqual(num_rows, 29, ('Parsed wrong number of rows: %s' % num_rows))
