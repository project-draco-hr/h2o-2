def test_GBMScore(self):
    importFolderPath = 'standard'
    csvTrainPath = (importFolderPath + '/allyears2k.csv')
    csvTestPath = csvTrainPath
    trainhex = 'train.hex'
    testhex = 'test.hex'
    parseTrainResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvTrainPath, schema='local', hex_key=trainhex, timeoutSecs=2400, doSummary=False)
    parseTestResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvTestPath, schema='local', hex_key=testhex, timeoutSecs=2400, doSummary=False)
    inspect_test = h2o.nodes[0].inspect(testhex, timeoutSecs=8000)
    response = 'IsDepDelayed'
    ignored_cols = 'DepTime,ArrTime,FlightNum,TailNum,ActualElapsedTime,AirTime,ArrDelay,DepDelay,TaxiIn,TaxiOut,Cancelled,CancellationCode,Diverted,CarrierDelay,WeatherDelay,NASDelay,SecurityDelay,LateAircraftDelay,IsArrDelayed'
    params = {'destination_key': 'GBMScore', 'response': response, 'ignored_cols_by_name': ignored_cols, 'classification': 1, 'validation': None, 'ntrees': 100, 'max_depth': 10, 'learn_rate': 5e-05, }
    parseResult = {'destination_key': trainhex, }
    kwargs = params.copy()
    gbm = h2o_cmd.runGBM(parseResult=parseResult, timeoutSecs=4800, **kwargs)
    scoreStart = time.time()
    h2o.nodes[0].generate_predictions(model_key='GBMScore', data_key=trainhex)
    scoreElapsed = (time.time() - scoreStart)
    print 'It took ', scoreElapsed, ' seconds to score ', inspect_test['numRows'], ' rows. Using a GBM with 100 10-deep trees.'
    print "That's ", ((1.0 * scoreElapsed) / 100.0), ' seconds per 10-deep tree.'
