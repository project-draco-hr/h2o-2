def test_rebalance_int2enum(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(100000, 30, 'cC', 100)]
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + str(SEEDPERFILE)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print '\nCreating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=20)
        hex_key = parseResult['destination_key']
        inspect = h2o_cmd.runInspect(key=hex_key)
        print ('\n' + csvFilename)
        print 'Rebalancing it to create an artificially large # of chunks'
        rb_key = ('rb_%s' % hex_key)
        start = time.time()
        print ('Rebalancing %s to %s with %s chunks' % (hex_key, rb_key, REBALANCE_CHUNKS))
        rebalanceResult = h2o.nodes[0].rebalance(source=hex_key, after=rb_key, chunks=REBALANCE_CHUNKS)
        elapsed = (time.time() - start)
        print 'rebalance end on ', csvFilename, 'took', elapsed, 'seconds',
        print ('Now doing to_enum across all columns of %s' % hex_key)
        for column_index in range(colCount):
            result = h2o.nodes[0].to_enum(None, src_key=hex_key, column_index=(column_index + 1))
            summaryResult = h2o_cmd.runSummary(key=hex_key)
            column = summaryResult['summaries'][column_index]
            colname = column['colname']
            coltype = column['type']
            nacnt = column['nacnt']
            stats = column['stats']
            stattype = stats['type']
            cardinality = stats['cardinality']
            if (stattype != 'Enum'):
                raise Exception("column %s, which has name %s, didn't convert to Enum, is %s %s"(column_index, colname, stattype, coltype))
            if (nacnt != 0):
                raise Exception('column %s, which has name %s, somehow got NAs after convert to Enum  %s'(column_index, colname, nacnt))
            if (cardinality != 4):
                raise Exception('column %s, which has name %s,  should have cardinality 4, got: %s'(column_index, colname, cardinality))
            h2o_cmd.infoFromSummary(summaryResult)
