def test_summary2_unifiles(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [('runif.csv', 'x.hex', [('', 1.0, 5002.0, 10002.0, 15002.0, 20000.0), ('D', (-5000.0), (-3731.95), (-2445.89), (-1185.58), 99.9), ('E', (-99997.52), (-49086.55), 1613.54, 50737.49, 99995.68), ('F', (-1.0), (-0.49), 0.01, 0.5, 1.0)], ['string', 'float', 'float', 'float']), ('runifA.csv', 'A.hex', [('', 1.0, 26.51, 52.0, 77.0, 100.0), ('x', (-99.72), (-39.38), 4.62, 54.96, 91.73)], ['string', 'float']), ('runifB.csv', 'B.hex', [('', 1.0, 2502.0, 5002.0, 7502.0, 10000.0), ('x', (-100.0), (-50.26), 0.85, 51.26, 99.97)], ['string', 'float']), ('runifC.csv', 'C.hex', [('', 1.0, 25002.0, 50002.0, 75002.0, 100000.0), ('x', (-100.0), (-50.45), (-1.18), 49.28, 100.0)], ['string', 'float'])]
    timeoutSecs = 10
    trial = 1
    n = h2o.nodes[0]
    lenNodes = len(h2o.nodes)
    x = 0
    timeoutSecs = 60
    for (csvFilename, hex_key, expectedCols, dtype) in tryList:
        h2o.beta_features = False
        csvPathname = csvFilename
        parseResult = h2i.import_parse(bucket='smalldata', path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=10, doSummary=False)
        print csvFilename, 'parse time:', parseResult['response']['time']
        print "Parse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvFilename)
        numRows = inspect['num_rows']
        numCols = inspect['num_cols']
        h2o.beta_features = True
        summaryResult = h2o_cmd.runSummary(key=hex_key)
        h2o.verboseprint('summaryResult:', h2o.dump_json(summaryResult))
        summaries = summaryResult['summaries']
        for (expected, column) in zip(expectedCols, summaries):
            colname = column['colname']
            self.assertEqual(colname, expected[0])
            coltype = column['type']
            nacnt = column['nacnt']
            stats = column['stats']
            stattype = stats['type']
            mean = stats['mean']
            sd = stats['sd']
            print 'colname:', colname, 'mean (2 places): %s', twoDecimals(mean)
            print 'colname:', colname, 'std dev. (2 places): %s', twoDecimals(sd)
            zeros = stats['zeros']
            mins = stats['mins']
            h2o_util.assertApproxEqual(mins[0], expected[1], tol=0.01, msg='min is not approx. expected')
            maxs = stats['maxs']
            h2o_util.assertApproxEqual(maxs[0], expected[5], tol=0.01, msg='max is not approx. expected')
            pct = stats['pct']
            expectedPct = [0.01, 0.05, 0.1, 0.25, 0.33, 0.5, 0.66, 0.75, 0.9, 0.95, 0.99]
            pctile = stats['pctile']
            h2o_util.assertApproxEqual(pctile[3], expected[2], tol=0.01, msg='25th percentile is not approx. expected')
            h2o_util.assertApproxEqual(pctile[5], expected[3], tol=0.01, msg='50th percentile (median) is not approx. expected')
            h2o_util.assertApproxEqual(pctile[7], expected[4], tol=0.01, msg='75th percentile is not approx. expected')
            hstart = column['hstart']
            hstep = column['hstep']
            hbrk = column['hbrk']
            hcnt = column['hcnt']
            print 'pct:', pct
            print ''
            for b in hcnt:
                e = (0.1 * numRows)
            pt = twoDecimals(pctile)
            mx = twoDecimals(maxs)
            mn = twoDecimals(mins)
            print 'colname:', colname, 'pctile (2 places):', pt
            print 'colname:', colname, 'maxs: (2 places):', mx
            print 'colname:', colname, 'mins: (2 places):', mn
            compareActual = (mn[0], pt[3], pt[5], pt[7], mx[0])
            print 'min/25/50/75/max colname:', colname, '(2 places):', compareActual
            print 'maxs colname:', colname, '(2 places):', mx
            print 'mins colname:', colname, '(2 places):', mn
        trial += 1
        if DO_TRY_SCIPY:
            csvPathname1 = h2i.find_folder_and_filename('smalldata', csvPathname, returnFullPath=True)
            generate_scipy_comparison(csvPathname1, dtype=dtype)
