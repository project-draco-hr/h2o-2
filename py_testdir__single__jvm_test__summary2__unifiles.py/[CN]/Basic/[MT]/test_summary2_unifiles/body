def test_summary2_unifiles(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [('cars.csv', 'c.hex', [(None, None, None, None, None, None), ('economy (mpg)', None, None, None, None, None), ('cylinders', None, None, None, None, None)]), ('runifA.csv', 'A.hex', [(None, 1.0, 25.0, 50.0, 75.0, 100.0), ('x', (-99.9), (-44.7), 8.26, 58.0, 91.7)]), ('runif.csv', 'x.hex', [(None, 1.0, 5000.0, 10000.0, 15000.0, 20000.0), ('D', (-5000.0), (-3735.0), (-2443), (-1187.0), 99.8), ('E', (-100000.0), (-49208.0), 1783.8, 50621.9, 100000.0), ('F', (-1.0), (-0.4886), 0.00868, 0.5048, 1.0)]), ('runifB.csv', 'B.hex', [(None, 1.0, 2501.0, 5001.0, 7501.0, 10000.0), ('x', (-100.0), (-50.1), 0.974, 51.7, 100, 0)]), ('runifC.csv', 'C.hex', [(None, 1.0, 25002.0, 50002.0, 75002.0, 100000.0), ('x', (-100.0), (-50.45), (-1.135), 49.28, 100.0)])]
    timeoutSecs = 15
    trial = 1
    n = h2o.nodes[0]
    lenNodes = len(h2o.nodes)
    timeoutSecs = 60
    for (csvFilename, hex_key, expectedCols) in tryList:
        csvPathname = csvFilename
        csvPathnameFull = h2i.find_folder_and_filename('smalldata', csvPathname, returnFullPath=True)
        parseResult = h2i.import_parse(bucket='smalldata', path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=10, doSummary=False)
        print "Parse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvFilename)
        numRows = inspect['numRows']
        numCols = inspect['numCols']
        summaryResult = h2o_cmd.runSummary(key=hex_key, max_qbins=MAX_QBINS)
        h2o.verboseprint('summaryResult:', h2o.dump_json(summaryResult))
        summaries = summaryResult['summaries']
        scipyCol = 0
        for (expected, column) in zip(expectedCols, summaries):
            colname = column['colname']
            if expected[0]:
                (self.assertEqual(colname, expected[0]), colname, expected[0])
            else:
                scipyCol += 1
                continue
            quantile = (0.5 if DO_MEDIAN else 0.999)
            q = h2o.nodes[0].quantiles(source_key=hex_key, column=column['colname'], quantile=quantile, max_qbins=MAX_QBINS, multiple_pass=2, interpolation_type=7)
            qresult = q['result']
            qresult_single = q['result_single']
            h2p.blue_print('h2o quantiles result:', qresult)
            h2p.blue_print('h2o quantiles result_single:', qresult_single)
            h2p.blue_print('h2o quantiles iterations:', q['iterations'])
            h2p.blue_print('h2o quantiles interpolated:', q['interpolated'])
            print h2o.dump_json(q)
            coltype = column['type']
            nacnt = column['nacnt']
            stats = column['stats']
            stattype = stats['type']
            print stattype
            if (stattype != 'Enum'):
                mean = stats['mean']
                sd = stats['sd']
                zeros = stats['zeros']
                mins = stats['mins']
                maxs = stats['maxs']
                print 'colname:', colname, 'mean (2 places):', h2o_util.twoDecimals(mean)
                print 'colname:', colname, 'std dev. (2 places):', h2o_util.twoDecimals(sd)
                pct = stats['pct']
                print 'pct:', pct
                print ''
                expectedPct = [0.01, 0.05, 0.1, 0.25, 0.33, 0.5, 0.66, 0.75, 0.9, 0.95, 0.99]
                pctile = stats['pctile']
            if (expected[1] and expected[5]):
                expectedRange = (expected[5] - expected[1])
                expectedBin = (expectedRange / (MAX_QBINS - 2))
                maxErr = (0.5 * expectedBin)
            else:
                print "Test won't calculate max expected error"
                maxErr = 0
            if expected[1]:
                h2o_util.assertApproxEqual(mins[0], expected[1], tol=maxErr, msg='min is not approx. expected')
            if expected[2]:
                h2o_util.assertApproxEqual(pctile[3], expected[2], tol=maxErr, msg='25th percentile is not approx. expected')
            if expected[3]:
                h2o_util.assertApproxEqual(pctile[5], expected[3], tol=maxErr, msg='50th percentile (median) is not approx. expected')
            if expected[4]:
                h2o_util.assertApproxEqual(pctile[7], expected[4], tol=maxErr, msg='75th percentile is not approx. expected')
            if expected[5]:
                h2o_util.assertApproxEqual(maxs[0], expected[5], tol=maxErr, msg='max is not approx. expected')
            hstart = column['hstart']
            hstep = column['hstep']
            hbrk = column['hbrk']
            hcnt = column['hcnt']
            for b in hcnt:
                e = (0.1 * numRows)
            if (stattype != 'Enum'):
                pt = h2o_util.twoDecimals(pctile)
                print 'colname:', colname, 'pctile (2 places):', pt
                mx = h2o_util.twoDecimals(maxs)
                mn = h2o_util.twoDecimals(mins)
                print 'colname:', colname, 'maxs: (2 places):', mx
                print 'colname:', colname, 'mins: (2 places):', mn
                actual = (mn[0], pt[3], pt[5], pt[7], mx[0])
                print 'min/25/50/75/max colname:', colname, '(2 places):', actual
                print 'maxs colname:', colname, '(2 places):', mx
                print 'mins colname:', colname, '(2 places):', mn
                if ((colname != '') and expected[scipyCol]):
                    h2o_summ.quantile_comparisons(csvPathnameFull, skipHeader=True, col=scipyCol, datatype='float', quantile=(0.5 if DO_MEDIAN else 0.999), h2oSummary2=pctile[(5 if DO_MEDIAN else 10)], h2oQuantilesApprox=qresult_single, h2oQuantilesExact=qresult, h2oSummary2MaxErr=maxErr)
                    if (False and h2o_util.approxEqual(pctile[5], 0.990238116744, tol=0.002, msg='stop here')):
                        raise Exception('stopping to look')
            scipyCol += 1
        trial += 1
