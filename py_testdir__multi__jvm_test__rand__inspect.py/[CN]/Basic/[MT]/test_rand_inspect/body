def test_rand_inspect(self):
    h2b.browseTheCloud()
    csvFilename = 'covtype.data'
    csvPathname = ('UCI/UCI-large/covtype/' + csvFilename)
    hex_key = (csvFilename + '.hex')
    print ('\n' + csvPathname)
    parseResult = h2i.import_parse(bucket='datasets', path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=10)
    destination_key = parseResult['destination_key']
    print csvFilename, 'parse time:', parseResult['response']['time']
    print "Parse result['destination_key']:", destination_key

    def inspect_and_check(nodeX, destination_key, offset, view, inspectOld=None):
        inspectNew = h2o_cmd.runInspect(h2o.nodes[nodeX], destination_key, offset=offset, view=view)
        if h2o.beta_features:
            pass
        else:
            pass
        constantNames = [('num_cols', 'numCols'), ('num_rows', 'numRows'), ('value_size_bytes', 'byteSize'), ('cols', 'cols')]
        colNames = [('num_missing_values', 'naCnt')]
        for (i, j) in constantNames:
            if h2o.beta_features:
                if (not (j in inspectNew)):
                    raise Exception(("Can't find %s, Inspect2 result should have it?" % j))
                inspectNew[i] = inspectNew[j]
            if (inspectOld and (i != 'cols')):
                if (h2o.beta_features and (i == 'value_size_bytes')):
                    self.assertGreater(inspectOld[i], inspectNew[i])
                else:
                    self.assertEqual(inspectOld[i], inspectNew[i])
            if (i == 'cols'):
                for (m, n) in colNames:
                    if h2o.beta_features:
                        if (not (n in inspectNew[i][0])):
                            print h2o.dump_json(inspectNew[i][0])
                            raise Exception(("Can't find %s, Inspect2 result['cols'][0] should have it?" % n))
                        inspectNew[i][0][m] = inspectNew[i][0][n]
                    if (inspectOld is not None):
                        self.assertEqual(inspectOld[i][0][m], inspectNew[i][0][m])
        return inspectNew
    origInspect = inspect_and_check(0, destination_key, 0, 1, None)
    h2o.verboseprint(h2o.dump_json(origInspect))
    origStoreViewResult = h2o_cmd.runStoreView(offset=0, view=1024, timeoutSecs=60)
    num_rows = origInspect['num_rows']
    num_cols = origInspect['num_cols']
    lenNodes = len(h2o.nodes)
    for i in range(50):
        offset = good_choices(num_rows)
        view = good_choices(num_cols)
        nodeX = random.randint(0, (lenNodes - 1))
        print 'nodeX:', nodeX, 'offset:', offset, 'view:', view
        h2o.beta_features = False
        inspect_and_check(nodeX, destination_key, offset, view, origInspect)
        print 'trying Inspect2 by flipping h2o.nodes[0].beta_features'
        h2o.beta_features = True
        time.sleep(1)
        inspect_and_check(nodeX, destination_key, offset, view, origInspect)
        h2o.beta_features = False
        time.sleep(1)
        o = len(origStoreViewResult['keys'])
        trial = 0
        while ((trial == 0) or (o != p)):
            newStoreViewResult = h2o_cmd.runStoreView(offset=0, view=1024, timeoutSecs=60)
            p = len(newStoreViewResult['keys'])
            print 'number of keys in the two StoreViews, o:', o, 'p:', p
            self.assertEqual((o + 1), p, msg='One new autoframe should be in StoreView')
            if (trial == 10):
                raise Exception(("StoreView didn't get autoframe, after %s retries" % trial))
            deleted = h2i.delete_keys_at_all_nodes(pattern='autoframe')
            self.assertEqual(deleted, 2, msg='Should have deleted a total of 2 keys, looking at all nodes')
            time.sleep(1)
