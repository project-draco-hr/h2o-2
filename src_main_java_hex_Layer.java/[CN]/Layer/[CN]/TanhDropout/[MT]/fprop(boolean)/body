{
  for (int o=0; o < _a.length; o++) {
    _a[o]=0;
    for (int i=0; i < _previous._a.length; i++)     _a[o]+=_w[o * _previous._a.length + i] * _previous._a[i];
    _a[o]+=_b[o];
  }
  if (_bits == null) {
    _bits=new byte[(units + 7) / 8];
  }
  _rand.nextBytes(_bits);
  if (_previous.isInput() && training) {
    final double rate=((Input)_previous)._dropout_rate;
    for (int i=0; i < _previous._a.length; i++) {
      if (_rand.nextFloat() < rate)       _previous._a[i]=0;
    }
  }
  for (int o=0; o < _a.length; o++) {
    _a[o]=0;
    boolean b=(_bits[o / 8] & (1 << (o % 8))) != 0;
    if (!training || b) {
      for (int i=0; i < _previous._a.length; i++) {
        _a[o]+=_w[o * _previous._a.length + i] * _previous._a[i];
      }
      _a[o]+=_b[o];
      _a[o]=(float)Math.tanh(_a[o]);
      if (!training) {
        _a[o]*=.5f;
      }
    }
  }
}
