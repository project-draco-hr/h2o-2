{
  _a=new float[units];
  _e=new float[units];
  _in=ls[index - 1];
  if (weights) {
    _w=new float[units * _in.units];
    _b=new float[units];
    Random rand=new MersenneTwisterRNG(MersenneTwisterRNG.SEEDS);
    int count=Math.min(15,_in.units);
    float min=-1f, max=+1f;
    for (int o=0; o < units; o++) {
      for (int n=0; n < count; n++) {
        int i=rand.nextInt(_in.units);
        int w=o * _in.units + i;
        _w[w]=rand(rand,min,max);
      }
    }
  }
  if (_momentum != 0) {
    _wPrev=new float[_w.length];
    _bPrev=new float[_b.length];
    for (int i=0; i < _w.length; i++)     _wPrev[i]=_w[i];
    _wSpeed=new float[_w.length];
    _bSpeed=new float[_b.length];
  }
  if (_perWeight != 0) {
    _wInit=new float[_w.length];
    _wMult=new float[_w.length];
    for (int i=0; i < _w.length; i++) {
      _wInit[i]=_w[i];
      _wMult[i]=1;
    }
    _bInit=new float[_b.length];
    _bMult=new float[_b.length];
    for (int i=0; i < _b.length; i++) {
      _bInit[i]=_b[i];
      _bMult[i]=1;
    }
  }
  anneal(step);
}
