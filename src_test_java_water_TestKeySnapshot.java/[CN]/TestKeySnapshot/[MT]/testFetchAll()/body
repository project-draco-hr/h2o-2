{
  Key[] userKeys=new Key[200];
  Key[] systemKeys=new Key[200];
  int homeKeys=0;
  Futures fs=new Futures();
  try {
    for (int i=0; i < (userKeys.length >> 1); ++i) {
      DKV.put(userKeys[i]=Key.make("key" + i),new Utils.IcedInt(i),fs);
      if (userKeys[i].home())       ++homeKeys;
      systemKeys[i]=Key.makeSystem(Key.rand());
      DKV.put(systemKeys[i],new Value(systemKeys[i],new Utils.IcedInt(i)),fs);
    }
    for (int i=(userKeys.length >> 1); i < userKeys.length; ++i) {
      DKV.put(userKeys[i]=Key.make("key" + i),new Utils.IcedDouble(i),fs);
      if (userKeys[i].home())       ++homeKeys;
      systemKeys[i]=Key.makeSystem(Key.rand());
      DKV.put(systemKeys[i],new Value(systemKeys[i],new Utils.IcedDouble(i)),fs);
    }
    fs.blockForPending();
    H2O.KeySnapshot s=H2O.KeySnapshot.globalSnapshot();
    Map<String,Iced> all=s.fetchAll(Iced.class,true);
    Assert.assertTrue(all.isEmpty());
    all=s.fetchAll(Iced.class);
    Assert.assertEquals(userKeys.length,all.size());
    Map<String,Utils.IcedInt> ints=s.fetchAll(Utils.IcedInt.class);
    Map<String,Utils.IcedDouble> doubles=s.fetchAll(Utils.IcedDouble.class);
    Assert.assertEquals(userKeys.length >> 1,ints.size());
    Assert.assertEquals(userKeys.length >> 1,doubles.size());
  }
  finally {
    for (int i=0; i < userKeys.length; ++i) {
      if (userKeys[i] != null)       DKV.remove(userKeys[i],fs);
      if (systemKeys[i] != null)       DKV.remove(systemKeys[i],fs);
      fs.blockForPending();
    }
  }
}
