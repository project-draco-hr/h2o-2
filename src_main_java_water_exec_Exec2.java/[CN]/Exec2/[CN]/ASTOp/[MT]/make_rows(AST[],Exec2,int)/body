{
  if (args.length > 2)   throw H2O.unimpl();
  if (args.length == 1) {
    if (this instanceof ASTNrows || this instanceof ASTNcols) {
      ASTOp op=make(args,1,1);
      if (!op.isPure())       E.throwErr("nrows and ncols expressions cannot have side effects",x);
      return op;
    }
  }
  if (args.length == 2) {
    if (args[0]._rows != args[1]._rows) {
      if (args[0]._rows == 1)       args[0]=new ASTByRow(args[0],args[1]._rows);
 else       if (args[1]._rows == 1)       args[1]=new ASTByRow(args[1],args[0]._rows);
 else       E.throwErr("Mismatch rows: " + args[0]._rows + " and "+ args[1]._rows,x);
    }
    if (args[0]._cols != args[1]._cols) {
      if (args[0]._cols == 1)       args[0]=new ASTByCol(args[0],args[1]._cols);
 else       if (args[1]._cols == 1)       args[1]=new ASTByCol(args[1],args[0]._cols);
 else       E.throwErr("Mismatch cols: " + args[0]._cols + " and "+ args[1]._cols,x);
    }
    E.throwIfNotCompat(args[0],args[1],x);
  }
  return make(args,args[0]._cols,args[0]._rows);
}
