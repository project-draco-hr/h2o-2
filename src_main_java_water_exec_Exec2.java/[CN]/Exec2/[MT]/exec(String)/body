{
  cluster_init();
  ArrayList<ASTId> global=new ArrayList<ASTId>();
  ArrayList<Key> locked=new ArrayList<Key>();
  Env env=new Env(locked);
  final Key[] frameKeys=H2O.KeySnapshot.globalSnapshot().filter(new H2O.KVFilter(){
    @Override public boolean filter(    H2O.KeyInfo k){
      return k._type == TypeMap.FRAME;
    }
  }
).keys();
  for (  Key k : frameKeys) {
    Value val=DKV.get(k);
    if (val == null || !val.isFrame())     continue;
    Frame fr=val.get();
    String kstr=k.toString();
    try {
      env.push(fr,kstr);
      global.add(new ASTId(Type.ARY,kstr,0,global.size()));
      fr.read_lock(null);
      locked.add(fr._key);
    }
 catch (    Exception e) {
      Log.err("Exception while adding frame " + k + " to Exec env");
    }
  }
  global.add(new ASTId(Type.DBL,"T",0,global.size()));
  env.push(1.0);
  global.add(new ASTId(Type.DBL,"F",0,global.size()));
  env.push(0.0);
  global.add(new ASTId(Type.DBL,"NA",0,global.size()));
  env.push(Double.NaN);
  global.add(new ASTId(Type.DBL,"Inf",0,global.size()));
  env.push(Double.POSITIVE_INFINITY);
  try {
    int argcnt=global.size();
    Exec2 ex=new Exec2(str,global);
    AST ast=ex.parse();
    env.push(global.size() - argcnt);
    ast.exec(env);
    env.postWrite();
  }
 catch (  RuntimeException t) {
    env.remove_and_unlock();
    throw t;
  }
  return env;
}
