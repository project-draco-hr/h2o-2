{
  cluster_init();
  ArrayList<ASTId> global=new ArrayList<ASTId>();
  ArrayList<Key> locked=new ArrayList<Key>();
  Env env=new Env(locked);
  H2O.globalKeySet("water.fvec.Frame");
  H2O.globalKeySet("water.ValueArray");
  for (  Key k : H2O.localKeySet()) {
    Value val=H2O.raw_get(k);
    if (val != null && val.isArray()) {
      Frame frAuto=ValueArray.asFrame(DKV.get(k));
      Frame fr2=new Frame(k,frAuto._names,frAuto.vecs());
      frAuto.remove(0,fr2.numCols());
      frAuto.delete();
      fr2.delete_and_lock(null).unlock(null);
      DKV.get(k);
    }
  }
  for (  Key k : H2O.localKeySet()) {
    if (!H2O.raw_get(k).isFrame())     continue;
    Frame fr=DKV.get(k).get();
    String kstr=k.toString();
    try {
      env.push(fr,kstr);
      global.add(new ASTId(Type.ARY,kstr,0,global.size()));
      fr.read_lock(null);
      locked.add(fr._key);
    }
 catch (    Exception e) {
      System.err.println("Exception while adding frame " + k + " to Exec env");
    }
  }
  global.add(new ASTId(Type.DBL,"T",0,global.size()));
  env.push(1.0);
  global.add(new ASTId(Type.DBL,"F",0,global.size()));
  env.push(0.0);
  global.add(new ASTId(Type.DBL,"NA",0,global.size()));
  env.push(Double.NaN);
  global.add(new ASTId(Type.DBL,"Inf",0,global.size()));
  env.push(Double.POSITIVE_INFINITY);
  try {
    int argcnt=global.size();
    Exec2 ex=new Exec2(str,global);
    AST ast=ex.parse();
    env.push(global.size() - argcnt);
    ast.exec(env);
    env.postWrite();
  }
 catch (  RuntimeException t) {
    env.remove_and_unlock();
    throw t;
  }
  return env;
}
