def test_KMeans_params_rand2_fvec(self):
    h2o.beta_features = True
    if localhost:
        csvFilenameList = [('covtype.data', 800)]
    else:
        csvFilenameList = [('covtype.data', 800)]
    importFolderPath = 'standard'
    for (csvFilename, timeoutSecs) in csvFilenameList:
        csvPathname = ((importFolderPath + '/') + csvFilename)
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, timeoutSecs=2000, pollTimeoutSecs=60)
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvPathname), '    numRows:', '{:,}'.format(inspect['numRows']), '    numCols:', '{:,}'.format(inspect['numCols'])
        paramDict = define_params(SEED)
        for trial in range(3):
            params = {'max_iter': 20, 'k': 1, 'destination_key': (((csvFilename + '_') + str(trial)) + '.hex'), }
            h2o_kmeans.pickRandKMeansParams(paramDict, params)
            kwargs = params.copy()
            start = time.time()
            kmeans = h2o_cmd.runKMeans(parseResult=parseResult, timeoutSecs=timeoutSecs, retryDelaySecs=2, pollTimeoutSecs=60, **kwargs)
            elapsed = (time.time() - start)
            print 'kmeans end on ', csvPathname, 'took', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
            h2o_kmeans.simpleCheckKMeans(self, kmeans, **kwargs)
            print 'Trial #', trial, 'completed\n'
