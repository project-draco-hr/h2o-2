def make_datasetgz_and_parse(SYNDATASETS_DIR, csvFilename, key2, rowCount, colCount, FILEREPL, SEEDPERFILE, timeoutSecs):
    csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
    print 'Creating random', csvPathname
    write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
    csvFilenamegz = (csvFilename + '.gz')
    csvPathnamegz = ((SYNDATASETS_DIR + '/') + csvFilenamegz)
    h2o_util.file_gzip(csvPathname, csvPathnamegz)
    csvFilenameReplgz = (((csvFilename + '_') + str(FILEREPL)) + 'x.gz')
    csvPathnameReplgz = ((SYNDATASETS_DIR + '/') + csvFilenameReplgz)
    print 'Replicating', csvFilenamegz, 'into', csvFilenameReplgz
    start = time.time()
    h2o_util.file_cat(csvPathnamegz, csvPathnamegz, csvPathnameReplgz)
    totalRows = (2 * rowCount)
    for i in range((FILEREPL - 2)):
        h2o_util.file_append(csvPathnamegz, csvPathnameReplgz)
        totalRows += rowCount
    print 'Replication took:', (time.time() - start), 'seconds'
    start = time.time()
    print 'Parse start:', csvPathnameReplgz
    doSummary = False
    parseKey = h2o_cmd.parseFile(None, csvPathnameReplgz, key2=key2, timeoutSecs=timeoutSecs, doSummary=doSummary)
    print csvFilenameReplgz, 'parse time:', parseKey['response']['time']
    if doSummary:
        algo = 'Parse and Summary:'
    else:
        algo = 'Parse:'
    print algo, parseKey['destination_key'], 'took', (time.time() - start), 'seconds'
    print 'Inspecting..'
    start = time.time()
    inspect = h2o_cmd.runInspect(None, parseKey['destination_key'], timeoutSecs=timeoutSecs)
    print 'Inspect:', parseKey['destination_key'], 'took', (time.time() - start), 'seconds'
    h2o_cmd.infoFromInspect(inspect, csvPathname)
    print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
    if (inspect['num_cols'] != (colCount + 1)):
        raise Exception(('parse created result with the wrong number of cols %s %s' % (inspect['num_cols'], colCount)))
    if (inspect['num_rows'] != totalRows):
        raise Exception(("parse created result with the wrong number of rows (header shouldn't count) %s %s" % (inspect['num_rows'], rowCount)))
    parseKey['python_source_key'] = csvFilenameReplgz
    parseKey['num_rows'] = inspect['num_rows']
    parseKey['num_cols'] = inspect['num_cols']
    parseKey['value_size_bytes'] = inspect['value_size_bytes']
    return parseKey
