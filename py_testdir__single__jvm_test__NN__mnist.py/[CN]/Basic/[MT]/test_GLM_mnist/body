def test_GLM_mnist(self):
    csvFilelist = [('mnist_training.csv.gz', 'mnist_testing.csv.gz', 600)]
    trial = 0
    for (trainCsvFilename, testCsvFilename, timeoutSecs) in csvFilelist:
        trialStart = time.time()
        testKey2 = (((testCsvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=('mnist/' + testCsvFilename), schema='put', hex_key=testKey2, timeoutSecs=timeoutSecs, noise=('StoreView', None))
        elapsed = (time.time() - start)
        print 'parse end on ', testCsvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseResult['destination_key']
        trainKey2 = (((trainCsvFilename + '_') + str(trial)) + '.hex')
        start = time.time()
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=('mnist/' + trainCsvFilename), schema='put', hex_key=trainKey2, timeoutSecs=timeoutSecs, noise=('StoreView', None))
        elapsed = (time.time() - start)
        print 'parse end on ', trainCsvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + trainCsvFilename), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
        response = (inspect['num_cols'] - 1)
        x = ','.join(map(str, range(response)))
        kwargs = {'response': 0, 'ignored_cols': None, 'classification': 1, 'validation': trainKey2, 'activation': 'Tanh', 'hidden': 500, 'rate': 0.01, 'l2': 0.0001, 'epochs': 2, 'destination_key': 'a.hex', }
        timeoutSecs = 600
        start = time.time()
        h2o.beta_features = True
        nnResult = h2o_cmd.runNNet(parseResult=parseResult, timeoutSecs=timeoutSecs, noPoll=True, **kwargs)
        h2o.beta_features = False
        print "Hack: neural net apparently doesn't support the right polling response yet?"
        h2o_jobs.pollWaitJobs(pattern=None, timeoutSecs=300, pollTimeoutSecs=10, retryDelaySecs=5)
        print 'FIX! need to add something that looks at the neural net result here?'
        print 'neural net end on ', trainCsvFilename, 'took', (time.time() - start), 'seconds'
        print 'nnResult:', h2o.dump_json(nnResult)
        if DO_SCORE:
            kwargs = {'max_rows': 0, 'response': 0, 'ignored_cols': None, 'cols': None, 'classification': 1, 'destination_key': 'b.hex', 'model': 'a.hex', }
            nnScoreResult = h2o_cmd.runNNetScore(key=parseResult['destination_key'], timeoutSecs=timeoutSecs, noPoll=True, **kwargs)
            h2o.beta_features = False
            print "Hack: neural net apparently doesn't support the right polling response yet?"
            h2o_jobs.pollWaitJobs(pattern=None, timeoutSecs=300, pollTimeoutSecs=10, retryDelaySecs=5)
            print 'neural net score end on ', trainCsvFilename, 'took', (time.time() - start), 'seconds'
            print 'nnScoreResult:', h2o.dump_json(nnScoreResult)
