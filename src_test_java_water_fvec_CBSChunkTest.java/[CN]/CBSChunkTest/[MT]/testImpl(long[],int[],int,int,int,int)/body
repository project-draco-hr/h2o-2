{
  AppendableVec av=mock(AppendableVec.class);
  Vec vv=mock(Vec.class);
  vv.setNAs(Double.NaN,Long.MIN_VALUE);
  when(av.close(any(Futures.class))).thenReturn(vv);
  NewChunk nc=new NewChunk(av,0);
  nc._ls=ls;
  nc._xs=xs;
  nc._len=ls.length;
  for (int i=0; i < ls.length; i++)   nc._naCnt+=nc.isNA(i) ? 1 : 0;
  assertEquals(expNA,nc._naCnt);
  Chunk cc=nc.compress();
  cc._vec=av.close(new Futures());
  assertTrue("Found chunk class " + cc.getClass() + " but expected "+ CBSChunk.class,CBSChunk.class.isInstance(cc));
  assertEquals(nc._len,cc._len);
  assertEquals(expGap,((CBSChunk)cc)._gap);
  assertEquals(expBpv,((CBSChunk)cc)._bpv);
  assertEquals(expClen,cc._mem.length - CBSChunk.OFF);
  for (int i=0; i < ls.length; i++)   assertEquals(xs[i] == 0 ? ls[i] : Long.MIN_VALUE,cc.at80(i));
}
