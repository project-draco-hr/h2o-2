{
  Frame predictions=score_model.score(frame,adapt);
  ConfusionMatrix cm=new ConfusionMatrix();
  AUC auc=null;
  HitRatio hr=null;
  double error=0.0d;
  if (score_model.isClassifier()) {
    auc=new AUC();
    error=score_model.calcError(frame,frame.vec(score_model.responseName()),predictions,predictions,"Prediction error:",true,20,cm,auc,hr);
  }
 else {
    error=score_model.calcError(frame,frame.vec(score_model.responseName()),predictions,predictions,"Prediction error:",true,20,cm,null,null);
  }
  Map metrics=new LinkedHashMap();
  metrics.put("model",score_model._key.toString());
  metrics.put("frame",frame._key.toString());
  metrics.put("error",error);
  metrics.put("cm",cm.toJSON());
  metrics.put("auc",auc.toJSON());
  metrics.put("hr",hr);
  Map resultsMap=new LinkedHashMap();
  resultsMap.put("metrics",metrics);
  String json=gson.toJson(resultsMap);
  JsonObject result=gson.fromJson(json,JsonElement.class).getAsJsonObject();
  return Response.done(result);
}
