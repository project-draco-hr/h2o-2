def test_summary_with_x_libsvm(self):
    h2o.beta_features = True
    print 'Empty rows except for the last, with all zeros for class. Single col at max'
    h2b.browseTheCloud()
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(100, 100, 'cA', 300), (100000, 100, 'cB', 300), (100, 10000, 'cC', 300)]
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = ('syn_%s_%s_%s.csv' % (SEEDPERFILE, rowCount, colCount))
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print 'Creating random', csvPathname
        (colNumberMax, synColSumDict) = write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=timeoutSecs, doSummary=False)
        print "Parse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], max_column_display=(colNumberMax + 1), timeoutSecs=timeoutSecs)
        numCols = inspect['numCols']
        numRows = inspect['numRows']
        self.assertEqual((colNumberMax + 1), numCols, msg=('generated %s cols (including output).  parsed to %s cols' % ((colNumberMax + 1), numCols)))
        self.assertEqual(rowCount, numRows, msg=('generated %s rows, parsed to %s rows' % (rowCount, numRows)))
        for x in range(numCols):
            print ('Doing summary with x=%s' % x)
            summaryResult = h2o_cmd.runSummary(key=hex_key, cols=x, timeoutSecs=timeoutSecs)
            colName = ('C' + str((x + 1)))
            print ('Doing summary with col name x=%s' % colName)
            summaryResult = h2o_cmd.runSummary(key=hex_key, cols=colName, timeoutSecs=timeoutSecs)
        print ('Doing and checking summary with no x=%s' % x)
        summaryResult = h2o_cmd.runSummary(key=hex_key, max_ncols=(colNumberMax + 1), timeoutSecs=timeoutSecs)
        h2o_cmd.infoFromSummary(summaryResult, noPrint=True)
