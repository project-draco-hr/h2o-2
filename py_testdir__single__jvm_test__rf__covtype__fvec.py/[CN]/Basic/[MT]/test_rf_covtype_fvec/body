def test_rf_covtype_fvec(self):
    importFolderPath = '/home/0xdiag/datasets/standard'
    csvFilename = 'covtype.data'
    csvPathname = ((importFolderPath + '/') + csvFilename)
    key2 = (csvFilename + '.hex')
    h2i.setupImportFolder(None, importFolderPath)
    print '\nUsing header=0 on the normal covtype.data'
    parseKey = h2i.parseImportFolderFile(None, csvFilename, importFolderPath, key2=key2, header=0, timeoutSecs=180)
    inspect = h2o_cmd.runInspect(None, parseKey['destination_key'])
    rfViewInitial = []
    for jobDispatch in range(1):
        kwargs = paramDict.copy()
        timeoutSecs = (30 + (kwargs['ntree'] * 20))
        start = time.time()
        kwargs['out_of_bag_error_estimate'] = 1
        kwargs['model_key'] = ('model_' + str(jobDispatch))
        rfResult = h2o_cmd.runRFOnly(parseKey=parseKey, timeoutSecs=timeoutSecs, noPoll=True, rfView=False, **kwargs)
        elapsed = (time.time() - start)
        print 'RF dispatch end on ', csvPathname, 'took', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
        print h2o.dump_json(rfResult)
        rfView = {}
        rfView['data_key'] = key2
        rfView['model_key'] = kwargs['model_key']
        rfView['ntree'] = kwargs['ntree']
        rfViewInitial.append(rfView)
        print 'rf job dispatch end on ', csvPathname, 'took', (time.time() - start), 'seconds'
        print '\njobDispatch #', jobDispatch
        h2o_jobs.pollWaitJobs(pattern='RF_model', timeoutSecs=180, pollTimeoutSecs=120, retryDelaySecs=5)
    print 'rfViewInitial', rfViewInitial
    for rfView in rfViewInitial:
        print 'Checking completed job:', rfView
        print 'rfView', h2o.dump_json(rfView)
        data_key = rfView['data_key']
        model_key = rfView['model_key']
        ntree = rfView['ntree']
        rfViewResult = h2o_cmd.runRFView(None, data_key, model_key, ntree=ntree, timeoutSecs=60, noPoll=False)
