def test_rf_covtype_fvec(self):
    importFolderPath = 'standard'
    csvFilename = 'covtype.shuffled.10pct.data'
    csvPathname = ((importFolderPath + '/') + csvFilename)
    hex_key = (csvFilename + '.hex')
    print '\nUsing header=0 on the normal covtype.data'
    parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, hex_key=hex_key, header=0, timeoutSecs=180)
    inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
    rfViewInitial = []
    for jobDispatch in range(1):
        paramDict['destination_key'] = ('RFModel_' + str('jobDispatch'))
        kwargs = paramDict.copy()
        timeoutSecs = (30 + (kwargs['ntrees'] * 20))
        start = time.time()
        rfResult = h2o_cmd.runRF(parseResult=parseResult, timeoutSecs=timeoutSecs, noPoll=True, rfView=False, **kwargs)
        elapsed = (time.time() - start)
        print h2o.dump_json(rfResult)
        print 'rf job dispatch end on ', csvPathname, 'took', (time.time() - start), 'seconds'
        print '\njobDispatch #', jobDispatch
        rfView = {}
        rfView['data_key'] = hex_key
        rfView['model_key'] = kwargs['destination_key']
        rfView['ntrees'] = kwargs['ntrees']
        rfViewInitial.append(rfView)
        h2o_jobs.pollWaitJobs(timeoutSecs=300, pollTimeoutSecs=120, retryDelaySecs=5)
    print 'rfViewInitial', rfViewInitial
    for rfView in rfViewInitial:
        print 'Checking completed job:', rfView
        print 'rfView', h2o.dump_json(rfView)
        data_key = rfView['data_key']
        model_key = rfView['model_key']
        ntrees = rfView['ntrees']
        rfView = h2o_cmd.runRFView(None, model_key=model_key, timeoutSecs=60, noPoll=True, doSimpleCheck=False)
        h2o_jobs.pollWaitJobs(timeoutSecs=300, pollTimeoutSecs=300, retryDelaySecs=5)
        print 'rfView:', h2o.dump_json(rfView)
        rf_model = rfView['drf_model']
        cm = rf_model['cm']
        ntrees = rf_model['N']
        errs = rf_model['errs']
        N = rf_model['N']
        predict = h2o.nodes[0].generate_predictions(model_key=model_key, data_key=data_key)
