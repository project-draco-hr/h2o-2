def test_rf_covtype_fvec(self):
    h2o.beta_features = True
    importFolderPath = 'standard'
    csvTrainFilename = 'covtype.shuffled.90pct.data'
    csvTrainPathname = ((importFolderPath + '/') + csvTrainFilename)
    hex_key = (csvTrainFilename + '.hex')
    parseTrainResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvTrainPathname, hex_key=hex_key, timeoutSecs=180, doSummary=False)
    inspect = h2o_cmd.runInspect(None, parseTrainResult['destination_key'])
    csvTestFilename = 'covtype.shuffled.10pct.data'
    csvTestPathname = ((importFolderPath + '/') + csvTestFilename)
    hex_key = (csvTestFilename + '.hex')
    parseTestResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvTestPathname, hex_key=hex_key, timeoutSecs=180)
    inspect = h2o_cmd.runInspect(None, parseTestResult['destination_key'])
    rfViewInitial = []
    xList = []
    eList = []
    fList = []
    trial = 0
    depthList = [10, 20, 30, 40]
    ntreesList = [5, 10, 20, 30]
    nbinsList = [10, 100, 1000]
    if (TRY == 'max_depth'):
        tryList = depthList
    elif (TRY == 'ntrees'):
        tryList = ntreesList
    elif (TRY == 'nbins'):
        tryList = nbinsList
    else:
        raise Exception(('huh? %s' % TRY))
    for d in tryList:
        if (TRY == 'max_depth'):
            paramDict['max_depth'] = d
        elif (TRY == 'ntrees'):
            paramDict['ntrees'] = d
        elif (TRY == 'nbins'):
            paramDict['nbins'] = d
        else:
            raise Exception(('huh? %s' % TRY))
        if DO_OOBE:
            paramDict['validation'] = None
        else:
            paramDict['validation'] = parseTestResult['destination_key']
        timeoutSecs = (30 + (paramDict['ntrees'] * 200))
        TRIES = 10
        for i in range(TRIES):
            lastOne = (i == (TRIES - 1))
            trial += 1
            kwargs = paramDict.copy()
            kwargs['destination_key'] = None
            start = time.time()
            rfResult = h2o_cmd.runRF(parseResult=parseTrainResult, timeoutSecs=timeoutSecs, noPoll=False, rfView=False, **kwargs)
            trainElapsed = (time.time() - start)
            print 'rf train end', i, 'on', csvTrainPathname, 'took', trainElapsed, 'seconds'
            if (not lastOne):
                time.sleep(1)
                h2o_jobs.cancelAllJobs(timeoutSecs=2)
        model_key = rfResult['drf_model']['_selfKey']
        data_key = rfResult['drf_model']['_dataKey']
        ntrees = kwargs['ntrees']
        rfView = h2o_cmd.runRFView(None, model_key=model_key, timeoutSecs=60, retryDelaySecs=5, doSimpleCheck=False)
        rf_model = rfView['drf_model']
        cm = rf_model['cm']
        ntrees = rf_model['N']
        errs = rf_model['errs']
        N = rf_model['N']
        varimp = rf_model['varimp']
        treeStats = rf_model['treeStats']
        print 'maxDepth:', treeStats['maxDepth']
        print 'maxLeaves:', treeStats['maxLeaves']
        print 'minDepth:', treeStats['minDepth']
        print 'minLeaves:', treeStats['minLeaves']
        print 'meanLeaves:', treeStats['meanLeaves']
        print 'meanDepth:', treeStats['meanDepth']
        print 'errs[0]:', errs[0]
        print 'errs[-1]:', errs[(-1)]
        print 'errs:', errs
        (classification_error, classErrorPctList, totalScores) = h2o_rf.simpleCheckRFView(rfv=rfView)
        predict = h2o.nodes[0].generate_predictions(model_key=model_key, data_key=data_key)
        eList.append(classErrorPctList[4])
        fList.append(trainElapsed)
        if DO_PLOT:
            if (TRY == 'max_depth'):
                xLabel = 'max_depth'
            elif (TRY == 'ntrees'):
                xLabel = 'ntrees'
            elif (TRY == 'nbins'):
                xLabel = 'nbins'
            else:
                raise Exception(('huh? %s' % TRY))
            xList.append(paramDict[xLabel])
    if DO_PLOT:
        eLabel = 'class 4 pctWrong'
        fLabel = 'trainElapsed'
        eListTitle = ''
        fListTitle = ''
        h2o_gbm.plotLists(xList, xLabel, eListTitle, eList, eLabel, fListTitle, fList, fLabel)
