{
  int drop=H2O.OPT_ARGS.random_udp_drop != null && RANDOM_UDP_DROP.nextInt(5) == 0 ? 2 : 0;
  TimeLine.record_recv(ab,drop);
  ab._h2o._last_heard_from=System.currentTimeMillis();
  int ctrl=ab.getCtrl();
  ab.getPort();
  if (ctrl == UDP.udp.timeline.ordinal()) {
    UDP.udp.timeline._udp.call(ab).close();
    return;
  }
  if (ctrl == UDP.udp.rebooted.ordinal())   UDPRebooted.checkForSuicide(ctrl,ab);
  if (drop != 0)   return;
  H2O cloud=H2O.CLOUD;
  boolean is_member=cloud.contains(ab._h2o);
  final int ACK=UDP.udp.ack.ordinal();
  if (UDP.udp.UDPS[ctrl]._paxos || is_member) {
    int priority=(ctrl < ACK) ? RPC.MAX_PRIORITY : RPC.MAX_PRIORITY - 1;
    H2O.submitHiPriorityTsk(new FJPacket(ab),priority);
    return;
  }
  if (!is_member) {
    _unknown_packets_per_sec++;
    long timediff=ab._h2o._last_heard_from - _unknown_packet_time;
    if (timediff > 1000) {
      System.err.println("Non-member packets: " + _unknown_packets_per_sec + "/sec, last one from "+ ab._h2o);
      _unknown_packets_per_sec=0;
      _unknown_packet_time=ab._h2o._last_heard_from;
    }
    ab.close();
    return;
  }
}
