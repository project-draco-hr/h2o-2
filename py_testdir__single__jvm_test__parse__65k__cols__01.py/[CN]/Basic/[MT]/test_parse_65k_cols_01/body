def test_parse_65k_cols_01(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(10, 63000, 'cH', 100), (10, 65000, 'cH', 100)]
    h2b.browseTheCloud()
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + str(SEEDPERFILE)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print 'Creating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        start = time.time()
        print 'Summary should work with 65k'
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=timeoutSecs, doSummary=True)
        print csvFilename, 'parse time:', parseResult['response']['time']
        print 'Parse and summary:', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
        start = time.time()
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], timeoutSecs=timeoutSecs)
        print 'Inspect:', parseResult['destination_key'], 'took', (time.time() - start), 'seconds'
        h2o_cmd.infoFromInspect(inspect, csvPathname)
        print ('\n' + csvPathname), '    num_rows:', '{:,}'.format(inspect['num_rows']), '    num_cols:', '{:,}'.format(inspect['num_cols'])
        self.assertEqual(inspect['num_cols'], colCount, ('parse created result with the wrong number of cols %s %s' % (inspect['num_cols'], colCount)))
        self.assertEqual(inspect['num_rows'], rowCount, ("parse created result with the wrong number of rows (header shouldn't count) %s %s" % (inspect['num_rows'], rowCount)))
        column_limits = [25, 25000]
        for column_limit in column_limits:
            inspect = h2o_cmd.runInspect(None, parseResult['destination_key'], max_column_display=column_limit, timeoutSecs=timeoutSecs)
            self.assertEqual(len(inspect['cols']), column_limit, ('inspect obeys max_column_display = ' + str(column_limit)))
            for r in range(0, len(inspect['rows'])):
                self.assertEqual(len(inspect['rows'][r]), (column_limit + 1), ('inspect data rows obeys max_column_display = ' + str(column_limit)))
