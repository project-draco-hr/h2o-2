def doSUM(f, folderPath):
    debug = False
    bench = 'bench'
    if debug:
        print 'Doing SUM DEBUG'
        bench = 'bench/debug'
    retryDelaySecs = 5
    overallWallStart = time.time()
    pre = ''
    if debug:
        pre = 'DEBUG'
    sumbenchcsv = (((('benchmarks/' + build) + '/') + pre) + 'summarybench.csv')
    if (not os.path.exists(sumbenchcsv)):
        output = open(sumbenchcsv, 'w')
        output.write((','.join(csv_header) + '\n'))
    else:
        output = open(sumbenchcsv, 'a')
    csvWrt = csv.DictWriter(output, fieldnames=csv_header, restval=None, dialect='excel', extrasaction='ignore', delimiter=',')
    try:
        java_heap_GB = h2o.nodes[0].java_heap_GB
        importFolderPath = ((bench + '/') + folderPath)
        if (f in ['AirlinesTrain1x', 'AllBedroomsTrain1x', 'AllBedroomsTrain10x', 'AllBedroomsTrain100x']):
            csvPathname = (((importFolderPath + '/') + f) + '.csv')
        else:
            csvPathname = (((importFolderPath + '/') + f) + '/*linked*')
        hex_key = (f + '.hex')
        trainParseWallStart = time.time()
        hK = (folderPath + 'Header.csv')
        headerPathname = ((importFolderPath + '/') + hK)
        h2i.import_only(bucket='home-0xdiag-datasets', path=headerPathname)
        headerKey = h2i.find_key(hK)
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, schema='local', hex_key=hex_key, header=1, header_from_file=headerKey, separator=44, timeoutSecs=7200, retryDelaySecs=retryDelaySecs, pollTimeoutSecs=7200, doSummary=False)
        parseWallTime = (time.time() - trainParseWallStart)
        print 'Parsing training file took ', parseWallTime, ' seconds.'
        inspect = h2o.nodes[0].inspect(parseResult['destination_key'], timeoutSecs=7200)
        nMachines = (1 if (len(h2o_hosts.hosts) is 0) else len(h2o_hosts.hosts))
        row = {'h2o_build': build, 'nMachines': nMachines, 'nJVMs': len(h2o.nodes), 'Xmx/JVM': java_heap_GB, 'dataset': f, 'nRows': inspect['num_rows'], 'nCols': inspect['num_cols'], 'parseWallTime': parseWallTime, }
        sumStart = time.time()
        sumResult = h2o_cmd.runSummary(key=hex_key, timeoutSecs=7200)
        sumTime = (time.time() - sumStart)
        cmd = (('cd ..; bash startloggers.sh ' + json) + ' stop_')
        os.system(cmd)
        row.update({'summaryBuildTime': sumTime, })
        csvWrt.writerow(row)
    finally:
        output.close()
