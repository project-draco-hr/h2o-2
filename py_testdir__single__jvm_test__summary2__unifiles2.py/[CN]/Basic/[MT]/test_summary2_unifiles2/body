def test_summary2_unifiles2(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [('breadth.csv', 'b.hex', False, [('C1', None, None, None, None, None)], 'smalldata', 'quantiles'), ('wonkysummary.csv', 'b.hex', True, [('X1', None, None, None, None, None)], 'smalldata', None), ('covtype.data', 'c.hex', False, [('C1', None, None, None, None, None)], 'home-0xdiag-datasets', 'standard')]
    timeoutSecs = 10
    trial = 1
    n = h2o.nodes[0]
    lenNodes = len(h2o.nodes)
    x = 0
    timeoutSecs = 60
    for (csvFilename, hex_key, skipHeader, expectedCols, bucket, pathPrefix) in tryList:
        h2o.beta_features = False
        if pathPrefix:
            csvPathname = ((pathPrefix + '/') + csvFilename)
        else:
            csvPathname = csvFilename
        csvPathnameFull = h2i.find_folder_and_filename(bucket, csvPathname, returnFullPath=True)
        if skipHeader:
            header = 1
        else:
            header = 0
        parseResult = h2i.import_parse(bucket=bucket, path=csvPathname, schema='put', header=header, hex_key=hex_key, timeoutSecs=10, doSummary=False)
        print csvFilename, 'parse time:', parseResult['response']['time']
        print "Parse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvFilename)
        numRows = inspect['numRows']
        numCols = inspect['numCols']
        h2o.beta_features = True
        summaryResult = h2o_cmd.runSummary(key=hex_key, max_qbins=MAX_QBINS)
        h2o.verboseprint('summaryResult:', h2o.dump_json(summaryResult))
        summaries = summaryResult['summaries']
        scipyCol = 0
        for (expected, column) in zip(expectedCols, summaries):
            colname = column['colname']
            if expected[0]:
                self.assertEqual(colname, expected[0])
            quantile = (0.5 if DO_MEDIAN else OTHER_Q)
            q = h2o.nodes[0].quantiles(source_key=hex_key, column=scipyCol, quantile=quantile, max_qbins=MAX_QBINS, multiple_pass=2)
            qresult = q['result']
            qresult_single = q['result_single']
            qresult_iterations = q['iterations']
            qresult_interpolated = q['interpolated']
            h2p.blue_print('h2o quantiles result:', qresult)
            h2p.blue_print('h2o quantiles result_single:', qresult_single)
            h2p.blue_print('h2o quantiles iterations:', qresult_iterations)
            h2p.blue_print('h2o quantiles interpolated:', qresult_interpolated)
            print h2o.dump_json(q)
            self.assertLess(qresult_iterations, 16, msg='h2o does max of 16 iterations. likely no result_single if we hit max. is bins=1?')
            coltype = column['type']
            nacnt = column['nacnt']
            stats = column['stats']
            stattype = stats['type']
            print stattype
            if (stattype != 'Enum'):
                mean = stats['mean']
                sd = stats['sd']
                zeros = stats['zeros']
                mins = stats['mins']
                maxs = stats['maxs']
                print 'colname:', colname, 'mean (2 places):', h2o_util.twoDecimals(mean)
                print 'colname:', colname, 'std dev. (2 places):', h2o_util.twoDecimals(sd)
                pct = stats['pct']
                print 'pct:', pct
                print ''
                pctile = stats['pctile']
            if expected[1]:
                h2o_util.assertApproxEqual(mins[0], expected[1], rel=0.02, msg='min is not approx. expected')
            if expected[2]:
                h2o_util.assertApproxEqual(pctile[3], expected[2], rel=0.02, msg='25th percentile is not approx. expected')
            if expected[3]:
                h2o_util.assertApproxEqual(pctile[5], expected[3], rel=0.02, msg='50th percentile (median) is not approx. expected')
            if expected[4]:
                h2o_util.assertApproxEqual(pctile[7], expected[4], rel=0.02, msg='75th percentile is not approx. expected')
            if expected[5]:
                h2o_util.assertApproxEqual(maxs[0], expected[5], rel=0.02, msg='max is not approx. expected')
            hstart = column['hstart']
            hstep = column['hstep']
            hbrk = column['hbrk']
            hcnt = column['hcnt']
            for b in hcnt:
                e = (0.1 * numRows)
            if (stattype != 'Enum'):
                pt = h2o_util.twoDecimals(pctile)
                print 'colname:', colname, 'pctile (2 places):', pt
                mx = h2o_util.twoDecimals(maxs)
                mn = h2o_util.twoDecimals(mins)
                print 'colname:', colname, 'maxs: (2 places):', mx
                print 'colname:', colname, 'mins: (2 places):', mn
                actual = (mn[0], pt[3], pt[5], pt[7], mx[0])
                print 'min/25/50/75/max colname:', colname, '(2 places):', actual
                print 'maxs colname:', colname, '(2 places):', mx
                print 'mins colname:', colname, '(2 places):', mn
                if ((colname != '') and expected[scipyCol] and (csvFilename != 'covtype.data')):
                    h2o_summ.quantile_comparisons(csvPathnameFull, skipHeader=skipHeader, col=scipyCol, datatype='float', quantile=(0.5 if DO_MEDIAN else OTHER_Q), h2oSummary2=pctile[(5 if DO_MEDIAN else OTHER_Q_SUMM_INDEX)], h2oQuantilesApprox=qresult_single, h2oQuantilesExact=qresult)
            scipyCol += 1
        trial += 1
