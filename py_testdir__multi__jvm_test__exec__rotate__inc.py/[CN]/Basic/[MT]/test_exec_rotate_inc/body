def test_exec_rotate_inc(self):
    lenNodes = len(h2o.nodes)
    for exprTemplate in initList:
        execExpr = h2e.fill_in_expr_template(exprTemplate, n=0, m=0)
        print execExpr
        execResult = h2e.exec_expr(h2o.nodes[0], execExpr)
    period = 10
    trial = 0
    while (trial < 200):
        for exprTemplate in exprList:
            if (trial < 100):
                nodeX = 0
            else:
                nodeX = random.randint(0, (lenNodes - 1))
            number = (trial + 10)
            resultKey = ('Result' + str((number % period)))
            execExpr = h2e.fill_in_expr_template(exprTemplate, n=(number % period), m=((number - goback) % period))
            (execResultInspect, min_value) = h2e.exec_expr(h2o.nodes[nodeX], execExpr, resultKey=resultKey, timeoutSecs=4)
            print 'min_value:', min_value, 'execExpr:', execExpr, 'number:', number
            h2o.verboseprint('min: ', min_value, 'trial:', trial)
            self.assertEqual(int(min_value), int(number), (('Although the memory model allows write atomicity to be violated,' + 'this test was passing with an assumption of multi-jvm write atomicity') + 'Be interesting if ever fails. Can disable assertion if so, and run without check'))
            trial += 1
