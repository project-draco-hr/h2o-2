{
  DocGen.HTML.section(sb,"Variable importance of input variables: " + method);
  DocGen.HTML.arrayHead(sb);
  Integer[] sortOrder=new Integer[varimp.length];
  for (int i=0; i < sortOrder.length; i++)   sortOrder[i]=i;
  Arrays.sort(sortOrder,new Comparator<Integer>(){
    @Override public int compare(    Integer o1,    Integer o2){
      float f=varimp[o1] - varimp[o2];
      return f < 0 ? 1 : (f > 0 ? -1 : 0);
    }
  }
);
  final boolean shorten=variables != null && varimp != null && max_var < sortOrder.length;
  if (shorten) {
    sortOrder=Arrays.copyOfRange(sortOrder,0,max_var);
    String[] variables_show=new String[sortOrder.length];
    float[] varimp_show=new float[sortOrder.length];
    for (int i=0; i < sortOrder.length; ++i) {
      variables_show[i]=variables[sortOrder[i]];
      varimp_show[i]=varimp[sortOrder[i]];
    }
    variables=variables_show;
    varimp=varimp_show;
  }
  if (variables != null)   DocGen.HTML.tableLine(sb,"Variable",variables,shorten ? null : sortOrder);
  if (varimp != null)   DocGen.HTML.tableLine(sb,method.toString(),varimp,shorten ? null : sortOrder);
  toHTMLAppendMoreTableLines(sb,shorten ? null : sortOrder);
  DocGen.HTML.arrayTail(sb);
  DocGen.HTML.graph(sb,"graphvarimp","g_varimp",DocGen.HTML.toJSArray(new StringBuilder(),variables),DocGen.HTML.toJSArray(new StringBuilder(),varimp));
  return sb;
}
