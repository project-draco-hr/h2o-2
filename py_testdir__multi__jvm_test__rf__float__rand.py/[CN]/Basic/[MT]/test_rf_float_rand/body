def test_rf_float_rand(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    csvFilename = 'syn_prostate.csv'
    csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
    headerData = 'ID,CAPSULE,AGE,RACE,DPROS,DCAPS,PSA,VOL,GLEASON'
    totalRows = 1000
    colCount = 7
    write_syn_dataset(csvPathname, totalRows, colCount, headerData)
    for trial in range(5):
        rowData = rand_rowData(colCount)
        num = random.randint(4096, 10096)
        append_syn_dataset(csvPathname, colCount, num)
        totalRows += num
        hex_key = (((csvFilename + '_') + str(trial)) + '.hex')
        ntree = 50
        kwargs = {'ntree': ntree, 'features': None, 'depth': 2147483647, 'stat_type': 'ENTROPY', 'sampling_strategy': 'RANDOM', 'sample': 67, 'out_of_bag_error_estimate': 1, 'model_key': None, 'bin_limit': 1024, 'seed': 784834182943470027, 'exclusive_split_limit': None, 'iterative_cm': 1, 'use_non_local_data': 1, }
        start = time.time()
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key)
        if (1 == 0):
            summaryResult = h2o_cmd.runSummary(key=hex_key, max_column_display=(colCount + 1))
            h2o_cmd.infoFromSummary(summaryResult)
        rfView = h2o_cmd.runRF(parseResult=parseResult, timeoutSecs=15, pollTimeoutSecs=5, **kwargs)
        print 'trial #', trial, 'totalRows:', totalRows, 'num:', num, 'RF end on ', csvFilename, 'took', (time.time() - start), 'seconds'
        (classification_error, classErrorPctList, totalScores) = h2o_rf.simpleCheckRFView(rfv=rfView, ntree=ntree)
        inspect = h2o_cmd.runInspect(key=hex_key)
        cols = inspect['cols']
        num_cols = inspect['num_cols']
        for (i, c) in enumerate(cols):
            if (i < (num_cols - 1)):
                colType = c['type']
                colSize = c['size']
                self.assertEqual(colType, 'float', msg=('col %d should be type float: %s' % (i, colType)))
                self.assertEqual(colSize, 8, msg=('col %d should be size 8: %d' % (i, colSize)))
        h2o.check_sandbox_for_errors()
