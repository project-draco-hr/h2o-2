{
  try {
    final int cyl_idx=fr.find("cylinders");
    final int year_idx=fr.find("year");
    SumCol sumcols=fr.with(new SumCol(year_idx)).doit();
    System.out.println(sumcols._sum + "/" + sumcols._n+ " = "+ (sumcols._sum / sumcols._n));
    System.out.println();
    SumCol sumcols1=fr.with(new Flow.Filter(){
      public boolean filter(      double ds[]){
        return ds[cyl_idx] != 5;
      }
    }
).with(new SumCol(year_idx)).doit();
    System.out.println(sumcols1._sum + "/" + sumcols1._n+ " = "+ (sumcols1._sum / sumcols1._n));
    System.out.println();
    IcedHashMap<IcedLong,SumCol> sumcols2=fr.with(new Flow.GroupBy(){
      public long groupId(      double ds[]){
        return (long)ds[cyl_idx];
      }
    }
).with(new SumCol(year_idx)).doit();
    for (    IcedLong gid : sumcols2.keySet()) {
      SumCol sumcol=sumcols2.get(gid);
      System.out.println("Cyl=" + gid._val + ", "+ sumcol._sum+ "/"+ sumcol._n+ " = "+ (sumcol._sum / sumcol._n));
    }
    System.out.println();
    IcedHashMap<IcedLong,SumCol> sumcols3=fr.with(new Flow.Filter(){
      public boolean filter(      double ds[]){
        return ds[cyl_idx] != 5;
      }
    }
).with(new Flow.GroupBy(){
      public long groupId(      double ds[]){
        return (long)ds[cyl_idx];
      }
    }
).with(new SumCol(year_idx)).doit();
    for (    IcedLong gid : sumcols3.keySet()) {
      SumCol sumcol=sumcols3.get(gid);
      System.out.println("Cyl=" + gid._val + ", "+ sumcol._sum+ "/"+ sumcol._n+ " = "+ (sumcol._sum / sumcol._n));
    }
    System.out.println();
    IcedHashMap<IcedLong,SumCol> sumcols4=fr.with(new Flow.GroupBy(){
      public long groupId(      double ds[]){
        return (long)ds[cyl_idx];
      }
    }
).with(new Flow.Filter(){
      public boolean filter(      double ds[]){
        return ds[cyl_idx] != 5;
      }
    }
).with(new SumCol(year_idx)).doit();
    for (    IcedLong gid : sumcols4.keySet()) {
      SumCol sumcol=sumcols4.get(gid);
      System.out.println("Cyl=" + gid._val + ", "+ sumcol._sum+ "/"+ sumcol._n+ " = "+ (sumcol._sum / sumcol._n));
    }
    System.out.println();
  }
  finally {
    UKV.remove(k);
  }
}
