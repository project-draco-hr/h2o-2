def test_GLM_many_cols_libsvm(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(100, 3000, 'cA', 300), (100, 5000, 'cB', 500)]
    lenNodes = len(h2o.nodes)
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + 'binary') + '_') + str(rowCount)) + 'x') + str(colCount)) + '.svm')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print 'Creating random libsvm:', csvPathname
        write_syn_libsvm_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        parseResult = h2i.import_parse(path=csvPathname, hex_key=hex_key, schema='put', timeoutSecs=10)
        print csvFilename, 'parse time:', parseResult['response']['time']
        print "Parse result['destination_key']:", parseResult['destination_key']
        inspect = h2o_cmd.runInspect(None, parseResult['destination_key'])
        print ('\n' + csvFilename)
        y = colCount
        kwargs = {'y': y, 'max_iter': 2, 'n_folds': 1, 'alpha': 0.2, 'lambda': 1e-05, }
        start = time.time()
        glm = h2o_cmd.runGLM(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
        print 'glm end on ', csvPathname, 'took', (time.time() - start), 'seconds'
        h2o_glm.simpleCheckGLM(self, glm, None, **kwargs)
