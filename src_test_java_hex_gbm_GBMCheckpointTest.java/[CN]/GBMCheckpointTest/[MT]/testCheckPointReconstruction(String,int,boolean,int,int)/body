{
  Frame f=parseFrame(dataset);
  GBMModel model=null;
  GBMModel modelFromCheckpoint=null;
  GBMModel modelFinal=null;
  try {
    Vec respVec=f.vec(response);
    GBMWithHooks gbm=new GBMWithHooks();
    gbm.source=f;
    gbm.response=respVec;
    gbm.classification=classification;
    gbm.ntrees=ntreesInPriorModel;
    gbm.collectPoint=WhereToCollect.AFTER_BUILD;
    gbm.score_each_iteration=true;
    gbm.invoke();
    model=UKV.get(gbm.dest());
    GBMWithHooks gbmFromCheckpoint=new GBMWithHooks();
    gbmFromCheckpoint.source=f;
    gbmFromCheckpoint.response=respVec;
    gbmFromCheckpoint.classification=classification;
    gbmFromCheckpoint.ntrees=ntreesInANewModel;
    gbmFromCheckpoint.collectPoint=WhereToCollect.AFTER_RECONSTRUCTION;
    gbmFromCheckpoint.checkpoint=gbm.dest();
    gbmFromCheckpoint.score_each_iteration=true;
    gbmFromCheckpoint.invoke();
    modelFromCheckpoint=UKV.get(gbmFromCheckpoint.dest());
    assertArrayEquals("Tree data produced by drf run and reconstructed from a model do not match!",gbm.treesCols,gbmFromCheckpoint.treesCols);
    GBM gbmFinal=new GBM();
    gbmFinal.source=f;
    gbmFinal.response=respVec;
    gbmFinal.classification=classification;
    gbmFinal.ntrees=ntreesInANewModel + ntreesInPriorModel;
    gbmFinal.score_each_iteration=true;
    gbmFinal.invoke();
    modelFinal=UKV.get(gbmFinal.dest());
    assertTreeModelEquals(modelFinal,modelFromCheckpoint);
  }
  finally {
    if (f != null)     f.delete();
    if (model != null)     model.delete();
    if (modelFromCheckpoint != null)     modelFromCheckpoint.delete();
    if (modelFinal != null)     modelFinal.delete();
  }
}
