def test_GBM_parseTrain(self):
    bucket = 'home-0xdiag-datasets'
    files = [('mnist', 'mnist_training.csv.gz', 'mnistsmalltrain.hex', 1800, 0)]
    grid = [[1, 10, 100, 1000], [0.0, 0.01, 0.001, 0.0001, 1], [1, 2], [1, 10, 100]]
    grid = list(itertools.product(*grid))
    grid = random.sample(grid, 10)
    for (importFolderPath, csvFilename, trainKey, timeoutSecs, response) in files:
        start = time.time()
        parseResult = h2i.import_parse(bucket=bucket, path=((importFolderPath + '/') + csvFilename), schema='local', hex_key=trainKey, timeoutSecs=timeoutSecs)
        elapsed = (time.time() - start)
        print 'parse end on ', csvFilename, 'took', elapsed, 'seconds', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        print 'parse result:', parseResult['destination_key']
        csv_header = ('nJVMs', 'java_heap_GB', 'dataset', 'ntrees', 'max_depth', 'learn_rate', 'min_rows', 'trainTime')
        for (ntree, learn_rate, max_depth, min_rows) in grid:
            if (not os.path.exists('gbm_grid.csv')):
                output = open('gbm_grid.csv', 'w')
                output.write((','.join(csv_header) + '\n'))
            else:
                output = open('gbm_grid.csv', 'a')
            csvWrt = csv.DictWriter(output, fieldnames=csv_header, restval=None, dialect='excel', extrasaction='ignore', delimiter=',')
            java_heap_GB = h2o.nodes[0].java_heap_GB
            params = {'destination_key': 'GBMKEY', 'learn_rate': learn_rate, 'ntrees': ntree, 'max_depth': max_depth, 'min_rows': min_rows, 'response': response, }
            print 'Using these parameters for GBM: ', params
            kwargs = params.copy()
            start = time.time()
            GBMResult = h2o_cmd.runGBM(parseResult=parseResult, noPoll=True, timeoutSecs=timeoutSecs, **kwargs)
            h2j.pollWaitJobs(pattern='GBMKEY', timeoutSecs=3600, pollTimeoutSecs=3600)
            GBMView = h2o_cmd.runGBMView(model_key='GBMKEY')
            print GBMView['gbm_model']['errs']
            elapsed = (time.time() - start)
            row = {'nJVMs': len(h2o.nodes), 'java_heap_GB': java_heap_GB, 'dataset': 'mnist_training.csv.gz', 'learn_rate': learn_rate, 'ntrees': ntree, 'max_depth': max_depth, 'min_rows': min_rows, 'trainTime': elapsed, }
            print row
            csvWrt.writerow(row)
