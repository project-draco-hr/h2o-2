def test_GLM2_covtype_1(self):
    h2o.beta_features = True
    csvFilename = 'covtype.data'
    csvPathname = ('standard/' + csvFilename)
    hex_key = 'covtype.hex'
    parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, hex_key=hex_key, schema='local', timeoutSecs=10)
    print 'Gratuitous use of frame splitting. result not used'
    fs = h2o.nodes[0].frame_split(source=hex_key, ratios=0.75)
    split0_key = fs['split_keys'][0]
    split1_key = fs['split_keys'][1]
    split0_row = fs['split_rows'][0]
    split1_row = fs['split_rows'][1]
    split0_ratio = fs['split_ratios'][0]
    split1_ratio = fs['split_ratios'][1]
    x = ''
    print 'WARNING: max_iter set to 8 for benchmark comparisons'
    max_iter = 8
    y = 54
    modelKey = 'GLMModel'
    kwargs = {'response': ('C' + str((y + 1))), 'family': 'binomial', 'n_folds': 2, 'max_iter': max_iter, 'beta_epsilon': 0.001, 'destination_key': modelKey, }
    execExpr = ('A.hex=%s' % parseResult['destination_key'])
    h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
    execExpr = ('A.hex[,%s]=(A.hex[,%s]>%s)' % ((y + 1), (y + 1), 1))
    h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
    aHack = {'destination_key': 'A.hex', }
    timeoutSecs = 120
    start = time.time()
    kwargs.update({'alpha': 0, 'lambda': 0, })

    def completionHack(jobKey, modelKey):
        if DO_POLL:
            pass
        else:
            h2o_jobs.pollStatsWhileBusy(timeoutSecs=300, pollTimeoutSecs=300, retryDelaySecs=5)
        params = {'_modelKey': modelKey, }
        a = h2o.nodes[0].completion_redirect(jsonRequest='2/GLMModelView.json', params=params)
    glmFirstResult = h2o_cmd.runGLM(parseResult=aHack, timeoutSecs=timeoutSecs, noPoll=(not DO_POLL), **kwargs)
    completionHack(glmFirstResult['job_key'], modelKey)
    print 'glm (L2) end on ', csvPathname, 'took', (time.time() - start), 'seconds'
    kwargs.update({'alpha': 0.5, 'lambda': 0.0001, })
    start = time.time()
    glmFirstResult = h2o_cmd.runGLM(parseResult=aHack, timeoutSecs=timeoutSecs, noPoll=(not DO_POLL), **kwargs)
    completionHack(glmFirstResult['job_key'], modelKey)
    print 'glm (Elastic) end on ', csvPathname, 'took', (time.time() - start), 'seconds'
    kwargs.update({'alpha': 1, 'lambda': 0.0001, })
    start = time.time()
    glmFirstResult = h2o_cmd.runGLM(parseResult=aHack, timeoutSecs=timeoutSecs, noPoll=(not DO_POLL), **kwargs)
    completionHack(glmFirstResult['job_key'], modelKey)
    print 'glm (L1) end on ', csvPathname, 'took', (time.time() - start), 'seconds'
