{
  Host master=new Host(publicIPs.get(0));
  Set<String> incls=new HashSet<String>(clientRSyncIncludes);
  if (JRE != null && !new File(JRE + "/bin/java").exists())   throw new IllegalArgumentException("Invalid JRE");
  if (JRE != null)   incls.add(JRE);
  List<String> ips=privateIPs.size() > 0 ? privateIPs : publicIPs;
  String s="";
  for (  Object o : ips)   s+=(s.length() == 0 ? "" : '\n') + o.toString() + ":"+ PORT;
  File flatfile=Utils.writeFile(new File(Utils.tmp(),FLATFILE),s);
  incls.add(flatfile.getAbsolutePath());
  master.rsync(incls,clientRSyncExcludes,false);
  ArrayList<String> list=new ArrayList<String>();
  list.add("-mainClass");
  list.add(Master.class.getName());
  CloudParams p=new CloudParams();
  p._incls=new HashSet<String>(fannedRSyncIncludes);
  p._excls=fannedRSyncExcludes;
  p._incls.add(FLATFILE);
  if (JRE != null)   p._incls.add(new File(JRE).getName());
  list.add(VM.write(p));
  list.addAll(Arrays.asList(args));
  String[] java=Utils.append(java_args,NodeVM.class.getName());
  Params params=new Params(master,java,list.toArray(new String[0]));
  if (WATCHDOGS) {
    SSHWatchdog r=new SSHWatchdog(params);
    r.inheritIO();
    r.start();
  }
 else {
    try {
      SSHWatchdog.run(params);
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
}
