{
  Host master=new Host(_publicIPs.get(0));
  Set<String> incls=Host.defaultIncludes();
  Set<String> excls=Host.defaultExcludes();
  incls.addAll(_clientRSyncIncludes);
  excls.addAll(_clientRSyncExcludes);
  File flatfile;
  if (_privateIPs.size() > 0)   flatfile=Utils.writeFile(Utils.join('\n',_privateIPs));
 else   flatfile=Utils.writeFile(Utils.join('\n',_publicIPs));
  incls.add(flatfile.getAbsolutePath());
  master.rsync(incls,excls,false);
  ArrayList<String> list=new ArrayList<String>();
  list.add("-mainClass");
  list.add(Master.class.getName());
  CloudParams p=new CloudParams();
  p._incls=Host.defaultIncludes();
  p._excls=Host.defaultExcludes();
  p._incls.addAll(_fannedRSyncIncludes);
  p._excls.add(flatfile.getName());
  p._flatfile=flatfile.getName();
  list.add(VM.write(p));
  list.addAll(Arrays.asList(args));
  String[] java=Utils.add(java_args,NodeVM.class.getName());
  SSHWatchdog r=new SSHWatchdog(master,java,list.toArray(new String[0]));
  r.inheritIO();
  r.start();
}
