{
  Host master=new Host(publicIPs.get(0));
  Set<String> incls=Host.defaultIncludes();
  Set<String> excls=Host.defaultExcludes();
  incls.addAll(clientRSyncIncludes);
  excls.addAll(clientRSyncExcludes);
  if (!new File(jdk + "/jre/bin/java").exists())   throw new IllegalArgumentException("Please specify the JDK to rsync and run on");
  incls.add(jdk);
  File flatfile;
  List<String> ips=privateIPs.size() > 0 ? privateIPs : publicIPs;
  String s="";
  for (  Object o : ips)   s+=(s.length() == 0 ? "" : '\n') + o.toString() + ":"+ PORT;
  flatfile=Utils.writeFile(s);
  incls.add(flatfile.getAbsolutePath());
  master.rsync(incls,excls,false);
  ArrayList<String> list=new ArrayList<String>();
  list.add("-mainClass");
  list.add(Master.class.getName());
  CloudParams p=new CloudParams();
  p._incls=Host.defaultIncludes();
  p._excls=Host.defaultExcludes();
  p._incls.addAll(fannedRSyncIncludes);
  p._excls.addAll(fannedRSyncExcludes);
  p._incls.add(flatfile.getName());
  p._flatfile=flatfile.getName();
  p._incls.add(new File(jdk).getName());
  list.add(VM.write(p));
  list.addAll(Arrays.asList(args));
  String[] java=Utils.append(java_args,NodeVM.class.getName());
  SSHWatchdog r=new SSHWatchdog(master,java,list.toArray(new String[0]));
  r.inheritIO();
  r.start();
}
