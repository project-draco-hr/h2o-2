{
  VM.exitWithParent();
  CloudParams params=VM.read(args[0]);
  args=Utils.remove(args,0);
  String[] workerArgs=new String[]{"-flatfile",FLATFILE,"-port","" + PORT};
  List<FlatFileEntry> flatfile=H2O.parseFlatFile(new File(FLATFILE));
  HashMap<String,Host> hosts=new HashMap<String,Host>();
  ArrayList<Node> workers=new ArrayList<Node>();
  for (int i=1; i < flatfile.size(); i++) {
    Host host=new Host(flatfile.get(i).inet.getHostAddress());
    hosts.put(host.address(),host);
    workers.add(new NodeHost(host,workerArgs));
  }
  Host.rsync(hosts.values().toArray(new Host[0]),params._incls,params._excls,false);
  for (  Node w : workers) {
    w.inheritIO();
    w.start();
  }
  H2O.main(Utils.append(workerArgs,args));
  TestUtil.stall_till_cloudsize(1 + workers.size());
  Log.unwrap(System.out,"");
  Log.unwrap(System.out,"Cloud is up, local port " + Cloud.PORT + " forwarded");
  Log.unwrap(System.out,"Go to http://127.0.0.1:" + Cloud.PORT);
  Log.unwrap(System.out,"");
  int index=Arrays.asList(args).indexOf("-mainClass");
  if (index >= 0) {
    String pack=args[index + 1].substring(0,args[index + 1].lastIndexOf('.'));
    LaunchJar.weavePackages(pack);
    Boot.run(args);
  }
}
