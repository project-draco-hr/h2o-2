{
  _enum=vec.isEnum();
  _isInt=vec.isInt();
  if (_enum)   domains=vec.domain();
 else   domains=null;
  long len=vec.length();
  rows=len - vec.naCnt();
  if (_enum) {
    mins=MemoryManager.malloc8d(Math.min(domains.length,NMAX));
    maxs=MemoryManager.malloc8d(Math.min(domains.length,NMAX));
  }
 else {
    mins=MemoryManager.malloc8d((int)Math.min(len,NMAX));
    maxs=MemoryManager.malloc8d((int)Math.min(len,NMAX));
  }
  Arrays.fill(mins,Double.POSITIVE_INFINITY);
  Arrays.fill(maxs,Double.NEGATIVE_INFINITY);
  double span=vec.max() - vec.min() + 1;
  if (vec.isEnum() && span < MAX_HIST_SZ) {
    start=vec.min();
    binsz=1;
    bins=new long[(int)span];
  }
 else {
    double sigma=vec.sigma();
    if (Double.isNaN(sigma))     sigma=0;
    double b=Math.max(1e-4,3.5 * sigma / Math.cbrt(len));
    double d=Math.pow(10,Math.floor(Math.log10(b)));
    if (b > 20 * d / 3)     d*=10;
 else     if (b > 5 * d / 3)     d*=5;
    if (d < 1. && _isInt)     d=1.;
    binsz=d;
    start=binsz * Math.floor(vec.min() / binsz);
    int nbin=(int)Math.floor((vec.max() + (_isInt ? .5 : 0) - start) / binsz) + 1;
    bins=new long[nbin];
  }
}
