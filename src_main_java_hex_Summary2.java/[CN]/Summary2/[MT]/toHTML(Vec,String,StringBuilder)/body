{
  sb.append("<div class='table' id='col_" + cname + "' style='width:90%;heigth:90%;border-top-style:solid;'>"+ "<div class='alert-success'><h4>Column: "+ cname+ " (type: "+ type+ ")</h4></div>\n");
  if (nrow == 0) {
    sb.append("<div class='alert'>Empty column, no summary!</div></div>\n");
    return;
  }
  if (!vec.isEnum()) {
    NumStats stats=(NumStats)this.stats;
    sb.append("<div style='width:100%;'><table class='table-bordered'>");
    sb.append("<tr><th colspan='" + 20 + "' style='text-align:center;'>Base Stats</th></tr>");
    sb.append("<tr>");
    sb.append("<th>mean</th><td>" + Utils.p2d(stats.mean) + "</td>");
    sb.append("<th>sd</th><td>" + Utils.p2d(stats.sd) + "</td>");
    sb.append("<th>NAs</th>  <td>" + naCnt + "</td>");
    sb.append("<th>zeros</th><td>" + stats.zeros + "</td>");
    sb.append("<th>min[" + stats.mins.length + "]</th>");
    for (    double min : stats.mins) {
      if (min == Double.POSITIVE_INFINITY)       break;
      sb.append("<td>" + Utils.p2d(min) + "</td>");
    }
    sb.append("<th>max[" + stats.maxs.length + "]</th>");
    for (    double max : stats.maxs) {
      if (max == Double.NEGATIVE_INFINITY)       continue;
      sb.append("<td>" + Utils.p2d(max) + "</td>");
    }
    sb.append("</tr> </table>");
    sb.append("</div>");
  }
 else {
    sb.append("<div style='width:100%'><table class='table-bordered'>");
    sb.append("<tr><th colspan='" + 4 + "' style='text-align:center;'>Base Stats</th></tr>");
    sb.append("<tr><th>NAs</th>  <td>" + naCnt + "</td>");
    sb.append("<th>cardinality</th>  <td>" + vec.domain().length + "</td></tr>");
    sb.append("</table></div>");
  }
  final int MAX_HISTO_BINS_DISPLAYED=1000;
  int len=Math.min(hcnt.length,MAX_HISTO_BINS_DISPLAYED);
  sb.append("<div style='width:100%;overflow-x:auto;'><table class='table-bordered'>");
  sb.append("<tr> <th colspan=" + len + " style='text-align:center'>Histogram</th></tr>");
  sb.append("<tr>");
  if (_vec.isEnum())   for (int i=0; i < len; i++)   sb.append("<th>" + vec.domain(i) + "</th>");
 else   for (int i=0; i < len; i++)   sb.append("<th>" + Utils.p2d(binValue(i)) + "</th>");
  sb.append("</tr>");
  sb.append("<tr>");
  for (int i=0; i < len; i++)   sb.append("<td>" + hcnt[i] + "</td>");
  sb.append("</tr>");
  sb.append("<tr>");
  for (int i=0; i < len; i++)   sb.append(String.format("<td>%.1f%%</td>",(100.0 * hcnt[i] / nrow)));
  sb.append("</tr>");
  if (hcnt.length >= MAX_HISTO_BINS_DISPLAYED)   sb.append("<div class='alert'>Histogram for this column was too big and was truncated to 1000 values!</div>");
  sb.append("</table></div>");
  if (!vec.isEnum()) {
    NumStats stats=(NumStats)this.stats;
    sb.append("<div style='width:100%;overflow-x:auto;'><table class='table-bordered'>");
    sb.append("<tr> <th colspan='" + stats.percentile_thresholds.length + "' "+ "style='text-align:center' "+ ">Percentiles</th></tr>");
    sb.append("<tr><th>Threshold(%)</th>");
    for (    double pc : stats.percentile_thresholds)     sb.append("<td>" + (int)Math.round(pc * 100) + "</td>");
    sb.append("</tr>");
    sb.append("<tr><th>Value</th>");
    for (    double pv : stats.percentiles)     sb.append("<td>" + Utils.p2d(pv) + "</td>");
    sb.append("</tr>");
    sb.append("</table>");
    sb.append("</div>");
  }
  sb.append("</div>\n");
}
