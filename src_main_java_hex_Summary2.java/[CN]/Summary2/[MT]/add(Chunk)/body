{
  long start=chk._start;
  if (_enum) {
    for (int i=0; i < chk._len; i++)     if (chk.isNA(start + i))     _n_na++;
  }
 else {
    int maxmin=0;
    int minmax=0;
    for (int i=0; i < chk._len; i++) {
      double val;
      if (chk.isNA(start + i))       _n_na++;
 else {
        val=chk.at(start + i);
        if (val == 0.)         _nzero++;
        if (val < _min[maxmin]) {
          _min[maxmin]=val;
          for (int k=0; k < _min.length; k++)           if (_min[k] > _min[maxmin])           maxmin=k;
        }
        if (val > _max[minmax]) {
          _max[minmax]=val;
          for (int k=0; k < _max.length; k++)           if (_max[k] < _max[minmax])           minmax=k;
        }
        int binIdx=(_binsz == 1) ? Math.min((int)(val - _start),_bins.length - 1) : Math.min(_bins.length - 1,(int)((val - _start) * _binszInv));
        ++_bins[binIdx];
      }
    }
    Arrays.sort(_min);
    Arrays.sort(_max);
  }
  _n+=chk._len;
  return this;
}
