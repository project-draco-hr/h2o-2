def kmeans_doit(self, csvFilename, csvPathname, num_rows, timeoutSecs=30):
    print '\nStarting KMeans of', csvFilename
    parseResult = h2o_cmd.parseFile(csvPathname=csvPathname, key2=(csvFilename + '.hex'), timeoutSecs=10)
    cols = ','.join(map(str, range(11)))
    kwargs = {'k': 1, 'initialization': 'Furthest', 'cols': cols, 'destination_key': 'KMeansModel.hex', 'seed': 265211114317615310, }
    start = time.time()
    kmeans = h2o_cmd.runKMeansOnly(parseResult=parseKey, timeoutSecs=timeoutSecs, retryDelaySecs=2, pollTimeoutSecs=60, **kwargs)
    elapsed = (time.time() - start)
    print 'kmeans end on ', csvPathname, 'took', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
    (centers, tupleResultList) = h2o_kmeans.bigCheckResults(self, kmeans, csvPathname, parseResult, 'd', **kwargs)
    expected = [([(-0.0006628900000000158), (-0.0004671200060434639), 0.0009330300069879741, 0.0007883800000000272, 0.0007548200000000111, 0.0005617899864856153, 0.0013246499999999897, 0.0004036299999999859, (-0.0014307100000000314), 0.0021324000161308796, 0.00154], num_rows, None)]
    allowedDelta = (0.01, 0.01, 0.01)
    h2o_kmeans.compareResultsToExpected(self, tupleResultList, expected, allowedDelta, trial=0)
    inspect = h2o_cmd.runInspect(None, key=kmeans['destination_key'])
    KMeansModel = inspect['KMeansModel']
    clusters = KMeansModel['clusters'][0]
    print 'clusters:', h2o.dump_json(clusters)
    if self.clusters1:
        h2o_kmeans.compareToFirstKMeans(self, clusters, self.clusters1)
    else:
        self.clusters1 = copy.deepcopy(clusters)
