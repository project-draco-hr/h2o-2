def kmeans_doit(self, csvFilename, csvPathname, timeoutSecs=30):
    print '\nStarting KMeans of', csvFilename
    parseKey = h2o_cmd.parseFile(csvPathname=csvPathname, key2=(csvFilename + '.hex'), timeoutSecs=10)
    cols = ','.join(map(str, range(11)))
    kwargs = {'k': 1, 'epsilon': 1e-06, 'cols': cols, 'destination_key': 'KMeansModel.hex', }
    start = time.time()
    kmeans = h2o_cmd.runKMeansOnly(parseKey=parseKey, timeoutSecs=timeoutSecs, retryDelaySecs=2, pollTimeoutSecs=60, **kwargs)
    elapsed = (time.time() - start)
    print 'kmeans end on ', csvPathname, 'took', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
    h2o_kmeans.simpleCheckKMeans(self, kmeans, **kwargs)
    inspect = h2o_cmd.runInspect(None, key=kmeans['destination_key'])
    KMeansModel = inspect['KMeansModel']
    clusters = KMeansModel['clusters'][0]
    print 'clusters:', h2o.dump_json(clusters)
    if self.clusters1:
        h2o_kmeans.compareToFirstKMeans(self, clusters, self.clusters1)
    else:
        self.clusters1 = copy.deepcopy(clusters)
