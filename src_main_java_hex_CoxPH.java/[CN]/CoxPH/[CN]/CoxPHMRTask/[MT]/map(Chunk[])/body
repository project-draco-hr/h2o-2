{
  Chunk xs=cols[0];
  Chunk start=null;
  if (_use_start_column)   start=cols[cols.length - 3];
  Chunk stop=cols[cols.length - 2];
  Chunk events=cols[cols.length - 1];
  int i, t, t1=-1, t2;
  long start_i, stop_i, event_i;
  double x_i, logRisk_i, risk_i, xRisk_i, xxRisk_i;
  countRiskSet=MemoryManager.malloc8(_n_time);
  countCensored=MemoryManager.malloc8(_n_time);
  countEvents=MemoryManager.malloc8(_n_time);
  sumXEvents=MemoryManager.malloc8d(_n_time);
  sumRiskEvents=MemoryManager.malloc8d(_n_time);
  sumXRiskEvents=MemoryManager.malloc8d(_n_time);
  sumXXRiskEvents=MemoryManager.malloc8d(_n_time);
  sumLogRiskEvents=MemoryManager.malloc8d(_n_time);
  rcumsumRisk=MemoryManager.malloc8d(_n_time);
  rcumsumXRisk=MemoryManager.malloc8d(_n_time);
  rcumsumXXRisk=MemoryManager.malloc8d(_n_time);
  for (i=0; i < stop._len; i++) {
    boolean missing_obs=stop.isNA0(i) || events.isNA0(i) || xs.isNA0(i);
    if (_use_start_column)     missing_obs=missing_obs || start.isNA0(i);
    if (missing_obs)     n_missing++;
 else {
      event_i=events.at80(i);
      stop_i=stop.at80(i);
      t2=(int)(stop_i - _min_time);
      if (_use_start_column) {
        start_i=start.at80(i);
        if (start_i >= stop_i)         throw new IllegalArgumentException("start times must be strictly less than stop times");
        t1=(int)((start_i + 1) - _min_time);
      }
      x_i=xs.at0(i) - _x_mean;
      logRisk_i=x_i * _beta;
      risk_i=Math.exp(logRisk_i);
      xRisk_i=x_i * risk_i;
      xxRisk_i=x_i * xRisk_i;
      n++;
      if (event_i > 0) {
        countEvents[t2]++;
        sumXEvents[t2]+=x_i;
        sumRiskEvents[t2]+=risk_i;
        sumXRiskEvents[t2]+=xRisk_i;
        sumXXRiskEvents[t2]+=xxRisk_i;
        sumLogRiskEvents[t2]+=logRisk_i;
      }
 else       countCensored[t2]++;
      if (_use_start_column) {
        for (t=t1; t <= t2; t++) {
          countRiskSet[t]++;
          rcumsumRisk[t]+=risk_i;
          rcumsumXRisk[t]+=xRisk_i;
          rcumsumXXRisk[t]+=xxRisk_i;
        }
      }
 else {
        countRiskSet[t2]++;
        rcumsumRisk[t2]+=risk_i;
        rcumsumXRisk[t2]+=xRisk_i;
        rcumsumXXRisk[t2]+=xxRisk_i;
      }
    }
  }
}
