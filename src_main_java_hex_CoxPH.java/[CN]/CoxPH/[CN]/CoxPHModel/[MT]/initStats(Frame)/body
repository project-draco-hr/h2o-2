{
  final int n_coef=parameters.use_start_column ? source.numCols() - 3 : source.numCols() - 2;
  names_coef=new String[n_coef];
  for (int j=0; j < n_coef; ++j)   names_coef[j]=source.names()[j];
  coef=MemoryManager.malloc8d(n_coef);
  exp_coef=MemoryManager.malloc8d(n_coef);
  exp_neg_coef=MemoryManager.malloc8d(n_coef);
  se_coef=MemoryManager.malloc8d(n_coef);
  z_coef=MemoryManager.malloc8d(n_coef);
  x_mean=MemoryManager.malloc8d(n_coef);
  for (int j=0; j < n_coef; ++j)   x_mean[j]=source.vec(j).mean();
  gradient=MemoryManager.malloc8d(n_coef);
  hessian=malloc2DArray(n_coef,n_coef);
  var_coef=malloc2DArray(n_coef,n_coef);
  final Vec start_column=source.vec(source.numCols() - 3);
  final Vec stop_column=source.vec(source.numCols() - 2);
  min_time=parameters.use_start_column ? (long)start_column.min() + 1 : (long)stop_column.min();
  max_time=(long)stop_column.max();
  final int n_time=new CollectDomain(stop_column).doAll(stop_column).domain().length;
  time=MemoryManager.malloc8(n_time);
  n_risk=MemoryManager.malloc8(n_time);
  n_event=MemoryManager.malloc8(n_time);
  n_censor=MemoryManager.malloc8(n_time);
  cumhaz_0=MemoryManager.malloc8d(n_time);
  var_cumhaz_1=MemoryManager.malloc8d(n_time);
  var_cumhaz_2=malloc2DArray(n_coef,n_time);
}
