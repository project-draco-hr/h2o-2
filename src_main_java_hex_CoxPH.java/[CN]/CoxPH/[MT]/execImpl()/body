{
  Vec[] cols=source.vecs();
  int n_time=(int)(model.max_time - model.min_time + 1);
  double step=Double.NaN;
  double oldCoef=Double.NaN;
  double oldLoglik=-Double.MAX_VALUE;
  double newCoef=init;
  for (int i=0; i <= iter_max; i++) {
    model.iter=i;
    CoxPHMRTask coxMR=new CoxPHMRTask(newCoef,model.min_time,n_time,use_start_column,model.x_mean).doAll(cols);
    coxMR.finish();
    if (i == 0)     model.calcCounts(coxMR);
    double newLoglik=model.calcLoglik(coxMR);
    if (newLoglik > oldLoglik) {
      model.calcModelStats(newCoef,newLoglik);
      model.calcCumhaz_0(coxMR);
      if (newLoglik == 0)       model.lre=-Math.log10(Math.abs(oldLoglik - newLoglik));
 else       model.lre=-Math.log10(Math.abs((oldLoglik - newLoglik) / newLoglik));
      if (model.lre >= lre_min)       break;
      step=model.gradient / model.hessian;
      if (Double.isNaN(step) || Double.isInfinite(step))       break;
      oldCoef=newCoef;
      oldLoglik=newLoglik;
    }
 else     step/=2;
    newCoef=oldCoef - step;
  }
  Futures fs=new Futures();
  DKV.put(dest(),model,fs);
  fs.blockForPending();
}
