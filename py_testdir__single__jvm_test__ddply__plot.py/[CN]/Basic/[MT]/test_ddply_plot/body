def test_ddply_plot(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    if DO_KNOWN_FAIL:
        tryList = [(1000000, 5, 'cD', 0, 320, 30)]
    else:
        tryList = [(1000000, 5, 'cD', 0, 20, 30), (1000000, 5, 'cD', 0, 50, 30), (1000000, 5, 'cD', 0, 160, 30)]
    if DO_APPEND_KNOWN_FAIL2:
        tryList.append((1000000, 5, 'cD', 0, 160, 30))
        tryList.append((1000000, 5, 'cD', 0, 320, 30))
    xList = []
    eList = []
    fList = []
    trial = 0
    for (rowCount, colCount, hex_key, minInt, maxInt, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        if DO_KNOWN_FAIL:
            csvFilename = 'syn_ddply_1Mx5_0_320.gz'
            bucket = 'home-0xdiag-datasets'
            csvPathname = ('standard/' + csvFilename)
            minInt = 0
            maxInt = 320
        else:
            bucket = None
            csvFilename = (((((('syn_' + 'binary') + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
            csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
            print 'Creating random', csvPathname, 'with range', ((maxInt - minInt) + 1)
            write_syn_dataset(csvPathname, rowCount, colCount, minInt, maxInt, SEEDPERFILE)
        for lll in range(1):
            hexKey = 'r.hex'
            parseResult = h2i.import_parse(bucket=bucket, path=csvPathname, schema='local', hex_key=hexKey)
            inspect = h2o_cmd.runInspect(key=hexKey)
            missingValuesList = h2o_cmd.infoFromInspect(inspect, csvFilename)
            self.assertEqual(missingValuesList, [], ('a1 should have no NAs in parsed dataset: %s' % missingValuesList))
            for (resultKey, execExpr) in initList:
                h2e.exec_expr(h2o.nodes[0], execExpr, resultKey=resultKey, timeoutSecs=60)
            maxExpectedGroups = (((maxInt - minInt) + 1) ** 2)
            execExpr = (('a1 = ddply(r.hex, c(1,2), ' + PHRASE) + ')')
            start = time.time()
            (execResult, result) = h2e.exec_expr(h2o.nodes[0], execExpr, resultKey=None, timeoutSecs=90)
            groups = execResult['num_rows']
            h2o_util.assertApproxEqual(groups, maxExpectedGroups, rel=0.2, msg=("groups %s isn't close to expected amount %s, minInt: %s maxInt: %s" % (groups, maxExpectedGroups, minInt, maxInt)))
            ddplyElapsed = (time.time() - start)
            print 'ddplyElapsed:', ddplyElapsed
            print 'execResult', h2o.dump_json(execResult)
            a1dump = h2o_cmd.runInspect(key='a1')
            print 'a1', h2o.dump_json(a1dump)
            missingValuesList = h2o_cmd.infoFromInspect(a1dump, 'a1')
            self.assertEqual(missingValuesList, [], ('a1 should have no NAs: %s trial: %s' % (missingValuesList, trial)))
            execExpr = (('a2 = ddply(r.hex, c(1,2), ' + PHRASE) + ')')
            start = time.time()
            (execResult, result) = h2e.exec_expr(h2o.nodes[0], execExpr, resultKey=None, timeoutSecs=90)
            groups = execResult['num_rows']
            h2o_util.assertApproxEqual(groups, maxExpectedGroups, rel=0.2, msg=("groups %s isn't close to expected amount %s, minInt: %s maxInt: %s" % (groups, maxExpectedGroups, minInt, maxInt)))
            ddplyElapsed = (time.time() - start)
            print 'ddplyElapsed:', ddplyElapsed
            print 'execResult', h2o.dump_json(execResult)
            a2dump = h2o_cmd.runInspect(key='a2')
            print 'a2', h2o.dump_json(a2dump)
            missingValuesList = h2o_cmd.infoFromInspect(a2dump, 'a2')
            self.assertEqual(missingValuesList, [], ('a2 should have no NAs: %s trial: %s' % (missingValuesList, trial)))
            execExpr = 'sum(a1!=a2)==0'
            (execResult, result) = h2e.exec_expr(h2o.nodes[0], execExpr, resultKey=None, timeoutSecs=90)
            execExpr = 's=c(0); s=(a1!=a2)'
            (execResult1, result1) = h2e.exec_expr(h2o.nodes[0], execExpr, resultKey=None, timeoutSecs=120)
            print 'execResult', h2o.dump_json(execResult)
            sdump = h2o_cmd.runInspect(key='s')
            print 's', h2o.dump_json(sdump)
            self.assertEqual(result, 1, ("a1 and a2 weren't equal? Maybe ddply can vary execution order (fp error? so multiple ddply() can have different answer. %s %s %s" % (FUNC_PHRASE, result, h2o.dump_json(execResult))))
            trial += 1
            xList.append(groups)
            eList.append(ddplyElapsed)
            fList.append(ddplyElapsed)
    if DO_PLOT:
        xLabel = 'groups'
        eLabel = 'ddplyElapsed'
        fLabel = 'ddplyElapsed'
        eListTitle = ''
        fListTitle = ''
        h2o_gbm.plotLists(xList, xLabel, eListTitle, eList, eLabel, fListTitle, fList, fLabel)
