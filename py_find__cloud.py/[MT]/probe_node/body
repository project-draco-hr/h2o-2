def probe_node(line):
    (http_addr, sep, port) = line.rstrip('\n').partition(':')
    print 'http_addr:', http_addr, 'port:', port
    if (port == ''):
        port = '54321'
    if (http_addr == ''):
        http_addr = '127.0.0.1'
    start = time.time()
    gc = get_cloud(http_addr, port)
    consensus = gc['consensus']
    locked = gc['locked']
    cloud_size = gc['cloud_size']
    cloud_name = gc['cloud_name']
    node_name = gc['node_name']
    nodes = gc['nodes']
    probes = []
    for n in nodes:
        print 'free_mem_bytes (GB):', ('%0.2f' % ((n['free_mem_bytes'] + 0.0) / ((1024 * 1024) * 1024)))
        print 'tot_mem_bytes (GB):', ('%0.2f' % ((n['tot_mem_bytes'] + 0.0) / ((1024 * 1024) * 1024)))
        java_heap_GB = ((n['tot_mem_bytes'] + 0.0) / ((1024 * 1024) * 1024))
        java_heap_GB = round(java_heap_GB, 2)
        print 'java_heap_GB:', java_heap_GB
        print 'name:', n['name'].lstrip('/')
        print 'num_cpus:', n['num_cpus']
        (ip, sep, port) = n['name'].lstrip('/').partition(':')
        print 'ip:', ip
        print 'port:', port
        if ((not ip) or (not port)):
            raise Exception(("bad ip or port parsing from h2o get_cloud nodes 'name' %s" % n['name']))
        newName = ((ip + ':') + port)
        probes.append(newName)
    gcString = json.dumps(gc)
    node = {'http_addr': http_addr, 'base_port': port, }
    h2oNodes.append(node)
    print ('Added node %s %s' % (n, node))
    return probes
