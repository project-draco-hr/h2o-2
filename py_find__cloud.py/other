import time, sys, json, re, getpass, requests, argparse, os, shutil
parser = argparse.ArgumentParser(description='Creates h2o-node.json for cloud cloning from existing cloud')
parser.add_argument('-f', '--flatfile', help='Use this flatfile to start probes\ndefaults to pytest_flatfile-<username> which is created by python tests', type=str)
parser.add_argument('-hdfs_version', '--hdfs_version', choices=['0.20.2', 'cdh3', 'cdh4', 'cdh4_yarn', 'mapr2.1.3', 'mapr3.0.1'], default='cdh3', help='Use this for setting hdfs_version in the cloned cloud', type=str)
parser.add_argument('-hdfs_config', '--hdfs_config', default=None, help='Use this for setting hdfs_config in the cloned cloud', type=str)
parser.add_argument('-hdfs_name_node', '--hdfs_name_node', default='192.168.1.176', help='Use this for setting hdfs_name_node in the cloned cloud. Can be ip, ip:port, hostname, hostname:port', type=str)
parser.add_argument('-expected_size', '--expected_size', default=None, help='Require that the discovered cloud has this size, at each discovered node, otherwise exception', type=int)
args = parser.parse_args()
LOG_DIR = 'sandbox'
with open(flatfile_name(), 'r') as f:
    possMembers = f.readlines()
f.close()
h2oNodes = {}
probes = set()
tries = 0
for (n1, possMember) in enumerate(possMembers):
    tries += 1
    if (possMember not in probes):
        probes.add(possMember)
        members2 = probe_node(possMember, h2oNodes)
        for (n2, member2) in enumerate(members2):
            tries += 1
            if (member2 not in probes):
                probes.add(member2)
                probe_node(member2, h2oNodes)
print ('\nWe did %s tries' % tries)
print 'len(probe):', len(probes)
h2oNodesList = [v for (k, v) in h2oNodes.iteritems()]
print 'Checking for two h2os at same ip address'
ips = {}
count = {}
for h in h2oNodesList:
    ip = h['http_addr']
    if (ip in ips):
        count[ip] += 1
        print ("\nWARNING: appears to be %s h2o's at the same IP address" % count[ip])
        print 'initial:', ips[ip]
        print 'another:', h, '\n'
    else:
        ips[ip] = h
        count[ip] = 1
print 'Writing h2o-nodes.json'
expandedCloud = {'cloud_start': {'time': 'null', 'cwd': 'null', 'python_test_name': 'null', 'python_cmd_line': 'null', 'config_json': 'null', 'username': 'null', 'ip': 'null', }, 'h2o_nodes': h2oNodesList, }
print 'Cleaning sandbox, (creating it), so tests can write to commands.log normally'
clean_sandbox()
with open('h2o-nodes.json', 'w+') as f:
    f.write(json.dumps(expandedCloud, indent=4))
