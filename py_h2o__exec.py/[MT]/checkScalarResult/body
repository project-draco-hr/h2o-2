def checkScalarResult(resultInspect, resultKey):
    h2o.verboseprint('checkScalarResult resultInspect:', h2o.dump_json(resultInspect))
    if (type(resultInspect) is not dict):
        print 'Trimming resultInspect hier.'
        resultInspect0 = resultInspect[0]
    else:
        resultInspect0 = resultInspect
    emsg = None
    while True:
        if ('type' not in resultInspect0):
            emsg = "'type' missing. Look at the json just printed"
            break
        t = resultInspect0['type']
        if (t != 'parsed'):
            emsg = (resultKey + " 'type' is not 'parsed'. Look at the json just printed")
            break
        if ('row_data' not in resultInspect0):
            emsg = "Inspect response: 'row_data' missing. Look at the json just printed"
            break
        row_data = resultInspect0['row_data']
        break
    if (emsg is not None):
        print (("\nKey: '" + resultKey) + "' being inspected:\n"), h2o.dump_json(resultInspect)
        sys.stdout.flush()
        raise Exception(('Inspect problem:' + emsg))
    metaDict = {}
    for m in row_data:
        for (key, value) in m.items():
            if (key == 'row'):
                a = value
            else:
                b = value
        metaDict[a] = b
    for (key, value) in metaDict.items():
        h2o.verboseprint('Inspect metadata:', key, value)
    min_value = metaDict['min']
    checkForBadFP(min_value)
    return min_value
