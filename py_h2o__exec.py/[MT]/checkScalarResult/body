def checkScalarResult(resultInspect, resultKey):
    h2o.verboseprint('checkScalarResult resultInspect:', h2o.dump_json(resultInspect))
    resultInspect0 = resultInspect[0]
    if ('num_rows' not in resultInspect0):
        emsg = "Inspect response: 'num_rows' missing. Look at the json just printed"
    elif ('cols' not in resultInspect0):
        emsg = "Inspect response: 'cols' missing. Look at the json just printed"
    else:
        emsg = None
        num_cols = resultInspect0['num_cols']
        num_rows = resultInspect0['num_rows']
        cols = resultInspect0['cols']
    if emsg:
        print (("\nKey: '" + str(resultKey)) + "' inspect result:\n"), h2o.dump_json(resultInspect)
        sys.stdout.flush()
        raise Exception(('Inspect problem:' + emsg))
    if (not cols):
        scalar = resultInspect0['scalar']
        if (scalar is None):
            raise Exception(('both cols and scalar are null: %s %s' % (cols, scalar)))
        checkForBadFP(scalar)
        return scalar
    metaDict = cols[0]
    for (key, value) in metaDict.items():
        print 'Inspect metaDict:', key, value
    min_value = metaDict['min']
    stype = metaDict['type']
    checkForBadFP(min_value, nanOkay=(stype == 'Enum'))
    return min_value
