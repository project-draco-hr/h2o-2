def test_exec_enums_rand_cut(self):
    h2o.beta_features = True
    SYNDATASETS_DIR = h2o.make_syn_dir()
    n = 10
    tryList = [(n, 1, 1, 'cD', 300), (n, 2, 3, 'cE', 300), (n, 10, 9, 'cE', 300)]
    eKeys = [('e%s' % i) for i in range(10)]
    h2b.browseTheCloud()
    trial = 0
    xList = []
    eList = []
    fList = []
    for repeat in range(10):
        for (rowCount, iColCount, oColCount, hex_key, timeoutSecs) in tryList:
            colCount = (iColCount + oColCount)
            SEEDPERFILE = random.randint(0, sys.maxint)
            csvFilename = (((('syn_enums_' + str(rowCount)) + 'x') + str(colCount)) + '.csv')
            csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
            print 'Creating random', csvPathname
            write_syn_dataset(csvPathname, rowCount, iColCount, oColCount, SEEDPERFILE)
            e = random.sample(eKeys, 2)
            fKey = e[0]
            eKey = e[1]
            parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=eKey, timeoutSecs=30)
            print "Parse result['destination_key']:", parseResult['destination_key']
            inspect = h2o_cmd.runInspect(key=parseResult['destination_key'])
            print h2o.dump_json(inspect)
            (missingValuesDict, constantValuesDict, enumSizeDict, colTypeDict, colNameDict) = h2o_cmd.columnInfoFromInspect(parseResult['destination_key'], exceptionOnMissingValues=False)
            if (len(constantValuesDict) != 0):
                raise Exception(("Probably got a col NA'ed and constant values as a result %s" % constantValuesDict))
            randICol = random.randint(0, (iColCount - 1))
            randOCol = random.randint(iColCount, ((iColCount + oColCount) - 1))
            start = time.time()
            h2o.nodes[0].exec_query(str=('%s=%s[%s,]' % (fKey, eKey, randOCol)))
            elapsed = (time.time() - start)
            print 'exec1 end on ', csvFilename, 'took', elapsed, 'seconds.'
            execTime = elapsed
            gKey = random.choice(eKeys)
            start = time.time()
            h2o.nodes[0].exec_query(str=('%s=%s' % (gKey, fKey)))
            print 'exec2 end on ', csvFilename, 'took', elapsed, 'seconds.'
            elapsed = (time.time() - start)
            execTime = elapsed
            quantile = (0.5 if DO_MEDIAN else 0.999)
            column = iColCount
            start = time.time()
            q = h2o.nodes[0].quantiles(source_key=fKey, column=column, quantile=quantile, max_qbins=MAX_QBINS, multiple_pass=MULTI_PASS)
            elapsed = (time.time() - start)
            print 'quantile end on ', csvFilename, 'took', elapsed, 'seconds.'
            quantileTime = elapsed
            start = time.time()
            h2o.nodes[0].remove_all_keys()
            elapsed = (time.time() - start)
            print 'remove all keys end on ', csvFilename, 'took', elapsed, 'seconds.'
            trial += 1
            xList.append(trial)
            eList.append(execTime)
            fList.append(quantileTime)
    if DO_PLOT:
        xLabel = 'trial'
        eLabel = 'exec cut time'
        fLabel = 'quantile time'
        eListTitle = ''
        fListTitle = ''
        h2o_gbm.plotLists(xList, xLabel, eListTitle, eList, eLabel, fListTitle, fList, fLabel)
