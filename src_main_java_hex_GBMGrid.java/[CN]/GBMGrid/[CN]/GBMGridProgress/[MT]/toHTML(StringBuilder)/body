{
  FrameWithProgress frame=UKV.get(Key.make(dst_key.value()));
  if (frame == null)   DocGen.HTML.section(sb,"Building a first model");
 else   DocGen.HTML.section(sb,"Building model: " + frame.currentJob + " of "+ frame.totalJobs);
  GBMGrid grid=(GBMGrid)Job.findJob(Key.make(job.value()));
  GBMModel model=null;
  if (grid.currentModel != null) {
    Key dest=UKV.get(grid.currentModel);
    if (dest != null)     model=UKV.get(dest);
  }
  if (model != null)   DocGen.HTML.section(sb,"Building tree: " + (model.numTrees() + 1) + " of "+ model.N+ " for current model");
  if (frame != null) {
    DocGen.HTML.arrayHead(sb);
    sb.append("<tr class='warning'>");
    for (int i=0; i < frame._vecs.length; i++)     sb.append("<td><b>").append(frame._names[i]).append("</b></td>");
    sb.append("</tr>");
    for (int j=0; j < frame.numRows(); j++) {
      sb.append("<tr>");
      for (int i=0; i < frame._vecs.length; i++) {
        sb.append("<td>");
        String txt=Inspect2.x0(frame._vecs[i],j);
        if (i == KEYS_INDEX) {
          String key=frame._vecs[i]._domain[(int)frame._vecs[i].at8(j)];
          sb.append(GBMModelView.link(txt,Key.make(key)));
        }
 else         sb.append(txt);
        if (i == KEYS_INDEX)         sb.append("</a>");
        sb.append("</td>");
      }
      sb.append("</tr>");
    }
    DocGen.HTML.arrayTail(sb);
  }
  return true;
}
