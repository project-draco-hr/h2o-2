import sys
import math
DO_MEDIAN = True
DO_TO_BEFORE = False
sys.path.extend(['.', '..', 'py'])
import h2o_print as h2p, h2o_summ
import numpy as np
import scipy as sp
csvPathname = './syn_binary_100000x1.csv'
col = 0
print 'Reading csvPathname'
dataset = np.genfromtxt(open(csvPathname, 'r'), delimiter=',', skip_header=1, dtype=None)
print dataset.shape
target = dataset
targetFP = np.array(target, np.float)
n_features = (len(dataset) - 1)
print 'n_features:', n_features
print 'histogram of target'
print target
print sp.histogram(target)
thresholds = [0.001, 0.01, 0.1, 0.25, 0.33, 0.5, 0.66, 0.75, 0.9, 0.99, 0.999]
d = target
dmin = min(d)
dmax = max(d)
drows = len(d)
if DO_MEDIAN:
    thresholdList = [0.5]
else:
    thresholdList = [0.999]
quantiles = findQuantileList(d, dmin, dmax, drows, thresholdList)
per = [(1 * t) for t in thresholds]
print 'scipy per:', per
from scipy import stats
a1 = stats.scoreatpercentile(target, per=(100 * (0.5 if DO_MEDIAN else 0.999)), interpolation_method='fraction')
h2p.red_print('stats.scoreatpercentile:', a1)
a2 = stats.mstats.mquantiles(targetFP, prob=per)
h2p.red_print('scipy stats.mstats.mquantiles:', [('%.2f' % v) for v in a2])
targetFP.sort()
b = h2o_summ.percentileOnSortedList(targetFP, (0.5 if DO_MEDIAN else 0.999))
label = ('50%' if DO_MEDIAN else '99.9%')
h2p.blue_print(label, 'from scipy:', a2[(5 if DO_MEDIAN else 10)])
a3 = stats.mstats.mquantiles(targetFP, prob=per)
h2p.red_print('after sort')
h2p.red_print('scipy stats.mstats.mquantiles:', [('%.2f' % v) for v in a3])
