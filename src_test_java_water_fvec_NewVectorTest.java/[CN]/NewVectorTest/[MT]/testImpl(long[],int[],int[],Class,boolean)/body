{
  AppendableVec av=new AppendableVec(Vec.newKey());
  NewChunk nv=new NewChunk(av,0);
  nv._ls=ls;
  nv._id=id;
  nv._xs=xs;
  nv._len=nv._sparseLen=ls.length;
  Chunk bv=nv.compress();
  Futures fs=new Futures();
  bv._vec=av.close(fs);
  fs.blockForPending();
  assertTrue("Found chunk class " + bv.getClass() + " but expected "+ C,C.isInstance(bv));
  assertEquals(hasFloat,bv.hasFloat());
  for (int i=0; i < ls.length; i++)   if (ls[i] == Long.MAX_VALUE && xs[i] == Integer.MIN_VALUE)   assertTrue(bv.isNA0(i));
 else   assertEquals(ls[i] * DParseTask.pow10(xs[i]),bv.at0(i),bv.at0(i) * EPSILON);
  UKV.remove(av._key);
}
