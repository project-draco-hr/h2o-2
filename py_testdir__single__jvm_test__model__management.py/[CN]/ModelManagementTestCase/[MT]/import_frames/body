def import_frames(self):
    node = h2o.nodes[0]
    prostate_hex = self.import_frame('prostate.hex', 'smalldata', 'prostate.csv', 'logreg', 380, 9)
    airlines_train_hex = self.import_frame('airlines_train.hex', 'smalldata', 'AirlinesTrain.csv.zip', 'airlines', 24421, 12)
    airlines_test_hex = self.import_frame('airlines_test.hex', 'smalldata', 'AirlinesTest.csv.zip', 'airlines', 2691, 12)
    has_uuid_hex = self.import_frame('has_uuid.hex', 'smalldata', 'test_all_raw_top10rows.csv', 'test', 12, 89)
    print (('Checking ' + str(len(h2o.nodes))) + ' nodes for frames: ')
    for a_node in h2o.nodes:
        print ((('  ' + a_node.http_addr) + ':') + str(a_node.port))
    test_hash_before = (-1)
    train_hash_before = (-1)
    for a_node in h2o.nodes:
        frames = a_node.frames()
        self.assertKeysExist(frames, 'frames', ['airlines_train.hex'])
        self.assertKeysExist(frames, 'frames', ['airlines_test.hex'])
        self.assertKeysExist(frames, 'frames/airlines_test.hex', ['id'])
        self.assertKeysExist(frames, 'frames', ['has_uuid.hex'])
        tmp = frames['frames']['airlines_test.hex']['id']
        if (test_hash_before != (-1)):
            self.assertEquals(tmp, test_hash_before, 'Same hash on every node for airlines_test.hex')
        test_hash_before = tmp
        tmp = frames['frames']['airlines_train.hex']['id']
        if (train_hash_before != (-1)):
            self.assertEquals(tmp, train_hash_before, 'Same hash on every node for airlines_train.hex')
        train_hash_before = tmp
        self.assertNotEqual('ffffffffffffffff', test_hash_before)
        self.assertNotEqual('ffffffffffffffff', train_hash_before)
        self.assertNotEqual('0', test_hash_before)
        self.assertNotEqual('0', train_hash_before)
    self.create_new_boolean('airlines_train.hex', 'IsDepDelayed_REC', 'IsDepDelayed_REC_recoded')
    self.create_new_boolean('airlines_test.hex', 'IsDepDelayed_REC', 'IsDepDelayed_REC_recoded')
    frames = node.frames()
    self.assertKeysExist(frames, 'frames', ['airlines_train.hex'])
    self.assertKeysExist(frames, 'frames', ['airlines_test.hex'])
    self.assertKeysExist(frames, 'frames/airlines_test.hex', ['id'])
    train_hash_after = frames['frames']['airlines_train.hex']['id']
    test_hash_after = frames['frames']['airlines_test.hex']['id']
    self.assertNotEqual(train_hash_before, train_hash_after, ('Expected airlines_train hash to change. . .  Before and after were both: ' + train_hash_after))
    self.assertNotEqual(test_hash_before, test_hash_after, ('Expected airlines_test hash to change. . .  Before and after were both: ' + test_hash_after))
    print 'airlines_train hash before: ', train_hash_before, ', after: ', train_hash_after
    print 'airlines_test hash before: ', test_hash_before, ', after: ', test_hash_after
    return (prostate_hex, airlines_train_hex, airlines_test_hex)
